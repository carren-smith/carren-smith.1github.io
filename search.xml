<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[《断舍离》_读书笔记]]></title>
      <url>%2F2017%2F10%2F09%2F%E3%80%8A%E6%96%AD%E8%88%8D%E7%A6%BB%E3%80%8B_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《断舍离》 - [日] 山下英子 断舍离，表达了通过 [ 断 ] 与 [ 舍 ] 两种行为，去达到 [ 离 ] 这一状态的目的。 通过《断舍离》，认识了自己与物品对话的两个非常重要的角度 我与物品的关系：从 [ 以物品为中心 ] 向 [ 以我为中心 ] 的视角转变 时间维度 以 [ 当下 ] 为核心； 断，停止负面的思考模式；断绝想要进入自己家的不需要的东西。 舍，顺从自己的心，割舍既有；舍去非当下的、不适合自己的物品，舍去家里到处泛滥的破烂儿 离，达到一种释怀的状态，摒弃 “多就是好” 的观念；脱离对物品的执念，处于自在的空间 断舍离的主角不是物品，而是自己。这是一种以 “物品和自己的关系” 的核心来进行取舍物品的技术。你要做到的思考方式并不是 [ 这东西还能用，所以要留下来 ]，而是 [ 我要用，所以它很必要 ]。主语永远都是自己，而时间轴永远都是现在。 物品要用才有价值； 物品在此时、当下，应出现在需要它的地方 物品处于恰当的位置，才能展现美感。 why - 为什么要读这本书 对当下生活以及精神状态的梳理 what - 这本书在讲什么 围绕两个核心观点：(1) 我与物品的关系 - 以我为中心； (2) 时间维度：时间轴 How - 如何依次发展这个观点的 what - 什么是断舍离，以及行为(do)进行简单描述 why failed - 为什么失败的集中原因 should do - 应该怎么做 just do - 实际的行动方法 what - 对生活的指导意义 重新认识了对物品以及家居整理的思维方式 How - 具体怎么做 通过整理自己的房间来落实到行为 第一章 断舍离的机制 what 在考虑如何处理物品时，我们把轴错位在了物品与他人、不确定的未来和已经成为过去的过去上面。 断舍离的主角不是物品，而是自己，考虑的是 “我自己” 还需不需要它。“扔了很可惜，还是留下来吧” 这种想法，就是拿物品当主角。 要得出 “ 这种东西与当下的我很相称，对当下的我来首是必需品 “ 这样的判断，我们就必须清楚地了解自己。通过不断地筛选物品，当下的自我就会越来越鲜明地呈现在自己眼前，人也就能以此判断出准确的自我形象。 一个人所使用的物品，能够反映出自我形象。认识到了自我形象，反过来就会开始想要把现在用的东西替换掉。 断舍之后，才是整理。 在达到 “ 舍 “ 之前就是整理物品是没有意义的。毕竟跟没用的东西说话是根本没有用的。 东西要用才有价值；或者说，物品全部的价值在于使用。 仅特殊的物品有收藏、回忆的价值。 物品应该以必要的量出现在必要的地方，这才真正有意义。 通过有意识地选择让物品回归到它应该在的地方，回归到需要它的地方。这就是断舍离要做的。 断舍离 Vs. 收纳术 断舍离 收纳术 前提 代谢与替换 保管与维持 主角 自己 物品 焦点 关系性 物品或自己或赠送物品的对象 核心轴 感性、适宜、需要、合适、舒服 物质、可惜、能用或不能用 时间轴 现在、当下 过去、未来 意识 选择、决定 回避 手续 少 多 不需要 需要 收纳物 不需要 需要 第二章 无法丢弃的理由 why failed 物品本来就是为了让人使用才被生产出来的。 入口是 “ 断 “ 的闸门，出口是 “ 舍 “ 的闸门。我们会在不知不觉中掉进折扣的陷阱，完全忘记了 “ 东西是不是适合自己的品味 “。 【对于这一点，自己做得还是比较好的；购物的时候比较理性】 **扔不掉东西的三种人： 逃避现实型：太过忙碌，几乎没有时间待在家里 执着过去型：活在过去的生活当中，不愿丢弃以往的物品 担忧未来型：缺乏安全感；致力于投资不知何时回发生的未来的不安要素 扔不掉 = 不想扔 可以丢弃的三类物品 不用的东西：漫不经心地保存或放着不管的东西，甚至已经忘记了它的存在；只因为一想到扔掉就有所不安所以一直拖延没有扔 还在用的东西：东西可以用，但并不喜欢，所以就随便用着。因此我们会随意地乱放，也不会珍惜。【警惕这类物品；这类是与自己不相配的东西】 充满回忆的东西：充满了回忆与怀念，所以扔不掉 物品本来就是为了让人使用才被生产出来的。如果站在物品的立场上去看的话，它们会说 “我好寂寞呀；用用我吧；你如果不用的话就把我送到一个能派上用处的地方吧。” 【物品就像你的朋友，如果TA被忽略和遗忘，那会是什么感受】 当杂物占据了空间，其实是把时间轴错位到了过去与未来。 家里放着的东西，有80%都是时间错误的。在断舍离中，比起凌乱，堆积了聚焦于过去和未来的物品才是问题的关键。 “ 买的时候花了10万日元，这个事实总是涌上心头，把自己完全逼回到过去。” 聚焦于现在的物品分类两类：日常 &amp; 非日常 要把重点放在日常上 ​ 第三章 断舍离的思考法则 should do 以自我为轴心，把时间轴放在当下。 能用的东西 Vs. 我用的东西 是不同的；在考虑物品是否被留下时，思考的主语是 “ 我 “，而不是物品。 整理 $\ne$ 收拾； 收拾：筛选出必需的物品；数量上有所变化 整理：调整物品的位置；数量上保持不变 第四章 断舍离的实践方法 Just Do 充分理解并利用 [ 七五一 ] 的总量限制原则，并且伴随着替换原则（由于总量的限制，当你购入新的物品时，就必须放弃旧的物品；） 聚焦于某一个场所，然后开始收拾。即便只是一个抽屉，甚至夸张一点，即使是一个塞满了购物小票的钱包也可以。 储备物品是人类的本能。为了未来可能会到来的危机而提早做足准备的想法总是不断浮现在我们的意识里。不过，如今这个时代我们搜储备的东西早就远远超过了必须量。 把东西送给别人时，不要给对方负担；要询问对方是否真的需要，并要表明若不需要就扔掉的态度；把自己用不着的东西送给有需要的人时，要说 “ 请收下 “，而不是说 “ 给你 “。 分类按照 分成三类 的原则逐步进行，而不是一次就进行到底； 大分类：餐具、烹饪器材、食材 中分类：（盘子、容器、杯子）、（电器、水槽周边、炉子周边）、（冷冻室、蔬菜保鲜、冷藏室） 小分类：（大盘子、小盘子、其他）、（加热用、烹饪准备用、其他）、（已烹饪过、未烹饪、冰淇淋） 七五一的总量限制原则 看不见的收纳空间：放满70% 柜子里的东西、抽屉里的东西；留出30%的空间，是因为这会让人有把它手机整齐的欲望和心情，并且空出来的空间能成为物品出入的通道 看得见的收纳空间：放满50% （书架、CD架之类兴趣的东西除外） 给别人看的收纳空间：只能放10%（最低限度地放东西） 比如美术展览馆中，名画多半是单独挂在一面很宽的墙上 伴随总量限制原则的替换原则； 由于总量的限制，当你购入新的物品时，就必须放弃旧的物品； 尽量减少把东西拿出来的压力；摆放物品的时候，遵从一个动作原则；即一个动作就能够取出所要的物品。 核心在于 物品摆放的方式是不是便于选择。 第五章 看不见的世界在变化 试着使用高于自我形象的物品。因为人是很容易根据外界变化做出自我调节适应的；你会尽量努力去让自己配得上你所拥有的物品。 好不容易能拥有一件物品，与其觉得 “ 算了，就它吧 “ ，不如觉得 “ 必须要这个不可 “；因为后者更能让人在维护管理这件东西的时候保持愉悦的心情。【购买单肩包，自己也是换了又换；十一购买外套，为了能够买到它，特意去了多个地方，最后终于顺利买到仅剩一件的合适尺码】]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[个人日志_2017年8月总结]]></title>
      <url>%2F2017%2F09%2F10%2F%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97_2017%E5%B9%B48%E6%9C%88%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[8月总结 孤独袭来。甚是惶恐。 【运动&amp;健康】 8分 为期一个多月的游泳课终于结束了，虽然中间碰到了更换教练，教练出差等原因中断过，但最终还是顺利结业了。顺利学会了蛙泳，有待提高的是腿部动作，还有踩水依然是个问题；对于仰泳，目前依然是个问题。对自己说，自己先尝试学习，如果明年试了几次之后还是不会，可以考虑再报班学习。（建立日历备忘） 开始加入了 “羽毛球” 的行列；对于运动，更注重如何正确、健康地进行运动 对于规律作息，晚睡的习惯真的难改。下意识的就不想入睡；想起之前有专门研究过晚睡的原因，有一条就是 “不愿结束今天”。自律性越来越差，明明已经意识到把手机带到了床铺了，可还是妥协了。 花了更多的时间在运动上，游泳也好，打羽毛球也罢；是因为无处可去；也花了更多时间在工作上，因为需要成就。 运动这件事情上，自己很容易过度。就是明明自己很累了，但还坚持上去打。其实这样不好，真的不好，要克制。 ​ 【生活&amp;娱乐】 6分 由于之前投稿参加主题为《变化》的征文比赛，收到了参与奖《野蛮生长》这本书，内容涉及作者在创业过程中的心路总结。由于自己并没有什么兴趣，所以根本没有去翻过。 看完了《权利的游戏》第七季； 看了《艺术书展》。原本以为在世博源旁，后来才发现其实在更远的地方，地点在 上海民生现代美术馆；想一想，上一次来这里应该是2年前的事情了； 头发越剪越短，因为烦恼不断。 穿灰色的短袖让自己更加暗淡，决定在穿那件灰色的V领的衣服。穿让自己感觉心情舒畅的衣服。 手机开始出现了比较严重的问题：经常无法联接网络 + 用过共享单车之后电池会一直烧直到耗尽电量；真的需要赶紧更换新手机。之前自己的计划是可以把预算提到6K 来买最新的iphone7s 。之后的想法就不一样了。因为更加清楚地认识到自己要的是什么，不追求最新的技术，需要的是更高的性价比；手机对我的意义更重要的是程序运行的流畅性 + 足够的待机时间。因为自己不玩游戏，所以也并没有特别高的要求。所以，你也不需要在意他人的眼光，你要明白自己到底要的是什么才是最关键的。 【阅读&amp;学习】 6分 翻阅《货币金融学》；了解债券、利率的关系； 《学会提问》，基于同事在看这本书，所以再一次拿起来看。还特意让老妈帮我从家里寄过来。只是到现在，也没真正开始看，只是翻阅了”理解数据” 这一章节。对于如何去理解数据，加深了认识； 第一反应：数据如何采集的 关注整体分布与全距，不要受均值的诱导 对于代码的编写，无论编写还是检查，都必须要一个字母一个字母地去拼写与检查，否则你是无法检查出错误的。 把之前7月份就看完的《代价论》《信任论》整理成了读书笔记 完成《练习的心态》摘抄；你不可能改变你不知道的事情。就正如如果你无法识别当下那个正在说话或行动的自己，那你就无法改变你自己。 【工作】 8分 这个月有一个给高层做《半年度回报PPT》的任务；发现自己对画PPT还是很热爱的，就是那种一谈到PPT眼睛就会发亮的那种。 PPT制作：用AI打开的矢量图可以直接复制到PPT中，并且可通过 “取消组合” 进行使用。以后若要使用 icon 一定要用这种方式。 文档整理；多个内容的整理与汇总；发现自己对于出自自己的作品（文档），还是有比较高的要求，会尽量去完善它。 在看数据的过程中，发现一个交易倍数最高，且盈利率最高的组别；与其他组别形成鲜明对比；准备去分析 “不同组别的交易倍数与盈利率”。但最后没有去落实。 刚开始并没有时间去进行 之后便开始思考这个事情的重要程度；假设我找出了交易的区别，那对减少可以盈亏有多少帮助？然，并不会改变什么。 开始真正把R应用到工作中； 把R与MSSQL数据框联接，进行调试 尝试用R来完成数据的导入与筛选 尝试用R的Knitr包来完成自动输出日报（进行中） 开始接受了项目：用户标签；借由这个项目，多次跟前端的业务人员有了充分的沟通。受益良多。但对于如何沟通与问问题，需要多去思考。去之前不仅要准备好问题提纲，更关键的是要明白自己设计这个问题的意义；要深层次的考虑。 通过访谈，是了解业务最直接的模式；很多信息，必须要去获得第一手的资料 作为数据分析师，应该要花多少时间在业务端上。其实，我们部门做的事情，并不是严格意义上的数据分析师做的事情；相比进行分析，更关键的在于： 打通数据（这个似乎更关键） 提供信息给业务端 【友情&amp;感情】 7分 老朋友邀约： 8月初约了之前的同事某蕊同学见面，因为对方比较忙都没有时间见上。虽然最后约了一次，见了面吃了饭，但是却有了不一样的感觉。 得知某蕊童鞋月薪还是可以的，但想一想如果当初自己并没有离开，这样的薪水并没有什么难的。所以，现在的自己必须要用更短的时间去达到。 想吃蟹肉煲，就约某菁一起去吃。未果。伤心中。两周之后某菁童鞋竟然说要请我吃饭，受宠若惊。因为她竟然还记得。在外滩吹风，然后去了南滨江听曲子。她说，一个人在一座呆久了，会变得神经质；她说，她迷茫，不知道下一步往哪里走，所以一直保持现状。她说，你是不是想要回去。我说并不是，只是单纯的发呆而已。 加入了新的羽毛球团队：1. 活动行上的伙伴；2. 公司羽毛球社； 活动行上的伙伴，一起运动后的第一周有约我一起打球，后面就完全没声音了。不过自己也并没有太主动去靠拢，因为有了其他的选择。 新伙伴邀约： 之前在一个活动中认识的小伙伴约我一起去看《上海书展》。本是愉快的开始，但过程与结果都很不好。想来，以后应该不会在有联系了。 感觉一直都是自己生活着，除了工作就是同事，运动也是一个人；感觉自己需要减压，迫切地需要在休息日见到其他人。一种孤单感越来越深，我开始明白为何有些人来到上海一年左右就想回家的那份感情。因为孤独。但是我不可以。逐步开始明白，为什么很多人想回家乡的城市工作，因为在上海这样的城市，大部分人注定是孤单的，一个人生活太久，往往就磨损了原本的意志。那是一种日积月累的孤独感，只会愈来愈深； 【亲情】 3分 偶尔想起来给家里人打电话。 【投资】 0分 【感恩回报】 6分 工作中感谢计童鞋的悉心安排，是一个很有责任心的伙伴。表示感谢，但有点慌乱；应该表现得更稳重一些； 【成功小事】 7分 游泳课结业，顺利学会了蛙泳，多了一项生存技能。 如果长期做某一项运动，一定要去了解他正确的运动方式。没有错误的运动，有的只是错误的运动方式。 【新的尝试】 7分 第一次去《上海书展》；原来规模这样大，原来里面都是各个出版社在卖书。 从基础开始学习 “羽毛球”，包括握拍、击球方式等等； 第一次绑羽毛球吸汗带，跟着网上的教程一步一步来，成功完成。（忘记拍照了） 第一次去了解跑步的正确姿势；（自己更注重正确、健康的运动方式） 【自我思索】 7分 关于征文比赛，看了排名第一的文章，瞬间就明白了评分标准；毕竟这个是内部期刊，所有的事情应该是考虑它的动因（即Why的部分），出题人为什么要办这个活动，她心中想要的文章应该是什么样的。很显然，一定是要结合公司的，排名第一文章的内容就是涉及公司的。所以，在面对一件事情的时候，先去思考对方行为背后的原因，一件事它存在的原因/目的； 对于恐惧，是本能的反应。在游泳过程中，以为自己还在浅水区，就去踩地面，殊不知自己已经在深水区；然后慌张的抱紧浮球；感觉自己要被吞噬了。其实，这都是因为太紧张。明明知道自己要冷静，才能安全地生存，知道但并不代表做到。所以，对于这样的事情，对于紧急状态下的反应，如果有经历过，练习过，是完全可以克服的。 所以，要多去尝试，多去体验不一样的事物。 如何才能在工作中体现自己的价值；一直在思考，一直在苦恼；希望工作上有所成就的感觉越来越强烈； 环境真的很重要；这一点自己应不止一次的认识到与体验到；在世博轴的大众书局里面写7月总结的自己，回想白天一整天颓废在宿舍的自己。天差地别； 数据分析，或者其他任何职位，你都必须足够了解业务；当前的工位离经理太远，下一次换位置一定要靠近经理，这样能获得更多的信息。 多花时间在工作上，在数字上；多去摆弄数据，也要了解前端业务；工作的时候就要把时间花在与工作相关的内容上；学习的话，自己去安排时间； 你一定要明白主次，学习很重要，但不是一味的没有针对性地学习。记得这样一段话，现阶段你要把时间花在与工作相关的学习上。通过文档归类与整理，你就能看出来当前自己的精力分配是怎么样的。 当下的生活，自己认为应该是围绕 [ 工作 + 学习 + 运动 ]，并且今后也应该要围绕这三者；唯有阅读与运动不可辜负。 对于与陌生人的交流，自己完全不会感到变扭。比如想打羽毛球，就会主动去加入一个陌生的团队。比如想学习游泳，学习羽毛球，会主动找陌生的伙伴一起学习，完全不会觉得奇怪与犹豫。 通过8月的总结，会发现自己最近并没有好的作息，也没有好好记录日志；定期回顾，是一个很好的习惯，会帮助你去思考过去，调整当前的自己，这样即使偏离了轨道，也能够尽早发现并把自己拉回来。 不时会遐想与咨询公司中那些高职业素养的同事办公的感觉；感觉自己也有点工作狂的倾向； 想要学羽毛球，先要学唱歌；发现回到了一个人，有更多的事情想做。想让自己变得更好。羽毛球是有助于颈椎，另一方面是易于运动；唱歌，是因为其实自己是一个很有感情的人，喜欢用歌声来表达，但却唱的不好。所以，要学习。 做了什么努力/改变，效果如何？ 学到的东西，如何付诸实践？ 后续任务： 做一份PPT使用手册，在每次制作之前都阅读一遍。 报班学习羽毛球 思维中强化Why的部分，用特定的时间来进行强化]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《练习的心态》_读书笔记]]></title>
      <url>%2F2017%2F08%2F23%2F%E3%80%8A%E7%BB%83%E4%B9%A0%E7%9A%84%E5%BF%83%E6%80%81%E3%80%8B_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《练习的心态》 - Thomas M. Sterner (托马斯 M. 斯特纳) 你不可能改变你不知道的东西； 给每个场景设定 “触发警示信号” 的场景；即当做XX的时候，出现XX情况的时候，触发警示信号，让自己去思考应该有的行为； 如果你知道自己正在做的任何事情，意味着涉及两个存在： 一个是正在做某件事情的那个你 ； ——这个是你的自我或个性 一个是正在了解或观察你做那件事的那个你 —— 观察者 你越是与静静的观察者更加密切地保持一致，你的主观判断便会越少；你开始真正地用一种客观的视角来观察你的内心独白 你不可能控制你甚至不知道的东西。意识一定是第一位的； 缺乏自我控制，不论你想实现什么样的目标，你都不会有真正的力量；如果你不知道自己每时每刻都在想些什么，那你便没有拉紧思维的缰绳，对自己前进的目标便没有了掌控的能力。 如果我们不将日常的思考过程分隔开来，便不能能优化那些过程中的任何一部分 当我们说某一件事是一个习惯时，就是说这是我们做某件事情的一种自然方式。我们从直觉上来做事，根本不必去想它。 在较短的时间内，有意识地反复做某件事，将使你培养新习惯； 通过 “扣动扳机” 的方法 来阻止旧习惯的势头； 给自己的每个场景设定触发警示信号的行为；当做XX的时候，跳出XX的想法； 所谓扳机，指的是一种帮助我们启动新习惯养成过程的设备；它类似于一声哨响或者一声钟鸣，当你恰好处在想用原来的方式行动时，向你发出警示信号； 扳机的功能时阻止你在某种局面下产生的情绪响应，并且将你带入当前这一刻，带入一种客观的姿态，以便你能控制自己的行为； 想象练习是很有效的一种方法； 在训练过程中，飞行教练把油门关死（通常情况下你是没有料到是因为你他将油门关死了）并且说：”动力没有了，你打算怎么做？“ 你打算做的事情，就是教练教你的程序，成为你自然而然的习惯的那些程序。 一位飞行教练曾告诉我，希望我每次登上飞机，首先思考一下 ”失去动力“ 的紧急情况的应对程序；她还教我，每次下飞机之前，也要再思考一遍； 我们对理想和完美的概念总是不断变化的。我们自己认为好的或坏的东西，不会一成不变； 如果你知道自己正在做的任何事情，意味着涉及两个存在： 一个是正在做某件事情的那个你 ； ——这个是你的自我或个性 一个是正在了解或观察你做那件事的那个你 —— 观察者 你越是与静静的观察者更加密切地保持一致，你的主观判断便会越少；你开始真正地用一种客观的视角来观察你的内心独白 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《信任论》_读书笔记]]></title>
      <url>%2F2017%2F08%2F20%2F%E3%80%8A%E4%BF%A1%E4%BB%BB%E8%AE%BA%E3%80%8B_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《信任论》_郑也夫 ；写于1999年 作者首先从定义上去解释 “信任”；接着描述信任的表现形式： “利他” ，然后进一步解释 “利他” (信任)产生与形成的原因、发展历程； (1) 人性 - 利己； 规范 - 利他；(2) 文化力量的加入 + 漫长的幼儿成长期 + 模仿；使得利他得以持续 信任始于亲族中，产生于领地上； 之后作者解释信任的重要功能：简化思想；并接着讨论它的社会功能、不同环境中的表现差异 最后单独讨论了两种信任系统：货币系统、专家系统； 货币系统的最终逻辑：市场社会；专家系统的最终逻辑：社会学历 两者共同开辟了陌生人的天地 信任的两种结构：人格信任、系统信任； 人格信任：对某个具体人物的信任，包括亲族、领地、同乡会的信任 系统信任：对匿名人组成的制度系统的信任 信任的特性：(1) 时间差与不对称性；(2) 不确定性； (3) 属于主观的意识 诺言与兑现之间存在无法跨越的时间差；承诺人与选择相信的人在信息上有着无法跨越的不对称性 未来本身有着不确定性 “三军可以夺帅，匹夫不可夺志。”对一些事，自己心中必须要有自己的态度，在事物的两极之间，否能坚定自己的意志。但这也取决于首先你对这件事情要有先验知觉。 均衡从来不是源于自我约束，而是靠着其他力量对某一势力的无限扩张的抵抗。 若要取得平衡，或者推动事物的发展，都可以从其他力量会采取的行动来进行思考，以此来促进均和或者推动行为的落地； 每个人、群体、民族、语言、想法都会在一定程度上的自我膨胀，这是生命体及其承载的一切事物的本性。 权利不可能自我约束的，对它的有效约束只能来自其他力量。 “合作的基础不是真正的信任，而是关系的持续性” 。在持续关系与合作之间还有一个环节——信任。即持续关系产生信任，信任导致了合作。 持续关系（即多次博弈）是合作，乃至一切复杂关系的基础 人类行为的动因：个人物质利益（个人取向） + 追求承认（他人与群体取向） 领地是产生和发展复杂而稳定社会关系的重要因素； 认识到基本上所有的制度都是简化复杂的机制； 语言、金钱、权利、权威、标签、声誉、考核、分数 信任（简化机制），是凭借过去进行简化的； 信任增加了不确定性的宽容，从而增加了人们行动的勇气和可能性 货币是一种媒介，而信任是这一媒介中的关键。 货币通过数量差别取代质量差异，抹去了任何事物的特殊性，以自己的度量为一切事物完成了换算；凭借着这种 “变质为量” 的本领，货币获得了一种其他事物都不具备的渗透力； 学历社会带来的不是 “机会的平等”，而是 “游戏规则的平等” ；这才是科举与现代教育制度的贡献；人类更热爱的是差异的刺激。平等并不是人们真正的目标，平等不过是反对成员间地位差距过大的策略和说辞；文明的进步其实只是努力保障失败者或位卑者的尊严 第一章 信任：溯源与定义 信任，名词；表达静态的属性，即可信任的；信任，动词，出发点是主体，即判断对方有信用与否 信任关系具有的性质： 时间差与不对称性。行动和兑现较之诺言和约定必然是滞后的。承诺与兑现之间存在着时间差，信任者与被信任者之间存在某种不对称性 不确定性。具备了确定性，就不存在风险与应对风险的这一特定方式了。 因为没有足够的客观依据，信任属于主观的倾向和愿望。 第二章 人的本性 描述了三种 “利他” 的类型 自然选择是这样进行的：某一种群内的成员们身上带有可遗传的不同变异特征，当选择压力出现的时候，种群内那些拥有有利于存活和繁殖的特征的个体的百分比将增长。 基因像程序一样决定了它的携带者的行为方式，并靠着急眼的传递和遗传的稳定性，将这一行为特征传递给下一代。 假设一个群体中有一些带有无条件利他基因的个体，利他行为会使得这些个体牺牲或减少自身生存和繁殖的机会，最后将直至消亡 但实际是仍然存在利他的行为 围绕利他行为存在的原因，有着三种解释：亲族选择、互惠、群体选择 亲族选择：即发生在亲族间的利他行为的自然选择作用 不求回报 如果他的利他行为减少了自己生存和繁衍的机会，但增加了他的同胞得到繁衍，那这种利他行为可以使得它们共同基因的增加，并因为这种基因的传递而使得亲族内的利他行为得以持续 互惠的利他行为：互惠性利他可能在长期交往过程中建立； 要求回报 实例：某只吸血蝙蝠没有吸到血又非常饥饿时，吸到血的蝙蝠会吐给它一点血，靠着互助，蝙蝠们克服了个体不时遇到的捕食失败 很多哺乳动物间互相舔毛，以清洁皮肤 群体选择利他：具有利他性的群体，因为内部的合作而比利己的种群获得更大的生物学上的利益，并因此更有肯能在竞争中生存和繁衍 要保持非血缘群体内部的利他性能够占据上风，需要引入另外一支力量：文化； 规范，是人们制定和共同遵守的行为准则。规范的主要内容：习俗 和 道德； 文化 与 本能的对峙； 道德的使命在于造就一种广泛的利他； 对于本性，人是利己的；归根到底是自私的行为倾向在我们的行为心态的遗传组成中占绝对优势。在人类以前的时代，自私行为是被自然选择极力选中的； 从自然选择（适者生存）的角度阐明了利己存在且不可否认的原因； 文化能在一定程度上重塑基因，并为人类设定行为模式，主要在于： “幼态持续” 为人类提供了独一无二的条件：漫长的幼年成长期 模仿，是这一过程中最重要的手段和力量 生物的复制功能是垂直进行的：以繁衍的形式传递给下一代 文化的复制功能不仅是垂直而且水平：可以在同代人之间复制 第三章 合作的进化 通过 “建立信用” 的方式来克服互惠行为的前提（多次合作） 互惠理论的前提：多次博弈；即 “关系的持续性” （囚徒困境：一次性博弈） “一报还一报” 的策略可以在一个由多种策略构成的多样性环境中获得成功； 首先保持善意对待每一个人 然后根据对方的行为，采取相同的措施 互惠的特点是以重复相遇为前提（即关系的持续性），相反在一次性遭遇时每每背叛；改善的一个办法是重视和建立信用。； 当”好合作、高质量” 的声誉建立和传播时，与你没有联系过的人也增加了对你的信任，与你合作的可能 “合作的基础不是真正的信任，而是关系的持续性” ，这是艾克斯罗德 强调的前提因素。但在持续关系与合作之间还有一个环节——信任。即持续关系产生信任，信任导致了合作。 第四章 理性与习俗 每个人、群体、民族、语言、想法都会在一定程度上的自我膨胀，这是生命体及其承载的一切事物的本性。均衡从来不是源于自我约束，而是靠着其他力量对某一势力的无限扩张的抵抗。 理性：是逻辑指引下的思考，它可以更广义地定义为问题的解决和批判的思考，但只有在强调了逻辑成分时，它才成其为有价值单独讨论的特定的思想方法。无理论知觉、想象、试错法这类活动有着怎样出色的成果，是被排除在理性之外的。——《国际社会科学百科全书》（1968） 人类行为的动因：个人物质利益 + 追求承认 个人物质利益：追求个人的物质享乐；个人取向的； 追求承认：个人的心力满足；他人和群体取向的； 信任不是理性；信任处在全知与无知之间。信任处在理性与非理性之间； 第五章 领地、亲族和共同体 领地：指同物种之间划分出的排外性的势力范围； 领地的重要性：(1)生存需要一定的空间；(2) 这个空间需要稳定的环境；对空间与稳定性的共同需求，导致了对领地的需求 领地提供了稳定的食物资源 领地提供了与配偶交配的场所 领地也是养育幼儿的场所 以领地为基础的社会结构在进化中有很大的优势：可望产生和发展复杂而稳定的社会关系； 领地为成员带来了识别性（外部 + 内部）；识别性是持续关系的基础，而持续关系（即多次博弈）是合作，乃至一切复杂关系的基础 人类很多的本领和规范是靠模仿，而不是单独个体的 “试错” 得到的；领地是模仿的必要条件 当一个领地中物种数量膨胀时，领地中的部分成员会一同移动到其他地域，建立新的领地；这促进了更大范围上的模仿，进而促使了文化的传播和交流 保卫不是领地行为的必要内容，排他才是关键；并且在漫长的进化过程中，灵长目动物基本上选择了回避，放弃了侵略。在面对领地冲突时，更多的是表现为仪式化的战斗，而不是生死的决斗； 边界帮助群体获得其有限性，领地提供了持续的关系，使成员们在其中相互识别，频发交往，进而获得信任，开始合作； 封建、帝国与资本是人类最伟大的三项制度创作。 封建制，帮助人类从血缘走向地缘 帝国，在相当程度上继承了封建制的遗产 资本，帮助人类超越天然的标志，从熟悉的人格关系走向陌生的非人格关系 第六章 信任对复杂的简化 “最优理论” vs. “满意理论” ；生物有足够的本领进行”寻求满意” 的适应，但他们并不 “寻求最优” 语言、金钱、权利、权威、标签、声誉、考核、分数，都是简化复杂的机制； 信任靠着超越可以得到的信息，概括出一中欧冠行为期待，以内心保证的安全感代替信息匮乏； 信任强化现有的认知，简化复杂的能力；强化与复杂的未来相对应的现在的状态 信任增加了不确定性的宽容，从而增加了人们行动的勇气和可能性 靠着简化复杂，信任打开了行动的可能性，没有信任这个行动是不可能和无吸引力的；因为只有在行动之后，可能的成果才会显现。信任为时间问题架了桥，它为成果做了预付； 信任（简化机制），凭借过去进行简化； 过去是确定和不变的；现在是有限和迟疑的；未来是复杂和未知的； 现在靠着与过去的联手，超越未来的不确定性在他们心理上造成的疑惑 第七章 信任与社会秩序 社会秩序的三个来源：强制、互惠、习俗 强制不需要互惠与习俗的帮助，独立就可以造就一种秩序；而互惠与习俗必须依靠国家机器的帮助，才能建议一种社会秩序； 国家机器对外承担着保卫国家领土主权的责任，对内要为经济与社会生活提供一般性的条件（法律、货币、社会福利等）；这些与社会秩序直接或间接相关的功能，都是国家之外的力量难于承担的； 群体间贸易的发明代表了进化中非常稀少的时刻，人类获得了超越动物的比较生态的优势；动物有群体内的分工，但没有一种动物利用了群体间的比较利益； 权利不可能自我约束的，对它的有效约束只能来自其他力量。在民主国家，并非国家机器不想扩张其权力，而是受到了全面的制约——司法、经济、新闻和公民一起抵制国家权力对它们领地的侵犯和干预； 第八章 早期城市化与民间社团 农村是熟人的社会；城市是陌生人的社会； 不同地域表现出来的不同形式：西方的行会；中国的同乡会； 第九章 秘密社会 例如：黑手党、青帮 秘密社会：与主流价值观对立，但不反政府；只寻求一个与主流文化不同的子系统，且这系统是隐蔽的； 秘密社会生存在征服管辖的大系统中，不逃脱在其之外，而是在其内建立自己的与主流价值观对立的小系统，在对立的同时谋求尊严并努力披上合法的外衣 在国家为社会提供充分的服务时，不存在黑社会，因为没有必要；在国家极度衰弱时，自救团体无非法可言，即使使用暴力。只有在两者共存时，才有了秘密社会，或曰 “黑社会” 的称谓；秘密社会产生于权力控制与满足社会需求的双重真空； 这也是辩证的看问题；从一个事物的对立面来看问题； 现象：黑手党对社会富有一定责任，维护一定的社会秩序； 据说在西西里，发生偷到时，如向警方报告，75%是无所作为，15%能找到最烦，只有10%能追回赃物； 若向黑手党调节，只有5%未获成功； 当然被盗人要拿出财产的 1/4 ~ 1/3供调解人 秘密社会中的信任程度高于主流社会，因此才能比社会大系统更强悍；子系统中的信任靠着4个因素来建立与强化 (1) 互利；内部的互利性必然要高于社会大系统；(2) 运行的效率要高于大社会人的保护效率；(3) 对背叛的惩罚极其严厉； (4)靠着仪式、传统、认同和惩罚，将一种特殊的价值系统内化在成员的心中 社会大系统的健全：正当需求可以得到满足，正义可以得到伸张；从这个意义上来说，亚文化是主流文化的某种指标，是主流社会的晴雨表； 第十章 货币与信任 货币是一种媒介，而信任是这一媒介中的关键。一旦失去信任，货币将失效；eg：当爆发战争的时候，若无法判断这一国家是否战败，此时对本国货币失去了信任，会大量购买他国货币/物品；因为一旦国家战败，它的货币是没有任何意义的；因为失去了信任，没有人会愿意为它支付物品； 货币的简化功能几乎是所有媒介中最出色的。货币通过数量差别取代质量差异，抹去了任何事物的特殊性，以自己的度量为一切事物完成了换算；凭借着这种 “变质为量” 的本领，货币获得了一种其他事物都不具备的渗透力； 货币为人们带来了自由；这种自由首先是货币占有者消费机会与可能性上的自由； 庄园领主过去可以向农奴征收一定数量的啤酒、家禽，从而将后者的行为限定在一定的范围内；但是，当他征收货币的那一刻起，农民的自由了。他们可以自己决定是养蜂、养牛，还是做其他的事情； 信任与借贷；借贷必须建立在信任的基础之上；这种信任的判断可以是任何事物：主观信任，其他简化机制的表现 抵押贷款，与信任无关；抵押消除了风险与不确定性，完全不需要借助信任。 一种反文明的观念：利息与有息借贷都是可恶的； 货币中的风险：货币自身、折射在货币上的社会病症、资本流动的 “马太效应” 货币自身：现代货币是人造物，在其数量上不受控制； 折射在货币上的社会病症：伪造货币者与政府；后者可能不正当地印制货币； 马太效应：当私人资本得以自由地越境流动以寻求最佳投资机会时，它们可能被导向依据国际标准最具生产率的领域； 马太福音中的寓言故事： 《新约·马太福音》中有这样一个故事。一个国王远行前，交给三个仆人每人一锭银子，吩咐他们：“你们去做生意，等我回来时，再来见我。”国王回来时，第一个仆人说：“主人，你交给我的一锭银子，我已赚了10锭。”于是国王奖励了他10座城邑。第二个仆人报告说：“主人，你给我的一锭银子，我已赚了5锭。”于是国王便奖励了他5座城邑。第三个仆人报告说：“主人，你给我的一锭银子，我一直包在手巾里存着，我怕丢失，一直没有拿出来。”于是,国王命令将第三个仆人的那锭银子赏给第一个仆人，并且说：“凡是少的，就连他所有的，也要夺过来。凡是多的，还要给他，叫他多多益善。” 第十一章 科举与学历（专家系统一） 科学决定了专家系统的性质。因为科学获得了大众的信任，所以在科学上学有专长的人是值得信任的；学历是此种信任的社会来源，是学有所长、高于常人的证据。同行评议是对每个专家的更准确和权威的评价，并往往以此决定他在这一系统中的地位。科学、学历、同行评议，三位一体，构成了专家系统的信任基础； 人类历史上有两种方式取代封建，建立开放的等级制：(1) 靠市场和货币；(2) 靠科举和文凭； 市场经济的社会中，货币占有的多寡很大程度上决定了人们的社会地位 以科举功名为人们的社会等级定位的机制 考试内容与效度；因为科举的目的是为了评判不同的水平，因此在考试内容上必然是有所倾向的； 八股文的题目出自四书（《大学》、《中庸》、《论语》、《孟子》），八股文在内容上要求 “代圣贤立言”，不允许表达个人的见解；然而从实质上看，考生们角逐的仍然是写作美文的技巧； 我们必须认识到，不是八股文败坏了科举，而是科举创造了八股文。这一悲剧的本质在于考试学的两难：有用的东西未必适合考试，适合考试的东西未必有用。在找不到适宜考试有用的知识时，考试会选择无用但能够评判的技巧； 科举制的建立视为了制约上下层人口比例的失调，但它的功能也仅仅是减缓社会生态失调的速度；当一个制度越来越多成为统计阶级成员晋升的障碍时，它必然会遭到统治阶级的破坏； 人口的增长必然导致考生数量的增加。在落第的比例本来已经越来越大的考生总数中，官宦子弟所占的比例也越来越高。他们最不愿忍受失败，又最有能力和社会关系去破坏规则；（舞弊、买卖官位） 社会生态学，即社会上层人口与下层人口的比例。 关于定额制（配额制），即在录取或录用时为不同的社会群体规定不同的额度； 宋朝司马光 “分路取人”（每十人取一人） Vs. 欧阳修”凭才取人”（唯才是举） 有一年某个考官主持下的北方考生全部落榜，惹起轩然大波，最后被处死 最后设立 “分地而取” 的方针；会式分南、北、中卷；每百名进士中，南取55人，北取35人，中取10人 在现代美国社会，也存在定额制 定额制照顾了弱势群体。在近现代的世界中，它总是与社会公正结合在一起；只有中国当代高考中的定额制是反其道而行，它公然照顾强势群体——大城市中的考生； 学历社会带来的不是 “机会的平等”，而是 “游戏规则的平等” ；这才是科举与现代教育制度的贡献；人类更热爱的是差异的刺激。平等并不是人们真正的目标，平等不过是反对成员间地位差距过大的策略和说辞；文明的进步其实只是努力保障失败者或位卑者的尊严 学历只是某些领域的入场券，”它只说明了最低限度的成就”，高限的成就要通过专家系统中同行的认可才能获得； 第十二章 同行评议与科学（专家系统二） 学历只是进入专家系统或科学共同体的必要条件之一；进入该系统后的学术地位取决于同行的评议； 政治的要害问题是产生领袖。在选民的眼中，竞争者的主要差异不是解决同一问题的理性能力高下，而是优先解决哪些问题的价值观上的区别； “提出一个问题比解决一个问题更重要，因为解决问题也许仅是数学上或实验上的技巧而已；而提出新的问题、新的理论，从新的角度去看旧的问题，却需要有创造性的想象力，而且标志着科学的进步。”——爱因斯坦 第十三章 走向杀熟之路 杀熟，指的是欺诈熟人 生物的世界中存在着两种竞争：种群之间的竞争、种群之内的竞争 种群之内的竞争更加残酷，因为同类间争夺的是同种资源（物质资源、异性资源）； 所有的社会动物都是 “社会地位的追求者”。两个动物在阶级次序中越接近，紧张度就越高； 异类间的竞争有时会转化为同类间的竞争，而同类间的竞争却很难转化为异类竞争 同类件的攻击是对环境的拥挤做出的反映，它会导致物种生存上的合理分布。但攻击需要适度，而非致命性的； 动物的攻击大多是仪式性的；强者的目的适宜威胁吓跑对手，弱者能认识到自己的处境，及时撤退； 当数量超过了自然的限度，空间变得极度紧张，彼此没有了退路，仪式性的攻击就会变成实质性的杀戮；水槽中的鱼类会以极快的速度杀死同类； 杀熟 - 传销；马克思你曾自白，他最可原谅的弱点是轻信。受骗不是大过，更非大恶；受骗只是传销骗局中一个次要的因素；更重要的因素是，受骗者迅速地转变为行骗人。难于退货的高额商品滞留在手中，会使传销信任们立即明白即受骗了。一个善良的人即使自己受骗了，却决不会转嫁他人，甚至会以自己的教训广告四周，骗局因此无法复制和繁衍；传销在中国泛滥的最重要原因是，大批受骗者为了挽回个人利益，如此轻易地越过道德的界限，踏上了杀熟的道路；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《代价论》_读书笔记]]></title>
      <url>%2F2017%2F08%2F13%2F%E3%80%8A%E4%BB%A3%E4%BB%B7%E8%AE%BA%E3%80%8B_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《代价论》_郑也夫；社会行为学；写于1995年 作者通过从事物的两个对立面进行分析与对比，帮助读者相对全面地进行认识； 警惕目的论；不要把事物的目的/结果去解释它的原因； 城市最伟大的价值在于它是人类对话的中心；对此，又该如何指导你的行为？在当前社会的网络中，你获得了对话的平台，那你有什么能拿来对话呢？ 冲突的存在是不可避免的；最有效的方式是将其公开化、明朗化、制度化；威胁到一个结构平衡的不是冲突本身，而是僵化。僵化使得敌对情绪积累，以致于一旦爆发只能走上一条分裂的道路。 如果是一位管理者，一定要认识到这一点； 认识到特殊主义存在的必然性；并且当一种信任关系失败时，另一种信任关系必然会出现。 真正的平等是不存在的，人们只能在几种不平等中选择。代价更小的是：在具备完全规则的竞争市场中带来的不平等。“ 真正 “ 的平等可以理解为 “ 机会的平等，公平的竞争。” 竞争的起点从来都是不平等的，大家从未站在同一起跑线上。 在踏上起跑线之前的一切它管不了，但在进入市场竞争后，规则是一视同仁的； 冲突是无法避免的，因为那是源自人的本性（大自然的物竞天择），伦理道德是抑制贪欲的最佳手段； 判定一种文化的上限（其发达程度）是看其多样性的丰富程度，判断其下线（满足社会生活的基本要求）是看其是否提供了起码的同一性和相似性； 从事物的两个对立面去看待与理解；eg：歧异 vs. 一致； 确定 vs. 概率 1. 社会行为中的代价 “ 代价 “ 是经济学中的一个核心概念；因为经济学的经典性原理是：人们在经济生活中以最小的 [代价] 谋求最大的利润。 作者从一般意义上讨论代价的理论：是否人类要为它的一切收获付出代价，是否人们的一切分工、合作、竞争中都包含着代价，该如何评社会行为中难于避免的代价？ 本书中的 “ 代价 “ 指的是以人的行动选择为前提的。 ​ 2. 理性、非理性与代价 “ 代价 “ ，必然与一种估算相关联，因而是理性的尺度。 马克思 • 韦伯 最早开始探讨人的行为中的理论与非理性。他把人的行为划分为四种基本类型： 目的取向的理性行为；如工程师造桥 价值取向的理性行为；如教徒为得救而祈祷 情感的行为；如父母责怪孩子 传统的行为； 只有承认目标可以是理性选择的，才能接受韦伯的第一种行为型；只有承认价值观也是理性，才能接受第二种行为型； 作者认为，不是理性，而是感情；是人们的价值观决定着行为的目标。 理性只是一种手段；目标是价值观决定的，而价值观并不是一种理性。判断一种行动是否是理性的，要看行动者是否以一种理性的手段追求他的目标。 情感的行为（如果父母责怪孩子）不是理性，在于它听任感情而不是依靠理性去选择手段。 传统的行为不是理性，因为手段是非自觉的、未经思考的 宗教的行为不是理性，因为从理性出发不可能选择教徒们所认定的赎罪手段 理性是逻辑指引下的思考，它可以更广义地定义为问题的解决和批判的思考，但只有在强调了逻辑成分时，它才成其为有价值单独讨论的特定的思想方法。 3. 决定论批判 决定论即宿命论 宿命论认为一切都是已定的； 虽然宗教多于宿命论有关，但并并不是多数宗教都持极端主义的宿命论。因为，宗教很多时刻并非要人们沉睡、隐秘，而是要他们行动，只不过它要以一种强悍的思想魅力u诱导他们，左右其动作，规定其行止。 哲学家用不同的方式解释世界，但问题在于改变世界。 4. 目的论批判 所谓目的论，就是以结果或目标来解释原因。“ 凡是存在的都是合理的 “ —— 黑格尔；这是最典型的目的论； 传统的观点认为分工的出现是为了创造更多的财富。（目的论；从目的推导原因）但分工的真实原因在于原始社会中人口密度的增大。竞争使一些人迁徙，但当无处可退的时候，就迫使人们改行，于是导致了分工。 我们要把事物的原因和功能区分开。要完全解释社会现象，功能是必定要解释的。但功能绝非事物存在的原因。 不赞同的是为无生命的事物提出一个它所追求的目标，把一事物形成后发挥的某种功能——很可能是其副产品——说成产生的原因，其存在的目的； 人的选择从来不是安全自由的；他达到目标的手段，甚至他为自己设定的目标，都要受到限制： 物质条件，包括生理条件、外部的生态条件和技术条件对他的限制 社会规范、社会价值观和其他观念对他的影响1. 对于人们今日的选择另一个限制就是他们过去的选择；定着它们的全部行为。动物的行为从不越轨，永无失误，这种机制以牺牲发展和变异换来了万事不变的稳定。而人类的命运就是不断选择，也一再失误，它以风险代价换得了发展与创新的机会。 根本上说，选择的自由是人与动物的分水岭；动物的生理机制规定着它们的全部行为。动物的行为从不越轨，永无失误，这种机制以牺牲发展和变异换来了万事不变的稳定。而人类的命运就是不断选择，也一再失误，它以风险代价换得了发展与创新的机会。 5. 合作与团体生活 几乎没有无代价的合作，几乎没有无内耗的团体生活。 关键在于收益是否大于成本； 初等物理学告诉我们，当两匹马拉车的时候，每匹马只能发挥自己力量的90%左右。这是因为套绳在于车的连接点上形成一个夹角，一部分力内耗了；若把两幅套绳平行地连接在车的两边，又因两匹马难以时时等速，不仅增加了车的摇晃，且增加了摩擦力；即两马拉车必然会做出一些无用的功。但人们很少用一匹马拉车。因为多匹马能完成一匹马无法单独完成的工作。因而这些是有意义的代价，是必须付出的代价。 内耗和代价是不可避免，但又值得计算的。 社会关系中，两人组合只是相互依赖，不服从一种超个人的团体意志。在这种关系中，每个人的投入最大，且两人的距离最近。三人组合带来了新的特征：一个人可能被多数否决。这是最简单的群体结构，它带来了群体对个人的压力。从两人到三人组合，意味着增加了伙伴，增加了协调的余地，但也削弱了个人的自由意志； 会议中，最佳的人数是不超过8人；人数较少，每个与会者都可能和可以扮演完整的角色：既是倾听者又是发言者。人数过多，有些人就会沦为单纯地倾听者； 当合作具有一定规模，变得常规化时，也就形成了团体生活。当团体生活复杂到包容了成员的全部生活，且有了严格的结构时，就构成了社会生活。 城市化是当代人类的发展趋势。关键在于城市是一个更大的交际场。它的膨胀为城市人带来了交通的负担和环境的污染，但它的浓缩又跨越了空间，把一个民族的杰出人物聚集在一起，从而减少了从一个村镇到另一个村镇的交通阻塞和信息隔绝。城市是人类对话的中心。 6. 竞争与否认冲突 冲突时一切团体生活、社会生活中内耗的根源之一。但冲突又是源自人的本性，是大自然的法则（物竞天择）在一切生物上的体现。 团体生活中的内耗不仅在于任何一种合作方式都必然会有其结构上的支出（例如两匹马拉车在力学上的损耗，城市的生活产生的交通问题），更在于团体生活中的竞争与冲突； 虽然竞争和冲突必然使人们付出代价，尽管社会可以通过手段去调节，但铲除它们是不可能的。冲突根植在人的本性中： 一方面只有通过合作，通过加入到另一个群体中才能存活，彻底地独自生活一步可能，因为文化手段早已取代个人独立生存的能力； 另一方面他又不可能对合作或团体中分配份额（权利、机会、物质利益等）的大小无动于衷 如果冲突是客观存在的，使它公开化、明朗化、制度化将是代价最小、收益最大的调节方式；在一个没有货不充分具备对冲突给予宽容及使之制度化的社会里，冲突总是趋向于负功能。威胁到一个结构平衡的不是冲突本身，而是僵化。僵化使得敌对情绪积累，以致于一旦爆发只能走上一条分裂的道路。 现代工业社会的进步在于，它使潜在的冲突明朗化、制度化，给予这种冲突一套调节机制，努力使社会组织中的冲突转化为积极意义上的社会变迁。 7. 特殊主义与普遍主义 共存。对立又非对立。 特殊主义：凭借与行为者之间的特殊关系而认定对象身上价值的至上性。 特殊主义标准，是只能应用于与自己有特殊关系的人们身上，不能普遍贯彻到一切人身上的原则。 普遍主义：独立于行为者与对象在身份上的特殊关系。 两者的区别：支配着人们彼此取向的标准是依赖还是不依赖存在于他们之间的特殊关系。 扩大化了的社会交换和社会生活在互换一种普遍主义的尺度和价值观。货币的出现，标志着人们迈出了严格封闭的特殊主义的小圈子；货币是普遍主义价值及其尺度的结晶。 特殊主义与普遍主义分别构成了两种 “ 信任结构 “。 信任是任何规模、任何种类的社会生活的前提。没有最基本的信任就没有社会，丧失掉一切信任就是社会的瓦解。特殊主义与普遍主义在信任结构上的基本差别是：范围的差别；前者是一个较小的信任结构，后者构成了一个相对更大的信任结构。 社会中一个信任系统越大，成员间的信任感越弱、越单一；一个信任系统越小，成员间的信任感越强烈、越全面。 两者之间会产生冲突，一方面特殊主义的信任结构是重交情，是人类群体赖以存在的重要条件之一；另一方面，这种品格的本质注定了它要超越规章的束缚，从而破坏人类社会同样赖以建立的一切制度化的秩序。并且这种冲突的深刻性在于两者谁也无法取代谁。 当一种信任关系失败时，另一种信任关系必然会出现。当金钱（一种力量）不能决定一种物品的购买权时，人际关系上的优势（另一种力量）必将出场。 特殊主义是唯一能取代和补充普遍主义的控制系统。两者之间未必总是对立的，它们的关系远非简单的二分法； 信任系统的扩散，依赖于三个条件： 内部专业化所驱动的向外扩大交换与交流的趋势 一种提供认同感的意识形态 标准与操作手段 8. 经济平等之妄想 完全的平等是不可能的；平等并不能促进发展； 完全的平等是不可能的。 按需分配不可能实现；因为按需分配首先并不是平等，它超越了平等的范畴。 按劳分配也是存在问题的。客观的按劳分配是不存在的，企图按照这一原则去追求平等是不可能的。 “ 劳 “ 是难以度量的；分配所依据的劳动之多少是需要与其社会效益相联系的，但是效率的标准却难以建立。 一个经典的例子是 “ 如果一个钉子工厂的水平评定是根据数量，厂家就会去生产小钉子；如果以质量为准绳，生产就会转向大钉子 “ 体力劳动 vs. 脑力劳动。二者之间比值如何，没有一个客观的依据。在实践中只能凭借市场上的供求关系去决定，不然就是人为主观裁定。 贯彻收入上的平等也是不可行的；即使收入上平等了，但在购买产品/服务的时候却会出现不平等的现象。比如早起的人抢购到产品，稀缺的东西价格更高；平等分配的原则只不过把竞争从生产领域赶到消费领域； 完全的平等是不可取的，它不能促进发展 收入上的平等刺激不了劳动者的积极性，因为它违背了人的本性。 等价交换刺激不了劳动积极性，因而也不是可取的。我们常常认为是等价交换，但实际发生的是不等价交换。 这里的不等价交换，并不是说巧取豪夺多。因为交换本身就带有自愿的内涵。 商人们总是努力在 “ 不平等交换 “ 中占据有利的位置。 一个商人辛苦地把茶叶从农夫运到牧区，是为了卖出好价钱；如果他的所得遵从按劳分配的原则，那他能获取的应该只有本地茶叶的价格 + 运费。 平等分配的批判者认为平等的分配压制和剥夺了强者与能人，并非公正；公正的真正基础是机会的平等，公平的竞争。 但是竞争的起点从来都是不平等的，大家从未站在同一起跑线； 在社会实践的选择中我们只能以代价大小为标准。显然以强调机会平等、公平竞争的思想比强调分配平等的思想付出的代价更小，获得的收益更大。 最终意义上：平等是不存在的。人们只能在几种不平等中选择： 特权身份带来的不平等 具备完备规则的市场竞争带来的不平等； 后者甚至难于避免地带着前者的 “ 胎记 “，比如家庭教育、遗产继承都限定了竞争的公平性。 但两者毕竟有本质的差别：后者把特权从个人权利的意义上铲除了。在踏上起跑线之前的一切它管不了，但在进入市场竞争后，规则是一视同仁的； 9. 男女平等之困惑 平等是权利，而非结果。 男女不平等有两种类型：母系社会 和 父系社会； 虽然有人对是否存在过母系社会表示怀疑，但可以确定的是有过一个不知道父亲的时代； 妇女的统治是建立在这样的基础之上，因此当群婚结束后父亲出现，母系社会遍终结了。 父系社会是因为人类社会固有的竞争性与掠夺性选择了男性占据统治地位； 在人类史中，基本的权利资源不外乎三种：暴力、金钱、知识；在早期历史中，暴力占据支配地位，而男子更有力量。 随着历史的发展，在权利争夺的与社会生产中，力量的作用渐渐让位于智力与知识；结果是男子在两性中的优势渐渐失去，女子的劣势渐渐好转。 这种逆转发生在机器取代了体力的伟大工业革命之后。妇女解放的宣言奏响于18世纪末的法国大革命，妇女解放的大潮在19、20世纪，这都是 “权利的转移” 与 “生产力的转移” 所酿成的。 在权利基础与生产力基础变更之前，父权制度是无可谴责的，它是群体内外残酷竞争的必然结果，是减少内耗增加效率的合作结构。 古代的中国社会建立了最完备的父权制，现代的中国在智力与知识对权利与生产的决定作用上，在社会物质物质上远落后于发达国家时，然而我们的妇女解放、男女平等却走在了世界的最前列：城市中男女拥有一致的就业机会，获取同样的工资；农村中的男女获取同样的分工，等等；这种超前的、动用行政力量造就的妇女解放的直接后果是使得家庭关系紊乱。 我们的妇女解放运动仅仅将妇女推上了社会，却没有未她们提供家庭中的角色模式；家务该谁来做？中国人失去了社会文化的引导，只好听凭当事者去摸索、选择、碰撞与磕打。于是家庭矛盾丛生，角色冲突千奇百怪； ​ 即使打破了旧的性别模式，在新型的社会生产与生活的关系中，通过40余年的实践，却仍然没有找到新的性别分工；究其原因，在于一种强大的政治力量，通过扶助弱者压制强者，干扰破坏着家庭中强者与弱者的正常分工。 甚至使得弱者误以为自己不弱，强者丧失了应有的信心。 在一个正常的社会分配系统中，在体力依然成为生产力基础之组成部分的国情中，一个男子应该能比女子在生产中做出更大的贡献，但我们的分配系统贯彻着 “ 同工同酬 “ 的平均主义原则。当一个男子拿着同样多的工资回到家中时，他失去了往日的尊严。又因为他的体力毕竟由于他的妻子，便只好比工资不少于他的妻子干更多的家务。在一个不受行政力量干扰的分配体系中，强悍的男子外出挣更多的钱，弱小的女子守家做更多的家务。是社会主义对妇女的恩赐，使得中国男子看不到自己的力量，扎进家务中，日益女性化； 美国学者吉尔德对国家福利所做的批判是富有启示意义的：婚姻的解体并不是因为规章决定，而是因为福利水平破坏了父亲在家庭中所起的主要作用和所处的权威地位。 这种政治推动的妇女解放，也使得中国失去了自己的女性。在近40年的妇女解放运动中，女子从来没有认识到自己的独立价值是什么，相反她只是一味地跟从政治的引导，以男性的指标作为自己解放的标志：做女拖拉机手、女飞行员、女勘探队员。似乎完成了这些便是妇女解放的获得，实际上恰恰是这一过程中，男子的价值与特征被前所未有地席卷。”解放” 变成男人，这真实绝大的讽刺。 正是因为这一解放运动是扶持弱者、抑制强者为手段的，它把男子赶进了家务，把女子推向了社会，它使强者不敢相信自己的力量，弱者误以为自己不弱，从而破坏了社会的基本分工，瓦解了社会的效率； 真正的妇女解放不应于干扰市场中自由公平的交换，而恰恰应建立在这种公平交换的基础之上； 因此经历过社会主义的妇女解放，又收到市场挫折的中国妇女将是痛苦看到一代； 因为妇女要生儿育女的生理特征将在一定时间内影响她们从事社会性工作，也因为社会上劳动力的过剩，任何一个国家中都有相当数量的女子或终生或一段时间内做家庭主妇；这本是正常的； 但中国妇女回到家中尤为困难，原因是她们见过了广阔的天地，要她们回到室内格外困难。 父权社会的最大收益在于为性别角色提供了一种模式，使他们免于陷入个体选择的困惑与冲突中，为社会提供了一种分工合作的秩序，使之免于混乱，得到一定的效率；而它最大的代价是压抑个性，不允许一个出类拔萃的女子超越社会对性别角色的规定，从而极大地浪费着女性的才能。 “男女平等” 时期的最大收益是它普及了一种观念：女子拥有与男子同样的权利，从而为女子发展潜能提供了机会。 但它迅速地走向极端，变追求机会平等为完全的平等，以致于造成一种新型的、更为荒诞的不平等：弱者对于强者的剥夺； 真正意义上的妇女解放，应该是认识到平等是权利，而不是结果。女子有权利就学、择业、从商、参政，但能否得到某一职位却是公平竞争的结果，而非社会的恩赐；社会竞争的原则应该是一视同仁，不安地有任何意识形态上的偏见。它对女子的态度应该是：上不封顶，下不保底；即一个成功的女子可能成为学者、教授、主席，社会绝不进行人为的压制，同时也绝不进行人为的扶持，保证她获得某种社会职业； 10. 伦理的诸种得失 冲突时一切团体生活、社会生活中内耗的根源之一。但冲突又是源自人的本性，是大自然的法则（物竞天择）在一切生物上的体现。要使团体生活成为可能，必须借助种种手段抑制贪欲以缓和冲突，伦理道德正是克服贪欲的最佳手段。 “ 道德是个人利益冲突的产物…… 如果人们在生活中毫无冲突，也就不需要任何道德规范了。 “ —— 梯利 欲望是一切生物的本能。并且一切动物的贪欲都是有限的，其生理条件为其贪欲设下了天然的限定：它在饱暖之后自然心满意足；但人类则不然，它所创造出的不会腐烂可以贮藏的身外财富，使它突破了生理机制对欲望的限定，从而在贪欲上超越了一切生物。 在伦理的重压之下，人类不仅可能失去生气，而且可能会扭曲个人；弗洛伊德认为超我（即社会道德）与本我（即人的本性）的剧烈冲突和失调是精神病发作的最主要原因。 道德不应该成为 [一切] 社会行为的尺度。在职务任用时，道德不应该成为唯一标准； 11. 标准之缺憾 一个健全的标准保证的是更大概率上的合理； 过往的一些标准： 王位继承：它限制了选择的范围，不问强弱如何，长子上位；但如果选择王位择优制，那王子们从年幼开始就将明争暗斗；它说明了在古代，社会的安定常常牺牲择优和效率去换得 普选权：普选权的标准是人数，它赋予了每个成年人这种权利。它有很大的进步，优势在于它们明确，它们客观，因而不易被滥用；但也有不足之处 普选权是无偿获得的，又是人人具有的，因此很多选民并不珍惜它；这点上就比较容易受到控制； 选民的教育程度、信息掌握都参差不同；一位深思熟虑的思想家的赞成票会被一位轻率的文盲的否定票抵消掉 普选权以智力意义上的公平（即智者应该有更大一些的权利）为代价，换得了人格意义上的平等 两者都在标准的选择上陷入了困境，都找不到一个合适的人为标准； 普选权找到的是人头加一定的年龄，收获是：它有效阻挡了少数权利者对他人权利的剥夺；代价是：少数杰出人物的意见也能被选民中的多数庸人所击败 体力劳动 vs. 脑力劳动：市场为脑力劳动报酬提供了一个更广泛的操作标准；市场的本质就是大众口味，市场上大众口味支配着一切； 考试：考试只能保证较大概率上的成功； 12. 分工与专业化 分工的缘由是相互交换； 专业化带来的困难：在各自的范围内形成了一种天然的屏障。这种专业屏障造成了不幸的后果。我们的知识是在相对孤立的情况下向纵深发展，而不是一面纵向发展，一面又横向沟通。我们正在得到的不是一幅紧密相连的完整画面，而是许多碎片——细部异常清晰，整体却支离破碎； T 字型学习 仍然是一个重要的发展方向；跨界的作用越来越大； 一个既拥有广博知识又有专长的社会才是健全的社会；要做到这一点，只有在中高等教育中更重视通才的培养。一个人迟早必然会进入专业化的过程，在此之前应给予他更丰富的文化营养； 13. 完善与停滞 完善仅指适应程度； 互训：人类爱征服某样地区/物种的时候，同时也在被它所征服；游牧民族为了在各种不同季节里为他的家畜在草原植被中寻找生活资料，他自己的生活和行为必须准确地按时间表行动； 任何一种过度的适应都要付出沉重的代价；一个物种在既定的进化等级中越是专化和适应，它走向更高等级的趋势就越小； 14. 传统与反传统 传统 $\ne$ 传统主义 “不立不破” 远比 “不破不立” 更有道理；新旧事物应在共存和比较中接受选择，不可以死凭借打击对方来抬高自己； 15. 歧异与一致 人类容纳了自它诞生以来的体制与文化上生长出和积累下的巨大歧异，但仍牢固地保持为同一物种； 语言如此重要，是因为它解释超越了动物生理机制的人的机制的密码； 语言造成歧异的三种原因： 信息传递中的”噪音”；在信息传递过程中，必然会有遗漏、衰减、歪曲某些信息 语言的编码过程；语言（代码）是静态的，现实是动态的；代码是有限的，现实是无限的；代码是抽象的，现实是具体的； 语言的解码过程，即信息接受者对语言的理解； 每个人都占据着一个他人都无法取代或完全重合的理解视野。 我是以第一人称来经历各种事件这件事，是没有任何人能够替代的； 文明的问答不在于它拒绝反而容纳着多样的异质，并能沟通它们，养育它们； 判定一种文化的上限（其发达程度）是看其多样性的丰富程度，判断其下线（满足社会生活的基本要求）是看其是否提供了起码的同一性和相似性； 没有一种文明不致力于谋求基本的一致性，那是便利地生活在一个社会中的基本保障； 市场范围内的一切活动都以金钱尺度来衡量，商品和服务通过标价变得可比了；市场价值的这种扩张性不仅说明了市场的功劳，同时也暴露了它对其他社会领域的威胁，它可能毁掉市场价值之外的所有其他价值——知识、艺术、友情、尊严。正是为了抵御市场价值的泛滥，人们强行或人为规定了一些不可买卖或不受顾客左右的标准。比如个人的权利，运动奖牌，学术荣誉； 16. 顺境与逆境 凡仕宦之家，由俭入奢易，由奢入俭难； 处在顺境和优越条件下的人们往往要为此付出代价，客观的看他们缺少的是适当的压力； 17.风险与保障 风险（个体） Vs. 保障（群体） 风险，是与选择对应的，它意指选择的某种结果的不确定性；如果当事人丧失了选择权，它的行为或被自身的生理本能，或为外部强制力量所决定，其结局如何多称不上风险，而应视为”注定”。 正是因为这个原因，我们很少说动物的行为包含风险； 信息的不完备为决策带来了风险； 棋、牌、人生代表了三种决策方式： 棋，是 “全备信息” 的决策，其 “风险” 只在于一步步对弈构成的 “选择之树” 过于复杂，因智力和时间的限制，存在着失误的决策； 牌，是 “概率信息” 的决策，它呈现出若干信息，但并不完备，只能对不完备的部分作出概率判断，这种判定构成了牌戏决策的基础； 生活中的事物除了包括类似的棋牌行为，还有一些更模糊的事情，以致于连概率都找不到 保险不同于回避风险，它的本质是风险转移；保险业把众人联系在一起，共同承担偶然事件造成的损失。从最广义的保险意义上说，转移风险的可能性允许个人从事冒险活动。 18. 乌托邦——否定代价之代价 乌托邦：可以指任何被渴望不切实际的、不可能实现的想法或方案，它被认为是虚妄的、不合理性的期待，对现存状况的激烈背离；它可以意指很多不同的事物，但当我们说到乌托邦时，是指关于一个完美社会的图景。 乌托邦是不存在的，但同时它给予了人类新的思维角度 蒂里希(Paul Tilich)揭示出乌托邦思想忽视了人类有限性的弱点：乌托邦的根本弱点在于它预先假设了一个虚假的人的形象； 乌托邦思想丰富了人类对自己可能性和潜在力的认识； 人是具有可能性的存在物； 逻辑矛盾 Vs. 辩证矛盾 逻辑矛盾：同一思维（主体）过程中对两个互相矛盾的命题或判断，同时肯定它们都是真的；即自相矛盾；eg ：我认为万事万物都是有矛盾的；但我认为我们班上没有矛盾； 辩证矛盾：客观事物中，事物自身所包含的既对立又统一的关系；它是现实的矛盾，存在于自然界和社会的一切事物和现象以及人的思维中； 19. 代价的界定与比较 人类的一切行为在为他带来收益的同时，也使他付出代价（代价是对收获而言） 代价的大小不仅要比较支出、浪费或牺牲掉的东西的多少，还要甚至更要比较付出了这些代价后收获的大小；令人惋惜的倒不在于浪费的数量的很大，而在于这些浪费的进步意义太少了； 20. 中庸与极 人们在面临的诸多选择之中（合作与竞争、平等与效益、特殊主义与普遍主义、风险与保障），没有一种选择能够最大限度地帮助我们减少代价；最理想的是中庸之途； 中道，是过度和不及的居间者； 如果中庸的理想最终蜕变为宣扬一种单是一的思想和主张，其结果必然是使社会趋向单一，这不仅是中庸的悲剧，也将是中庸的覆灭； 必须理解中庸所依赖的两极间必要的张力。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[个人日志_2017年7月总结]]></title>
      <url>%2F2017%2F08%2F05%2F%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97_2017%E5%B9%B47%E6%9C%88%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[7月总结 你若不努力，拿什么谈未来。 【运动&amp;健康】 6分 对于新年目标的达成情况：有约3周的时间早睡早起，还是不错的战绩。 做晨间日志 早睡早起 晚睡早起 23天 9天 14天 ​ 7月的上半个月基本都是晚睡早起，很明显的两极分化； 游泳这件事，终于能够成功离岸。迈出了新的一步； 壮丽的完成一个月2次中暑的壮举；之前好几天嘴巴就一直很苦涩，能感觉到自己的身体有异样，但并没有将其联想到疾病； 第一次是因为身体原因 第二次是因为自己在大热天晚上跑步，一周跑了三次，然后就很难受； 看着自己的肚子感觉变大了，体重稳稳地上120。 对自己的身体更好一点。7月，每周末去一次超市，买下周的早餐 + 水果；吃水果的频率比以前高了很多。 【生活&amp;娱乐】 7分 一个月在迪卡侬买了8双鞋子，花费100大洋；罪过呀。更让我失望的是还没有买到自己想要的款式。 傍晚的时候去外滩吹吹风。自己心烦的时候，就会去东外滩吹风，发着呆，也不知道干什么。 看一看自己的鞋子已经变得很旧了，但依然在穿。新买的袜子也因此被弄脏了。对于自己的服饰有新的思考：不要求高档次，但一定要保证品质。并且尝试去遵循 “ 一进一出 “ 的原则来管理自己的物品； 尝试在公司学习；就学习环境而言，的确是一个既安静又能够促使自己学习的好地方；但不免会有一些 “压抑”； 花了点时间写了一篇关于 “ 变化 “ 的文章。《张开双臂，拥抱她》 认识到 “ 找到适合自己的减压方式 “ 这一重要性。去搜寻减压的方式，并形成适合自己的方式。 偶然接触到众筹电影《摇摇晃晃的人间》，讲的是一位身体残疾的女诗人 - 余佘华，努力掌握自己人生的故事。从影片中感受到余秀华的坦荡；对于自己的情况，毫不避讳地诉说，我不是一个幸福的女人。因为坦诚，所以强大；坦诚的态度触动到了我，这将影响自己的生活方式与交友方式；做一个坦诚的人。 对于自己不喜欢的事情，大胆说出来，让他们知道。不要害怕，不要以为这样你就不对。这才是你真正坦诚生活的样子。 生活上的好习惯，重新梳理与记录，写入Anki回想； 其实，生活很无聊。运动的时候想找个小伙伴，都没有人。 《战狼2》，一人观影；并没有太多的感触，就是静静地看着； 【阅读&amp;学习】 10分 对于咨询，依然有着一份特殊的感情；爱它的工作方式，爱它的工作环境，爱它的一切；只是，自己并没有幸运到能够进入到这样的一个行业之中；但每次阅读到关于咨询的文章，都会有一种热血澎湃的感情在心中涌现；从大学第一次接触到咨询，接触到麦肯锡，到现在6年多过去了，依然会抑制不住的激动；也因为在偶然间阅读到咨询的文章，让自己在这一个月去学习与回顾咨询精英的优秀的工作习惯，让自己也能够变成那样子。 《麦肯锡方法》- Ethan M. Rasiel (艾森.拉塞尔)，内容是不错，但很多观点具体怎么知道操作却没有讲。 对于 “ 工作习惯 “类的书籍《麦肯锡精英的48个工作习惯》 - 卢塚隆将、《麦肯锡精英的39个工作习惯》 - 大岛祥誉，读完之后把好的内容摘抄下来；《麦肯锡精英的48个工作习惯》_摘抄 、《麦肯锡精英的39个工作习惯》_摘抄 对于构建自我的思维方式这件事，一直没有停歇；无论是之前在咨询公司，还是之后在互联网公司，自己都努力去构筑属于自己的思维方式；虽然有形成书面的指导文件，但问题还是之后的练习与固化。 对于 “ 表达呈现 “， 通过重新阅读《金字塔原理》并将其进行梳理后，形成《思维的组织与表达》，并利用Anki这一非常好用的工具进行回想； 重新回顾《地头力》；很多内容都忘记了，也没有去实践。阅读的目的在于改变行为；只有输入，没有输出，最后输入的知识也只是在你脑中走一遍而已，最后也会离开。 认识到 “假设” 的重要性，但对于如何进行假设仍然没有思路。 《刻意练习》 - Anders Ericsson (安德斯.艾利克森)，对于学习需要进行刻意的练习这一概念的提出，是一个很重要的认识。这本书的全部价值，应该就只在于进行刻意练习所要遵从的几个要求；并不建议仔细阅读；对于如何开展的方法，倒可以仔细思考；《刻意练习》_读书笔记 翻阅《练习的心态》，提到 “ 你不可能改变你不知道的事情 “。即如果你无法掌握当下自己的思维，那你就不可能改变它。这一点，对于改变自己的思维模式与行为方式很重要； 图像的认识； 了解Windows元件，是一种矢量图的图片格式；认识到粘贴的时候采取 “选择性粘贴 - Windows元件”； 把图片复制到PPT时，尝试选中带图片的文本框 （新建空白页面时自带的那个文本框），然后在复制 重新更正文件的命名格式。了解 “文件名命名法” 、 “下划线与连接符” 的使用。《文件名命名规范》 梳理《工作思索》，把启发与感悟写下来，关键是要转化为可落实的行为。 《你好，费曼先生》 - Fenyman，以两部分来讲述费曼的一生。内容并不有趣也不深刻，唯一让我启发的句子也还是从其他书上看到的：问题的目的在于探究 “ X究竟是什么？ “ 这件事本身，而答案是用什么方式找出来的并不重要。 开始阅读《货币金融学》 - 弗雷德里克.米什金 【工作】 7分 重新开始写工作日志；6月份由于没有太多工作，并把精力放在考证与学习上，基本没有什么也写的内容也就停下来了。 对于表达呈现有了新的思考；当下的工作环境，最终呈现的最佳工具是PPT，而对PPT来说最好的图表是其自带的Office图表；而与之匹配的是Excel，而不是R的ggplot2或者Python的matplotlib。并且图形的表现原则是：尽量简单，一个图表只表达一个意思；图表在于 “ 富有思想 “ ，而不是复杂化；理解到编程语言工具的作图的应用场景：(1)面对大量数据作图；(2)复杂的图形；这两个对于制作图表很有用，但对于如何最到最佳的表现形式这一点上，关键在于你要表达的内容与你的逻辑思考能力，把复杂的信息简单化，只有你能够真正抓住重点，需要把它表达出来的工具，Excel的作图足够了。反向思考，如果你不能用Excel的图形表达出来，必须要借助复杂的图形来表单，80%的情况是你自己并没有抓住重点，也没有明白自己要表达什么。当然剩下的20%就的的确确是要用复杂的图形来表示； 原本想用Python调用R的ggplot2包，浪费了很多时间在学习Rpy2 之后因为思想上的转变，放弃了上述想法，转而只学习Python包里面的作图工作ggplot包 最后放弃Python转而继续使用R来进行数据分析（理由：R能让你专注于数据本身，以及对数据分析所需知识的学习；这个对当前的自己来说比编程更加重要） 制作业务数据图表，每天早上进行查看。高管们每天都在了解的内容，你更应该去了解。花了很多时间在编写代码，联接到Excel进行自动更新上；我知道这虽然对于当下自己的工作并不会有太多的意义，但我也知道在长久的过程中会是一个很重要的信息。 数据处理上的反思： 能在SQL中完成的数据调整，一定要在SQL中完成，不要带到Excle这种图形化软件中；例如，对格数据格式的调整 学习到Excel透视表可以直接构建环比、差值 （新技能） 对于数据分析，关键是要去分析和理解现象变化背后的原因，而不仅仅是了解变化的结果。 信息并不是越多越好，而是经过筛选后，给到的信息恰巧能够解决对方的问题。（朱琳面对同一个需求，给出的答案就只是交易盈亏） 数据分析最开始要了解的两个内容：(1)数据是如何采集的；(2)数据是如何更新的； 【友情】 6分 与2位老朋友联系； 李童鞋发微信说这周在上海，约她一起吃饭；只可惜她太忙碌，最后没有见面。 打电话给郭哥，聊聊近况，并无其他； 邀约2位新朋友，均未果 约朱童鞋出来游泳与打球，都没有成功；后来得知他周末常常回家，在江苏的家； 周末约周童鞋一起出来玩耍，未果；因为她侄子的到来，所以要陪着她一起玩耍； 杨童鞋去北京学习瑜伽，去追寻她想要的样子；加油。 对于自我袒露，已经做得比以前好多了。基本上，自己的行踪同事们都是知道的。那下一步应该是去关心自己同事/朋友的行踪。构建联系。 梳理对待友情的正确方式，写下来，常回想； 【亲情】 6分 给家里买纸巾，跟老妈聊天；原来老妈已经到享受养老保险的年龄； 老妈跟我提起说下半年回宁波；这个让我很无语，也再一次跟她阐明自己的立场； 【投资】6分 完成公积金租房提取；在浦东的住房公积金中心办理，非常方便；这要感谢知乎中的小伙伴； 【感恩回报】&amp;【成功小事】 在这两方面，自己都没有记录；或者说没有感悟。 【自我思索】9分 把要做的事，要养成的习惯记录下来，时常回顾； 7月初的时候，有种很孤单的感觉。所以，你一定不能辜负来上海的自己。 过去的7月，一直很焦虑；应该说一直以来都很焦虑，因为不知道自己的价值在哪里；在当前这份工作中，自己偏离业务太远，自己的工作似乎并没有提现太多的价值；这样的自己，不过是芸芸众生中的一颗小螺丝钉，而且是替代性很高的小螺丝钉；这个庞大的机器并不会因为你这个小螺丝钉的缺失而运转不良； 所谓大数据，所谓大数据分析，那是建立在编程的基础之上，专注于工程的岗位。而现在的工作与此并没有太多关联；更关键的是，我对自己的定位不是一个程序员，不是做一个编程的人，而是注重逻辑思维的人；如此想来，自己的核心价值在哪里，有什么是我擅长的；试着思考，但并没有明确的一点。 当下，最关键的是要把思维方式固化下来；使之成为自然地思考方式与行为习惯，这个是当务之急； 对于表达呈现，一定要刻意练习。不仅在书面表达中，而且在口头表达中； 在口头表达的时候，没有运用 “金字塔结构”。今天跟华哥表述期货数据使用时，并没有。 加强对于个性塑造的回想，把期望的自己写入到Anki中时长回想；需要加强的方面： 稳重：问别人问题之前自己要先思考；不要总是说你觉得怎么样；说话慢一点，再慢一点； 自信：说话的时候要直视对方，要看着对方； 要做一个真诚的人；保持善良、真诚待人、时常挂念； 重新对比各个信息平台（简书、博客、知乎、微信、头条），其实大可不必如果费心，在多平台上都发布文章，这个是众所周知的事情； 写笔记时，要先对文章进行概括性的描述。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R_日期处理_lubridate]]></title>
      <url>%2F2017%2F07%2F31%2FR_%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86_lubridate%2F</url>
      <content type="text"><![CDATA[R_日期处理_lubridate 基本概念时间概念UTC：（英文“Coordinated Universal Time”／法文“Temps Universel Coordonné”），协调世界时，又称世界标准时间或世界协调时间 最主要的世界时间标准，其以 [原子时] 秒长为基础，在时刻上尽量接近于格林尼治标准时间。 协调世界时把时间分为天、小时、分钟和秒 格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台当地的标准时间，因为本初子午线被定义为通过那里的经线。 理论上来说，格林尼治标准时间的正午是指当太阳横穿格林尼治子午线时（也就是在格林尼治上空最高点时）的时间。但由于地球在它的椭圆轨道里的运动速度不均匀，这个时刻可能与实际的太阳时有误差，最大误差达16分钟。原因在于地球每天的自转是有些不规则的，而且正在缓慢减速，因此格林尼治时间基于天文观测本身的缺陷，已经不再被作为标准时间使用。 现在的标准时间，是由 [原子钟] 报时的协调世界时（UTC）来决定。 R语言中的时间R语言的基础包中提供了两种类型的时间数据 Date类型，仅包括日期数据，它不包括时间和时区信息 POSIXct / POSIXlt 类型，其中包括了日期、时间和时区信息。 日期-时间=不可运算 默认情况下，日期是以/或者-进行分隔，而时间则以:进行分隔； POSIXct / POSIXlt / strptime 的区别 POSXIct ：它存储自UNIX纪元(+其他数据)以来的秒数 ；用数字表示，一个较大的整数，可以存储到数据框中 POSIXlt ：日期时间类，精确到秒，用列表表示，可以更精确地存储日/月/年/小时/分钟/秒等 函数运行 - POSIXlt strptime ：字符向量(各种格式)直接转换为POSIXlt格式的函数 as.POSIXlt：将各种数据类型转换为POSIXlt。 函数运行 - POSIXct as.POSIXct：将各种数据类型转换为POSIXct。 它首先运行strptime，然后从POSIXlt到POSIXct的转换 parse_date_time：将各种类型的数据转为为POSIXct lubridate包主要有两类函数： 处理时点数据（time instants） 处理时段数据（time spans） 时点类 解析与提取日期 - Prasing 解析日期， year(x) 设定日期，通过赋值进行设定 year(x) &lt;- value 解析日期 + 排列 ymd(“…”, tz=NULL) / dmy() / mdy() ：处理不同顺序的日期数据，使之按年月日的形式排列 dym() / ydm() tz = NULL； 或为 指定的时区 locale = Sys.getlocale(“LC_TIME”) ：默认； 123456789# 处理日期，使之按年月日的形式排列&gt; mdy("06-04-2011")[1] "2011-06-04"&gt; dmy("04/06/2011")[1] "2011-06-04"ymd('20170208')[1] "2017-02-08" hms(“…”, roll=FALSE) / hm() / ms() ：处理不同顺序的时间数据 roll=FALSE 默认；若为TRUE，则根据规则进行换算 123456789101112# 处理时间&gt; hms("14:20:01")[1] "14H 20M 1S"&gt; hms("01:59:120")[1] "1H 59M 120S"&gt; hms("01:59:120",roll=T) # roll=T,进行换算[1] "2H 1M 0S"ymd_hms("20161120220000")[1] "2016-11-20 22:00:00 UTC" ymd_hms(“…”, tz=”UTC”, locale=Sys.getlocale(“LC_TIME”), truncated = 0) / ymd_hm / ymd_h ：处理不同顺序的日期时间数据 dmy_hms /dmy_hm /dmy_h mdy_hms / mdy_hm / mdy_h … : 一个字符串向量 in year, month, day, hour, minute, second format tz =”UTC” ：世界标准时间 提取日期 year(“”) / month() / week() / day() / hour() / minute() / second() ：解析日期中的部分值 month(x, label=FALSE, abbr=TRUE) label= FALSE，默认；将月份作为数值进行显示；若为TRUE，则作为字符串 “January.” abbr = TRUE，默认，将月份作为字符串的缩写进行显示”Jan”，当label为FALSE时忽略该参数；若为FALSE，则显示全称 “January.”； (abbreviate ：缩写) yday(x)：一年中的第几天 mday(x)：一个月中的第几天 wday(x)：一周中的星期几 [1, 7] qday(x)：一个季度中的第几天 days_in_month() ：返回所属月份的最大天数 am(x) / pm(x) ：返回逻辑值，判断是否为上午/下午 12:00:00 判断为下午；am(hms(&#39;11:59:59&#39;)) [1] TRUE am(hms(&#39;12:00:00&#39;)) [1] FALSE 1234567891011121314151617181920&gt; year('2017-01-02')[1] 2017&gt; month('2017-01-02')[1] 1&gt; month('2017-01-02', label=T)[1] Jan## 设定日期-----------------------------&gt; x &lt;- ymd('2010-04-08'); x[1] "2010-04-08"&gt; month(x) &lt;- 5 ; x[1] "2010-05-08"&gt; days_in_month(as.Date('2017-05-10'))May 31 转换 parse_date_time 将格式各样的日期时间字符串转换为日期时间类型的数据，并通过orders指定显示的顺序 parse_date_time(x, orders, tz = “UTC”, truncated = 0, quiet = FALSE, locale = Sys.getlocale(“LC_TIME”), select_formats = .select_formats, exact = FALSE)：将向量转换为POSIXct的日期时间格式 与strftime的两点区别： 指定一个特殊的排列顺序，而无需使用 % 在处理复合的日期时间数据时，可同时指定多个排列顺序 x ：一个字符串 或数值 向量 order =c(“”): 指定的日期显示顺序 ； 若涉及到日期与时间，将时间的小写改为大写； eg ymd_HMS tz =”UTC” ：世界标准市价 1234567891011121314151617181920212223242526&gt; x &lt;- c("09-01-01", "09-01-02", "09-01-03")&gt; parse_date_time(x, "ymd")[1] "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"## 复合时间 # 处理复合的日期时间数据时，可同时指定多个排列顺序x &lt;- c("09-01-01", "090102", "09-01 03", "09-01-03 12:02")parse_date_time(x, c("ymd", "ymd_HM"))## 不同的排序规则 - 可以同时处理&gt; x &lt;- c("2009-01-01", "02022010", "02-02-2010")&gt; parse_date_time(x, c("dmY", "ymd"))[1] "2009-01-01 UTC" "2010-02-02 UTC" "2010-02-02 UTC"## 季度与部分日期&gt; parse_date_time(c("2016.2", "2016-04"), orders = "Yq") # q 代表季度;[1] "2016-04-01 UTC" "2016-10-01 UTC" &gt; parse_date_time(c("2016", "2016-04"), orders = c("Y", "Ym"))[1] "2016-01-01 UTC" "2016-04-01 UTC"# Y 与 y 的区别 # Y大写表示全称；y表示缩写；&gt; parse_date_time(c("16.2", "16-04"), orders = "yq")[1] "2016-04-01 UTC" "2016-10-01 UTC"&gt; parse_date_time(c("16.2", "16-04"), orders = "Yq")[1] NA NA decimal_date(x)：将日期格式转化为小数格式； x : a POSIXlt/ct or Date object date_decimal(x) ：将小数转化为日期格式 123456date &lt;- ymd("2009-02-10")decimal_date(date)[1] 2009.11date_decimal(decimal_date(date))[1] "2009-02-10 UTC" as.Date()：以数值形式存储，精确到天 解析类函数，默认已完成了格式转换；eg ymd(&quot;2012-04-21&quot;) as.POSIXct() ：以一个数值形式进行存储，精确到秒 as.POSIXlt() ：以列表的形式进行存储，精确到秒 unclass(x) ： 可以将日期变成以天来计数 ； 可以将时点类根据最基本的组成进行拆解 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 x&lt;-as.Date("1970-01-01") &gt; unclass(x) [1] 0&gt; &gt; unclass(as.Date("1970-02-01")) #19700201代表第31天[1] 31# --------对时点类时间进行拆解--------------------------------------## POSIXct 格式；主要特点：以秒进行存储。&gt; unclass(now()) # 等价于 unclass(as.POSIXct(now()))[1] 1501495056attr(,"tzone")[1] ""## POSIXlt 格式；主要特点：以列表进行单独储存格式，可以作为时间筛选的一种&gt; unclass(as.POSIXlt(now()))$sec[1] 18.43142$min[1] 58$hour[1] 17$mday[1] 31$mon[1] 6$year[1] 117$wday[1] 1$yday[1] 211$isdst[1] 0$zone[1] "CST"$gmtoff[1] 28800attr(,"tzone")[1] "" "CST" "CDT" 起始日期为1970-01-01 获取 today( [tz=””])：返回当前系统的日期，不含时间；时区默认为当前计算机的时区 now( [tz=””])：作为POSIXct对象返回当前系统的日期与时间 ；时区默认为当前计算机的时区 12345&gt; today()[1] "2017-07-31"&gt; now()[1] "2017-07-31 15:43:46 CST" 舍入 - Rounding round_date(x, unit = “second”) ：根据unit对x进行四舍五入； unit =”” ：可选的单位 second(s) / mintue(s) / hour(s) / day(s) week(s) / month(s) / quarter() haflyear / year floor_date(x, unit = “second”)：向下舍入； 相当于取整；若unit=”hour” ，则舍去分钟的内容 ceiling_date(x, unit = “second”, change_on_boundary = NULL)：向上舍入； 向上取整； 若后面一位小数大于0，即向前进一位 函数实际运行的三个步骤 转换为表示日期下限的时点：2000-01-01 –&gt; 2000-01-01 00:00:00 向上舍入到下一个最接近的单位边界。 if the rounding unit is month then next boundary for 2000-01-01 will be 2000-02-01 00:00:00. 如果舍入的最小边界单位小于一天，则返回第二步的时点 123456789101112131415161718192021222324252627282930## round_date--------------------------------------------------x &lt;- as.POSIXct("2009-08-03 12:01:59.23"); x[1] "2009-08-03 12:01:59 CST"round_date(x, "minute") # 舍入到分钟[1] "2009-08-03 12:02:00 CST"&gt; round_date(x, "5 minute")[1] "2009-08-03 12:00:00 CST"&gt; round_date(x, "2 months")[1] "2009-09-01 CST"round_date(x, "quarter") == round_date(x, "3 months")round_date(x, "halfyear")round_date(x, "year")## floor_date--------------------------------------------------x &lt;- as.POSIXct("2009-08-03 12:01:59.23")&gt; floor_date(x, "hour")[1] "2009-08-03 12:00:00 CST"## ceiling_date------------------------------------------------x &lt;- as.POSIXct("2009-08-03 12:01:59.23")&gt; ceiling_date(x, "second")[1] "2009-08-03 12:02:00 CST" 设定时点 设定时点的两种方法： 通过解析函数设定 通过时段类函数设定 通过解析函数设定 123456789101112#解析日期year(x)#设定日期，通过赋值进行设定year(x) &lt;- value&gt; l &lt;- today(); l[1] "2017-07-31"&gt; day(l) &lt;- 10; l[1] "2017-07-10"# 不可直接对today()进行赋值day(today())&lt;- 10 # 显示报错 通过时段类函数直接设定 1234567## 通过period来设定时间，一般为unit之后加s； 例如days / months&gt; today() + days(1) [1] "2017-08-01"## 通过 duraction来设定时间，一般period之前加d；即对原始先加s，在加d； 例如 ddays / dyears&gt; today() + ddays(1) [1] "2017-08-01" 时段类 间隔 - Intervals interval：最简单的时段对象，它由两个时点数据构成。 间隔类型： is.intervals &amp; as.intervals interval(start, end, tzone = attr(start, “tzone”))：创建时间间隔 1234## 创建时间间隔&gt; x &lt;- ymd('2010-04-08')&gt; interval(x,now())[1] 2010-04-08 08:00:00 CST--2017-07-31 16:41:43 CST int_length() ：间隔的长度，以秒来计算 int_start() / int_end() ：返回间隔的起始/结束日期时间 int_shift(int, by)：对间隔两端同时进行转换 by = duration( ): 一段持续时间或周期 1234567## 转换int &lt;- interval(ymd("2001-01-01"), ymd("2002-01-01"))int_shift(int, duration(days = 11))[1] 2001-01-12 UTC--2002-01-12 UTCint_shift(int, duration(hours = -1))[1] 2000-12-31 23:00:00 UTC--2001-12-31 23:00:00 UTC int_flip(int)：翻转；将interval的起始时间与结束时间对调 int_standardize()：标准化；确保间隔是正值，即结束时间大于开始时间；若非标准化，则自动调整 123456int &lt;- interval(ymd("2001-01-01"), ymd("2002-01-01"))int_flip(int)[1] 2002-01-01 UTC--2001-01-01 UTCint_standardize(int_flip(int))[1] 2001-01-01 UTC--2002-01-01 UTC int_diff(times)：时间间隔对象, 包含 n-1段的时间间隔 times为POSIXct, POSIXlt 或日期格式 123456&gt; dates &lt;- now() + days(1:4); dates[1] "2017-08-01 17:00:07 CST" "2017-08-02 17:00:07 CST" "2017-08-03 17:00:07 CST" "2017-08-04 17:00:07 CST"&gt; int_diff(dates)[1] 2017-08-01 17:00:07 CST--2017-08-02 17:00:07 CST 2017-08-02 17:00:07 CST--2017-08-03 17:00:07 CST[3] 2017-08-03 17:00:07 CST--2017-08-04 17:00:07 CST int_overlaps(int1, int2)：判断int1与int2之间是否有重叠的部分；并返回逻辑值 T/F int_aligns(int1, int2)：判断int1与int2是否对齐，并返回逻辑值 T / F aligns : 对齐 若int1与int2 有相同的起始时间或结束时间，则返回T； 否则返回FALSE 1234567891011int1 &lt;- interval(ymd("2001-01-01"), ymd("2002-01-01"))int2 &lt;- interval(ymd("2001-06-01"), ymd("2002-01-01"))int3 &lt;- interval(ymd("2003-01-01"), ymd("2004-01-01"))int_aligns(int1, int2) # TRUE ## 有相同的结束时间int_aligns(int1, int3) # FALSE ## 判断是否有重叠 int_overlaps(int1, int2) # TRUEint_overlaps(int1, int3) # FALSE time_length(x, unit = “second”) ：计算两个时间之间的间隔 （自定义间隔单位） x ：a duration, period, difftime or interval unit = c(“second”, “minute”, “hour”,”day”, “week”,”month”, “year”)) difftime(time1, time2, tz,units=c(“”) ) ：计算两个时间之间的间隔 （自定义间隔单位） 该函数为Base函数 units = c(“auto”, “secs”, “mins”, “hours”,”days”, “weeks”)) %within% 持续时间 - Durations duration：去除了时间两端的信息，纯粹以秒为单位计算时段的长度，不考虑闰年和闰秒，它同时也兼容基本包中的difftime类型对象。 期间类型 ： is.duration(x) &amp; as.duration duration(num = NULL, units = “seconds”, …)：创建持续时间 12345678duration(90, "seconds")duration(1.5, "minutes")## 比较判断duration("day 2 sec") &gt; "day 1sec"is.duration(as.Date("2009-08-03")) # FALSEis.duration(duration(days = 12.4)) # TRUE dyears(x) / dweeks(x) / ddays(x) /dhours(x) / dminutes(x) / dseconds(x) ：快速创建持续时间的对象以便于进行日期时间操作 没有dmonths()，因为其以秒为单位来创建，而月度常在30天/31天之间变化；而年度的话此时默认为365天； Durations的函数，以 [秒] 为单位进行创建 minutes(2)函数表示的2个整分钟的概念，而dminutes(2)则是具体120秒 years(1)则是一个整年的概念而dyears(1)表示的365天**而 123456789101112## 规则说明：以 [秒] 为单位进行创建&gt; dyears(1)[1] "31536000s (~52.14 weeks)"&gt; years(1)[1] "1y 0m 0d 0H 0M 0S"## 具体区别&gt; ymd('20160228')+dyears(1) # 以秒为单位进行扩展[1] "2017-02-27"&gt; ymd('20160228')+years(1) # 以年为单位进行扩展[1] "2017-02-28" 周期 - Periods period：以较长的时钟周期来计算时段长度，它考虑了闰年和闰秒，适用于长期的时间计算。 周期类型： is.period &amp; as.period period(num = NULL, units = “second”, …)：创建周期 12345&gt; period(-1, "days")[1] "-1d 0H 0M 0S"&gt; period(c(3, 1, 2, 13, 1), c("second", "minute", "hour", "day", "week"))[1] "20d 2H 1M 3S" years(x) / months(x) / weeks(x) / days(x) / hours(x) / minutes() / seconds(x)：快速创建阶段对象以便于进行日期时间操作 Durations的函数，以 [创建的函数单位] 为单位进行创建 minutes(2)函数表示的2个整分钟的概念，而dminutes(2)则是具体120秒 years(1)则是一个整年的概念而dyears(1)表示的365天而 1234567891011# 规则说明：以[创建的函数单位]为单位进行创建&gt; dyears(1)[1] "31536000s (~52.14 weeks)"&gt; years(1)[1] "1y 0m 0d 0H 0M 0S"# 具体应用&gt; x &lt;- as.POSIXct("2009-08-03");x[1] "2009-08-03 CST"&gt; x + days(1) + hours(6) + minutes(30)[1] "2009-08-04 06:30:00 CST" 时区 - Time Zones 时区索引 tz(x)：提取时间数据的时区 with_tz(time, tz=””)：将时间数据[显示] 为另一个时区的同一时间 force_tz(timez, tz=””)：将时间数据的时区[强制转换] 为另一个时区 1234567891011121314tz(x) &lt;- value # 设置时区&gt; meeting &lt;- ymd_hms("2011-07-01 09:00:00", tz = "Pacific/Auckland");meeting[1] "2011-07-01 09:00:00 NZST"&gt; with_tz(meeting, "America/Chicago") #显示不同的时区相同的时刻[1] "2011-06-30 16:00:00 CDT"&gt; mistake &lt;- force_tz(meeting, "America/Chicago");mistake # 强制转化为另一个时区[1] "2011-07-01 09:00:00 CDT"&gt; with_tz(mistake, "Pacific/Auckland") # 显示转化之后的另一个时间的同一时间，判断是否转换成功[1] "2011-07-02 02:00:00 NZST" 混杂的 - Miscellaneous leap_years(x) : 判断是否为闰年 pretty_dates() : provides a method of making pretty breaks for date-times make_difftime(num = NULL, units = “auto”) : 12345make_difftime(3600, units = "minute")# Time difference of 60 minsmake_difftime(second = 3, minute = 1.5, hour = 2, day = 6, week = 1)# Time difference of 13.08441 days %m+% ：由于每个月的最后天数不一样，如果直接在某个月份的最后一天加上指定的月数就会出现错误，这时就得考虑使用%m+%函数了。 12345678x &lt;- as.Date('2015-01-31')y &lt;- x + months(0:11); y [1] "2015-01-31" NA "2015-03-31" NA "2015-05-31" NA "2015-07-31" "2015-08-31" [9] NA "2015-10-31" NA "2015-12-31"&gt; x %m+% months(0:11) [1] "2015-01-31" "2015-02-28" "2015-03-31" "2015-04-30" "2015-05-31" "2015-06-30" "2015-07-31" "2015-08-31" [9] "2015-09-30" "2015-10-31" "2015-11-30" "2015-12-31"]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R_数据处理_basic]]></title>
      <url>%2F2017%2F07%2F25%2FR_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86_basic%2F</url>
      <content type="text"><![CDATA[R_数据处理_basic 数据结构数据结构：向量、矩阵、数组、数据框、因子、列表 向量 用于储存数值型、字符型或逻辑性数据的一维数组。 同一向量中的数据必须为同一模式；例如同为数值型 通过方括号[ ] 给定元素所处位置的数值来访问向量中的元素 标量：只含一个元素的向量 12345a[1]a[2:6]a[c(2,4)] 矩阵&amp;数组 矩阵：二维数组，每个元素都拥有相同的模式（数值型、字符型、逻辑型） 使用方括号[]和下标 来选择矩阵中的行、列或元素； matrix(vector, nrow=n1, ncol=n2, byrow=FALSE, dimnames=list(rnames, cnames)) nrow/ncol = n，表示行列的数量，即维度 byrow = FALSE(默认)， 按列填充 dimanems=list() ： 可选的，以字符型向量命名的行名与列名 12345x&lt;- matrix(1:10, nrow=2)x[2,]x[1,4]x[1,c(4,5)] 数组：任意维度的向量；是矩阵的自然推广 array(vector, dimensions, dimnames=list()) 数据框 不同的列可以包含不同模式（数值型、字符型等）的数据，通常用data.frame()创建 通过方括号[ ]与 $ 以及 attach()&amp;detach() 或 with()进行选取列 列所处位置的数值 指定列名 运用with()进行数据框绑定，用花括号{ }来指定对数据框执行的语句； 对象仅存在于with()结构以内 若要创建with()结构以外也存在的对象，使用特殊赋值符号&lt;&lt;替代标准的赋值符号&lt; ；可以将对象保存在全局环境中 12345678910111213## 指定 列所处位置的数值patientdata[1:2] ## 指定列名patientdata[c("disbetes", "status")]patientdata$diabetes## --------with()绑定数据框-----------------------#with(mtcars, &#123; stats &lt;- summary(mpg) stats&#125;) 列表 列表：任意对象的有序集合；列表允许若干个对象到单个对象名下。（即列表可能是向量、矩阵、数据框，甚至是其他列表的组合） 通过双重括号[[ ]]中指名代表某个成分的数字或名称来访问列表中的元素 list(name1 = object1, name2 = object2) 123mylist[[2]]mylist[['age']]mylist$age 结构判断 str()：返回对象整体的数据结构 class()：返回单个对象格式/类型 mode()：返回对象模式 dim()：返回对象维度 summary()：统计摘要；区别对待不同类型的数据变量- (1)数值型：相关极值等信息；(2)名义型/有序型：显示的是各水平的频数值 ​ 数据类型因子 变量类别型变量（名义型、有序型）和连续型变量； 名义型变量：没有顺序之分的 [类别型] 变量 有序型变量：一定顺序的 [类别型] 变量 连续型变量：呈现某个范围内的任意值，并同时表示了顺序和数量。 [名义型、有序型] 变量在R中称为 [因子] (factor) 函数factor() 以一个整数向量的形式存储类别值，范围为[1..k]（k是名义型变量中唯一值的个数），同时一个字符串（原始值）组成的 内部向量 将映射到这些整数上 facotr(x, ordered=FALSE, levels=c(), labels=c(), exclude=NA)： ordered = FALSE(默认)；若为TRUE，则为有序型变量 对字符型向量，默认顺序按 英文字母顺序创建 [a-z] levels=c()：覆盖默认排序的顺序；保证指定的水平与数据中的真实值相匹配，因为任何在数据中出现而未在参数列举中的数据都会被设为缺失值 labels=c()：将有序型变量转化为名义型变量； 标签的顺序必须和因子水平的顺序相一致； 所有不一致的变量将被设为缺失值NA exclude =NA：转变为因子时排除在外的变量，即不参与有序化； 123456789101112131415161718192021222324252627282930313233&gt; diabetes&lt;- c('type1','type2','type1','type1')&gt; diabetes &lt;- factor(diabetes);diabetes[1] type1 type2 type1 type1Levels: type1 type2# --------有序型因子，order=T------------------------------#&gt; status &lt;- c('poor','improved','excellent','poor')&gt; status &lt;-factor(status, ordered=T);status[1] poor improved excellent poor Levels: excellent &lt; improved &lt; poor# 覆盖原有的因子顺序 -- levels=c()为指定的顺序status &lt;-factor(status, ordered=T, levels=c('poor','improved','excellent'));status[1] poor improved excellent poor Levels: poor &lt; improved &lt; excellent# levels中的值必须在数据中出现； 参数中为出现的值默认被设置NA&gt; status &lt;-factor(status, ordered=T, levels=c('poor','improved','x'));status[1] poor improved &lt;NA&gt; poor Levels: poor &lt; improved &lt; x# 变更为无序因子（名义型变量）&gt; status; [1] poor improved excellent poor Levels: excellent &lt; improved &lt; poorfactor(status, labels=c(1,2,3)) # 标签的顺序必须和因子水平的顺序相一致[1] 3 2 1 3Levels: 1 &lt; 2 &lt; 3# 因子化时排除某个变量&gt; x &lt;- factor(c(1, 2, 3), exclude = 3); x[1] 1 2 &lt;NA&gt;Levels: 1 2 语句diabetes &lt;- factor(diabetes) 将此向量存储为（1,2,1,1）（以一个整数向量的形式存储类别值，范围为[1..k]），并在内部将其关联为 1 = type1 和 2 =type2（具体赋值根据字母顺序而定） 针对向量diabetes进行的任何分析都会将其作为名义型变量对待，并自动选择适合这一测量尺度的统计方法 语句status &lt;-factor(status, ordered=T) 将向量存储为（3,2,1,3)，并在内部关联为 1=excellent, 2=improved, 3=poor 数据类型 &amp; 转换 数值型 - is.numeric() &amp; as.numeric() 整数型 is.integer() &amp; as.integer() 双精度型 is.double() &amp; as.double() 字符串形式 is.character() &amp; as.character() 逻辑型 is.logical() &amp; as.logical() 因子型 is.factor() &amp; as.factor() as.factor(x) – 只能对整个数据/列进行转换，其中无法插入其他语法 在作图时因子化需用 factor 向量型 is.vector() &amp; as.vectro() 矩阵型 is.matrix() &amp; as.matrix() 数组型 is.array() &amp; as.array() 数据框型 is.data.frame() &amp; as.data.frame() 123# 多列变更data[,col:col] &lt;- lappy(gb[,col:col], as.numeric)# gb[,c("net_activation","total_income")] &lt;- lapply(gb[,c("net_activation","total_income")], as.numeric) 数据选取元素选取 负号表示排除 123456789101112131415161718192021## 负号：表示排除某一列mtcars[,-1] # 表示排除第一列## 向量的选取# 位置选取a[2]; a[1:6]; a[c(1,4)];# 判断选取a[a&gt;2]; a[a==2]## 矩阵&amp;数据框选取# 位置选取a[1,]; a[,1]; a[1,2]; a[1, c(4,5)]## 数据框选取# 位置选取mtcars[1,]; mtcars[,1]; mtcars[1:2,]; mtcars[,1:2]mtcars[1:2] # 默认选取列，选取1与2列mtcars[1:2, 3:4]mtcars[c('wt')]; mtcars[1:2, c('wt','hp')]mtcars$hp # 运用 $ 进行选取 逻辑选取 逻辑选取，后端运行分为两步 根据已有的条件对每个对象进行判断，结果为TRUE或FALSE 指定某个对象中提取为TURE的值 该对象的类型必须与条件判断的对象类型相同 或者说 前的范围必须 $\le$ 后者； mtcars$wt[mtcars$carb==2] ：选取carb为2的wt列；注意，wt与carb的对象均为列； mtcars[mtcars$carb==2] ：会报错，提示undefined columns selected ；此时前者范围大于后者；因为mtcars有n列，但逻辑为TRUE的只有一列，无法判断应该选取哪一列，故报错。 mtcars$carb[mtcars&gt;2]： 可以运行；不满足的部分用NA显示 123# 逻辑判断选取mtcars[mtcasr&gt;10]mtcars$hp[mtcars&gt;10] 子集选取 - subset subset(x, subset, select, drop = FALSE, …) ： S3 method for class ‘data.frame’ subset ：选取的逻辑表达式；选取条件 select ：选择的列 123subset(airquality, Temp &gt; 80, select = c(Ozone, Temp))subset(airquality, Day == 1, select = -Temp)subset(airquality, select = Ozone:Wind) 控制流重复和循环 for结构 ：for (var in seq) statement 循环执行某语句statement，直到某个变量var的值不在包含在序列seq中为止 1for (i in 1:10) print("hello") while结构 ：while (cond) statment 必须确保cond中的条件语句能【被改变】（即它在某个时刻不在为真），否则循环将永不停止 条件执行 表示相等== if-else结构：if (cond) statement 或者 for (cond) statement1 else statement2 1if (!is.factor(grade)) gerade &lt;- as.factor(grade) else print("Grade already is a factor") ifelse结构：ifelse(cond, statement1, statement2) 12ifelse(sorce&gt;0.5, print("Passed"), print("Failed"))outcome &lt;- ifelse(socre&gt;0.5, "Passed", "Failed") switch结构：根据一个表达式的值选择语句执行switch(expr,...) expr之后的…是expr的可能取值，后接等号（=），表示执行的行为 switch语句中，不同条件末尾要有 [逗号] 若expr为文本形式，输入时需加 [引号] 12345678910feelings &lt;- c("sad", "afraid")for (i in feelings) print( switch(i, happy = "I am glad you are happpy", # 用逗号分隔 afraid = "There is nothing to fear", sad = "Cheer Up", angry = "Calm down now" ) ) 逻辑判断 which()： 返回为真的逻辑对象，允许对数组array使用 自编函数 结构 1234myfunction &lt;- function(arg1, arg2, ...)&#123; statements return(object)&#125; 实用函数 length(x)：对象x的长度 seq(from, to, by)：生成一个序列 rep(x, n)：将x重复n次 cut(x, n)：将连续型变量分为n个水平的因子 ptetty(x, n)：将连续型变量分为n个区间 cat(…, file=”myfile”, append=FALSE)：连接…的对象，并将其输出到屏幕上或文件中 1234&gt; cat("hello", "bob", "\b.\n", "Is\'t R", "\t", "Great?\n","!")hello bob. Is't R Great? ! cat( ) 与 paste( ) 相同与区别 区别： paste( ) 对应的列单独合并 cat( ) 合并为一个单元格 123456&gt; paste(c("X","Y"),1:10,sep="")&gt; # [1] "X1" "Y2" "X3" "Y4" "X5" "Y6" "X7" "Y8" "X9" "Y10"&gt;&gt; cat(c("X","Y"),1:10,sep="")&gt; # XY12345678910&gt; funs的用法 直接在函数中写明需要运行的函数 summarise(., vars(), mean) 结合funs写出调用的函数 summarise(., vars(), funs(mean)) 12345summarise_all(df1[,-1],funs(mean,sum)) # 若出现两个及以上的函数，列名中自动添加后缀summarise_all(df1[,-1],funs(sum(.*2))) # 所有数据用.表示summarise_all(df1[,-1],funs(medi=median)) # 指定得到的列后缀名, 函数仍为miedansummarise_all(df1[,-1],funs("in"=median)) # 或者加引号 (因为in在R中表示其他含义)mutate_all(df1[,-1],funs(.^2)) 关于报错 This function should not be called directly ：该函数在多个包中有同样的名字 指定某个包的函数 dplyr::summarise() 移除某个包 detach(package:plyr) 符号的使用基本符号 ( )定义函数的参数 ( )在运算中作为优先级 [ ] 用做对象的元素索引 { } 作为代码段落的起止 %in% 表示包含 用分号;来分隔两个代码； 123&gt; x &lt;- "AAABBBCCC"&gt; str_sub(x, 1, 1) &lt;- 1; x[1] "1AABBBCCC" 常见符号 写正则表达式的pattern时，要用两个转义符来进行转义\\，因为r中一个\本身就是转义符的意思 Windows下路径要用斜杠/或者双反斜杠\\ ，原因同上 名称 作用 示例 &lt;- 赋值符号 \ 转义符 [ ] 给定元素所处位置的数值 a[c(2,4)] ： 用于表示一个数值序列 a[2:6] [i,j] 选择指定的行与列 [i,][,j] [i,j][,] “” 用于目录名、文件名、包 ‘ ‘ 引用双引号的文字为文本时出现 labs(title=’ positon=”fill” ‘) # 用于注释。#之后出现的任何文本都会被R解释器忽视； 并且R只能对单行进行注释，故当出现多条命令符，需在每行前面加上# $ 选取一个给定数据框中的某个特定变量 patientIDdata$age &lt;&lt;- 特殊赋值符 [[ ]] 用于列表中选取对象 mylist[[“ages”]] mylist[[2]] ^或** 求幂 x% %y 求余数（x mod y) 5%%2=1 x% / %y 整数除法。5%/2%=2 == 严格等于（在浮点型数值时慎用==） 2+2==4 != 不等于 !x 非x x∣y x或y x&amp;y x和y isTRUE(x) 测试x是否为TRUE [,-1][-1,] [,c(-2,-3)]/[,-c(2,3)] 删除第一列 删除第一行 删除多列，两种表达方式均可 mydata&lt;-mydata[,-1] mydata&lt;-mydata[,-c(2,3)] “[“ 提取谋而对象一部分的函数，后跟序列数n；1表示该对象的第一部分； 2表示该对象的第二部分； R中常见表达式 符号 作用 示例 解释 ～ 分隔符号 y～x+z+w 左边-因变量/响应变量 右边-自变量/解释变量 + 分隔预测变量 ： 预测变量的交互项 y～x+z+x:z * 所有可能交互项的表达方式 y～xzw—y～x+z+w+x:z+x:w+z:w ^ 交互项的某个次数 y～(x+z+w)^2—y～x+z+w+x:z+x:w+z:w 交互项最高次为2次 . 包含除因变量之外的所有变量 y～.—y～x+z+w 当一个数据框包含y,x,z,w这四个变量时 - 减号，从等式中移除某个变量 y～(x+z+w)^2-x:w— y～x+z+w+x:z+z:w -1 删除截距项 y～x-1 拟合y在x上的回归，并强制直线通过原点 I() 【大写的i】 从算术（而非表示式）的角度来解释括号中的元素 y～x+I((z+w)^2) 表示的是x+(z+w)²，而非x+z+w+z:w function 可以在表达式中运用的数学函数 log(y)～x+z+w mpg ~ wt \ cyl 表示按条件（cyl）绘图； 即按cyl的水平为【分组条件】分别绘制mpg和wt的关系图 研究设计表达式 表达式 作用 解释 y～A 单因素ANOVA 1.小写字母，定量变量 2.大写字母，组别因子（若不转换为factor，则默认为定量协变量） 3.Subject，被试者独有的标志变量 4.Error(Subject/A)，表示组内因子 y～x+A 含单个协变量的单因素ANCOVA y～A * B 双因素ANOVA 展开为 ~A+B+A:B y～x1+x2+A*B 含两个协变量的双因素ANCOVA y～B+A（B是区组因子） 随机化区组 y～A + Error(Subject/A) 单因素组内ANOVA y～B*W+Error(Subject/W) 含单个组内因子(W)和单个组间因子(B)的重复测量ANOVA 展开为 ~B+W+B:W 字符规则 引用符 字符 含义 Quotes \n newline；换行 Quotes \r carriage return Quotes \t tab；制表符 Quotes \b backspace；空格 Quotes \a alert (bell) Quotes \f form feed Quotes \v vertical tab Quotes \ backslash \ Quotes \’ ASCII apostrophe ‘（单引号） Quotes \” ASCII quotation mark “（双引号） Quotes ` ASCII grave accent (backtick) ` Quotes \nnn character with given octal code (1, 2 or 3 digits) Quotes \xnn character with given hex code (1 or 2 hex digits) Quotes \unnnn Unicode character with given code (1–4 hex digits) Quotes \Unnnnnnnn Unicode character with given code (1–8 hex digits)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R_字符串处理_stringr]]></title>
      <url>%2F2017%2F07%2F25%2FR_%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86_stringr%2F</url>
      <content type="text"><![CDATA[R_字符串处理_stringr stringr：对一个单元格内的 [元素] 进行操作，而非把一个单元格看做一个整体来对待。 文本文件的读写 这里的文本文件指的是非表格式的文件，如纯文本文件，html文件 获取文件目录信息 file.info() dir() 列出指定目录中所有的文件，可选参数recursive=T可递归列出所有的子目录文件 file.exists()：判断文件是否存在 getwd() ：获得当前工作目录 setwd() ：设置当前工作目录 setwd(&quot;C:/data&quot;) 读入 scan(“file.xxx”, what=double(), seq=””, n=-1, nmax=-1, skip=0, encoding=”utf-8”) 读取文本文件，默认情况下读取文件中以[空格分割] 所有[浮点数值] 如果文件中包含非数值，可以字符串形式读入 scan(&quot;a.txt&quot;,what=&quot;&quot;) 指定分隔符为换行，scan(“a.txt”,what=””,sep=”\n”) 返回以换行分割的字符串向量 如果数据为表格形式：因为有表头，用scan不能读入 what：读入的数据类型；The supported types are [ logical, integer, numeric, complex, character, raw and list. ] character(0)：每个单词作为字符向量的一个元素 sep：分隔符，默认为空格&quot; &quot; n = -1：显示至最后一行 nmax = -1：读取至最后一行 skip=0：跳过的行数 encoding=”utf-8” / “Latin1” readline() 可以从键盘读取单行数据，如 age&lt;-readline(&quot;input the age: &quot;) readLines(“file.xxx”, encoding=”utf-8”) ：每一行当做一个字符串。等价于scan中指定分隔符为换行 用于读取字符型的格式文件；常用于文本文件 encoding = “utf-8” / “Latin1” ; Lattin1是[ISO-8859-1]的别名，有些环境下写作Latin-1。ISO-8859-1编码是单字节编码，向下兼容ASCII 写出 cat(x, file=””, sep=””, fill=False, labels=NULL, append=False)：拼接后输出对象，也可以把结果写到指定的文件中 x：R的对象 file：一个连接，或命名的文件打印到一个字符串；默认情况下打印到标准输出连接 sep=” “：每个元素后追加一个字符串的字符向量；默认为空格 append = False 覆盖file内容；若为True，表示附加到file 123456789101112131415&gt; cat(c("AB", "C"), c("E", "F"), "\n", sep="")[1] ABCDEF#----可以把结果写到指定的文件中-----------------#cat("i = ", 1, "\n", file="c:/work/result.txt")# 加上一个append=TRUE参数可以不覆盖原文 件而是在文件末尾附加，这很适用于运行中的结果记录。&gt; cat("hello", "bob", "\b.\n", "Is\'t R", "\t", "Great?\n","!") # 拼接后进行输出hello bob. Is't R Great? !&gt; paste("hello", "bob", "\b.\n", "Is\'t R", "\t", "Great?\n","!")[1] "hello bob \b.\n Is't R \t Great?\n !" writeLines 字符串统计str_length 符串长度 str_length(string) str_count 字符串计数 str_count(string, pattern = “”) string: 字符串，字符串向量。 pattern: 匹配的字符。 若不匹配字符，即等价于 str_length 12345678910111213141516171819&gt; str_count('aaa444sssddd', "a")[1] 3# 对字符串向量中匹配的字符计数&gt; fruit &lt;- c("apple", "banana", "pear", "pineapple")&gt; str_count(fruit, "a")[1] 1 3 1 1# 对字符串中的'.'字符计数，由于.是正则表达式的匹配符，直接判断计数的结果是不对的。&gt; str_count(c("a.", ".", ".a.",NA), ".")[1] 2 1 3 NA&gt; str_count(c("a.", ".", ".a.",NA), fixed(".")) # 用fixed匹配字符[1] 1 1 2 NA&gt; str_count(c("a.", ".", ".a.",NA), "\\.") # 用\\匹配字符[1] 1 1 2 NA 字符串查询str_locate - 位置 找到的模式在字符串中的位置 str_locate(string, pattern) str_locate_all(string, pattern) 以字符串matrix格式返回 123456789101112131415&gt; val &lt;- c("abca", 123, "cba")# 匹配a在字符串中的位置&gt; str_locate(val, "a") start end[1,] 1 1[2,] NA NA[3,] 3 3# 用向量匹配&gt; str_locate(val, c("a", 12, "b")) start end[1,] 1 1[2,] 1 2[3,] 2 2 str_detect - 逻辑值 匹配字符串的字符，返回逻辑值 str_detect(string, pattern) 123456789&gt; val &lt;- c("abca4", 123, "cba2")# 检查字符串向量，是否包括a&gt; str_detect(val, "a")[1] TRUE FALSE TRUE# 检查字符串向量，是否以a为开头&gt; str_detect(val, "^a")[1] TRUE FALSE FALSE 字符串提取strsub - 截取位置 截取字符串 str_sub(string, start = 1L, end = -1L) string: 字符串，字符串向量。 start : 开始位置 (若只出现一个数字，默认为开始位置) end : 结束位置 1234567891011121314151617181920212223242526&gt; txt &lt;- "I am Conan."# 截取1-6的索引位置的字符串&gt; str_sub(txt, end=6)[1] "I am C"# 截取6到结束的索引位置的字符串&gt; str_sub(txt, 6) # 若只出现一个数字，默认为开始位置[1] "Conan."# 通过负坐标截取字符串&gt; str_sub(txt, -3) # [截取] 最后3个字符[1] "an."&gt; str_sub(txt, end = -3) # [截止] 到最后第三个字符[1] "I am Cona"#----对截取的字符串进行赋值-----------------------------------------#&gt; x &lt;- "AAABBBCCC"# 在字符串的1的位置赋值为1&gt; str_sub(x, 1, 1) &lt;- 1; x[1] "1AABBBCCC"&gt; str_sub(x, 1, 1) &lt;- 123; x # [若数量超过截取的位数，则进行填充][1] "123AABBBCCC" str_subset - 提取 返回的匹配字符串 str_subset(string, pattern) pattern: 匹配的字符 12345678910111213&gt; val &lt;- c("abc", 123, "cba")# 全文匹配&gt; str_subset(val, "a")[1] "abc" "cba"# 开头匹配&gt; str_subset(val, "^a")[1] "abc"# 结尾匹配&gt; str_subset(val, "a$")[1] "cba" str_match - 匹配 从字符串中提取匹配组 str_match(string, pattern) str_match_all(string, pattern) 以字符串matrix格式返回 123456789101112131415161718192021222324252627282930313233343536&gt; val &lt;- c("abc", 123, "cba")# 匹配字符a，并返回对应的字符&gt; str_match(val, "a") [,1][1,] "a" [2,] NA [3,] "a" # 匹配字符0-9，限1个，并返回对应的字符&gt; str_match(val, "[0-9]") [,1][1,] NA [2,] "1" [3,] NA # 匹配字符0-9，不限数量，并返回对应的字符&gt; str_match(val, "[0-9]*") [,1] [1,] "" [2,] "123"[3,] "" #----以字符串matrix格式返回------------------------------------------#&gt; str_match_all(val, "a")[[1]] [,1][1,] "a" [[2]] [,1][[3]] [,1][1,] "a" str_extract - 匹配_Regex 从字符串中根据 [正则表达式] 提取匹配的值 str_extract(string, pattern) str_extract_all(string, pattern, simplify = FALSE) simplify: 返回值，TRUE返回matrix，FALSE返回字符串向量；(默认为False) 123456789&gt; val &lt;- c("abca4", 123, "cba2")# 返回匹配的数字&gt; str_extract(val, "\\d")[1] "4" "1" "2"# 返回匹配的字符&gt; str_extract(val, "[a-z]+")[1] "abca" NA "cba" word - 单词 从文本中提取 [单词] word(string, start = 1L, end = start, sep = fixed(“ “)) start: 开始位置。 end: 结束位置。 sep: 匹配字符。 (默认为 空格) 12345678910111213141516&gt; val &lt;- c("I am Conan.", "http://fens.me, ok")# 默认以空格分割，取第一个位置的字符串&gt; word(val, 1)[1] "I" "http://fens.me,"&gt; word(val, -1)[1] "Conan." "ok" &gt; word(val, 2, -1)[1] "am Conan." "ok" # 以,分割，取第一个位置的字符串 &gt; val&lt;-'111,222,333,444'&gt; word(val, 1, sep = fixed(','))[1] "111"&gt; word(val, 3, sep = fixed(','))[1] "333" 字符串替换str_replace 字符串替换 str_replace(string, pattern, replacement) 替换出现的 [第一个]字符 str_replcae_all(string, pattern, replacement) 替换出现的 [所有]字符 str_repclea_na(string, repalcement= “NA”) 把NA替换为其他字符串 string: 字符串，字符串向量。 pattern: 匹配字符。 replacement: 用于替换的字符。 1234567891011121314&gt; val &lt;- c("abc", 123, "cba")# 把目标字符串 [第一个] 出现的a或b，替换为- &gt; str_replace(val, "[ab]", "-") # 表示或者[1] "-bc" "123" "c-a"# 把目标字符串 [所有] 出现的a或b，替换为-&gt; str_replace_all(val, "[ab]", "-")[1] "--c" "123" "c--"#----把NA替换为字符串------------------------#&gt; str_replace_na(c(NA,'NA',"abc"),'x') # 把NA替换为x[1] "x" "NA" "abc" 字符串拆分str_split &amp; str_split_fixed 字符串分割，同str_split_fixed str_split(string, pattern, n = Inf) str_split()函数操作的结果类型为list &gt; class(s1) [1] &quot;list&quot; str_split_fixed(string, pattern, n) str_split_fixed()函数分割，结果类型是matrix &gt; class(s3) [1] &quot;matrix&quot; pattern: 匹配的字符。 n: 分割个数 1234567891011&gt; val &lt;- "abc,123,234,iuuu"# 以,进行分割&gt; s1&lt;-str_split(val, ",");s1[[1]][1] "abc" "123" "234" "iuuu"# 以,进行分割，保留2块&gt; s2&lt;-str_split(val, ",",2);s2[[1]][1] "abc" "123,234,iuuu" 字符串拼接str_c &amp; str_join 字符串拼接操作，与str_join完全相同，与paste()行为不完全一致。 str_c(…, sep = “”, collapse = NULL) str_join(…, sep = “”, collapse = NULL) 拼接有NA值的字符串向量时，NA还是NA &gt; str_c(c(&quot;a&quot;, NA, &quot;b&quot;), &quot;-d&quot;) &gt; &quot;a-d&quot; NA &quot;b-d&quot; …: 多参数的输入 sep: 把多个 [字符串] 拼接为一个大的字符串，用于字符串的分割符。 collapse: 把多个 [向量] 参数拼接为一个大的字符串，用于字符串的分割符。 12345678910111213141516#----------------示例--------------------------#多个 [字符串] 拼接为一个大的字符串&gt; str_c('a','b',sep='-')[1] "a-b"&gt; str_c(c('a','a1'),c('b','b1'),sep='-')[1] "a-b" "a1-b1"多个 [向量] 参数拼接为一个大的字符串&gt; str_c(head(letters), collapse = ", ")[1] "a, b, c, d, e, f"# collapse参数，对多个字符串无效&gt; str_c('a','b',collapse = "-") [1] "ab"&gt; str_c(c('a','a1'),c('b','b1'),collapse='-')[1] "ab-a1b1" 对比str_c()函数和paste()函数之间的不同点 12345678910111213141516171819&gt; # [字符串] 拼接，默认的sep参数行为 [不一致]&gt; &gt; str_c('a','b') # 默认分隔符为""&gt; [1] "ab"&gt; &gt; paste('a','b') # 默认分隔符为" "&gt; [1] "a b"&gt;&gt; # [向量] 拼接字符串，collapse参数的行为 [一致]&gt; &gt; str_c(head(letters), collapse = "")&gt; [1] "abcdef"&gt; &gt; paste(head(letters), collapse = "")&gt; [1] "abcdef"&gt;&gt;&gt; #拼接有 [NA值] 的字符串向量，对NA的处理行为 [不一致]&gt; &gt; str_c(c("a", NA, "b"), "-d")&gt; [1] "a-d" NA "b-d" &gt; &gt; paste(c("a", NA, "b"), "-d") # 将NA作为一个普通字符串来对待&gt; [1] "a -d" "NA -d" "b -d" &gt; 对比str_c() &amp; paste() 与 cat() 的区别： paste()：转为字符串后进行连接； cat() ：连接后输出为对象 12345678&gt; &gt; paste("hello", "bob", "\b.\n", "Is\'t R", "\t", "Great?\n","!")&gt; [1] "hello bob \b.\n Is't R \t Great?\n !"&gt;&gt; &gt; cat("hello", "bob", "\b.\n", "Is\'t R", "\t", "Great?\n","!")&gt; hello bob.&gt; Is't R Great?&gt; !&gt; &gt; str_conv - 转码 字符编码转换 str_conv(string, encoding) encoding: 编码名。 12345678910111213141516171819#----对中文进行转码处理---------------------------#&gt; x &lt;- charToRaw('你好');x[1] c4 e3 ba c3# 默认win系统字符集为GBK，[GB2312为GBK字集]，转码正常&gt; str_conv(x, "GBK")[1] "你好"&gt; str_conv(x, "GB2312")[1] "你好"# 转UTF-8失败&gt; str_conv(x, "UTF-8")[1] "���"#----把unicode转UTF-8------------------------------#&gt; x1 &lt;- "\u5317\u4eac"&gt; str_conv(x1, "UTF-8")[1] "北京" 字符串输出str_trim - 空格 去掉字符串的空格和TAB(\t) str_trim(string, side = c(“both”, “left”, “right”)) string: 字符串，字符串向量。 side: 过滤方式，both两边都过滤，left左边过滤，right右边过滤 “both”（默认） str_to_upper/title - 大小写 字符串大小写转换 str_to_upper(string, locale = “”) ：全大写 str_to_lower(string, locale = “”) ：全小写 str_to_title(string, locale = “”) ：首字母大写 locale:按哪种语言习惯排序 str_pad - 补充长度 补充字符串的长度 str_pad(string, width, side = c(“left”, “right”, “both”), pad = “ “) string: 字符串，字符串向量。 width: 字符串填充后的长度 side: 填充方向，both两边都填充，left左边填充，right右边填充 pad: 用于填充的字符 （默认为 空格） 1234567# 从左边补充空格，直到字符串长度为20&gt; str_pad("conan", 20, "left")[1] " conan"# 从左右两边各补充x字符，直到字符串长度为20&gt; str_pad("conan", 20, "both",'x')[1] "xxxxxxxconanxxxxxxxx" str_dup - 复制 复制字符串 duplicate str_dup(string, times) string: 字符串，字符串向量。 times: 复制数量 123456789&gt; val &lt;- c("abca4", 123, "cba2")# 复制2次&gt; str_dup(val, 2)[1] "abca4abca4" "123123" "cba2cba2" # 按位置复制&gt; str_dup(val, 1:3) # 复制的次数从1次增加到3次[1] "abca4" "123123" "cba2cba2cba2" str_sort &amp; str_order - 排序 字符串值排序，同str_order索引排序 str_sort(x, decreasing = FALSE, na_last = TRUE, locale = “”, …) str_order(x, decreasing = FALSE, na_last = TRUE, locale = “”, …) decreasing: 排序方向。 decrease - 减少 na_last:NA值的存放位置，一共3个值，TRUE放到最后，FALSE放到最前，NA过滤处理 locale:按哪种语言习惯排序 loacle = “en” - ASCII字母 / “zh” - 拼音 123456789101112131415161718192021# 按ASCII字母排序&gt; str_sort(c('a',1,2,'11'), locale = "en") [1] "1" "11" "2" "a" # 倒序排序&gt; str_sort(letters,decreasing=TRUE) [1] "z" "y" "x" "w" "v" "u" "t" "s" "r" "q" "p" "o" "n" "m" "l" "k" "j" "i" "h"[20] "g" "f" "e" "d" "c" "b" "a"# 按拼音排序&gt; str_sort(c('你','好','粉','丝','日','志'),locale = "zh") [1] "粉" "好" "你" "日" "丝" "志"#----对NA值的排序处理------------------------# #把NA放最后面&gt; str_sort(c(NA,'1',NA),na_last=TRUE) [1] "1" NA NA#去掉NA值 &gt; str_sort(c(NA,'1',NA),na_last=NA) [1] "1" 字符串变换str_warp - 格式 控制字符串输出格式 str_wrap(string, width = 80, indent = 0, exdent = 0) string: 字符串，字符串向量。 width: 设置一行所占的宽度。 indent: 段落首行的缩进值 exdent: 段落非首行的缩进值 12345678txt&lt;-'R语言作为统计学一门语言，一直在小众领域闪耀着光芒。直到大数据的爆发，R语言变成了一门炙手可热的数据分析的利器。随着越来越多的工程背景的人的加入，R语言的社区在迅速扩大成长。现在已不仅仅是统计领域，教育，银行，电商，互联网….都在使用R语言。'# 设置宽度为60字符，首行缩进2字符&gt; cat(str_wrap(txt, width = 60, indent = 2), "\n") R语言作为统计学一门语言，一直在小众领域闪耀着光芒。直到大数据的爆发，R语言变成了一门炙手可热的数据分析的利器。随着越来越多的工程背景的人的加入，R语言的社区在迅速扩大成长。现在已不仅仅是统计领域，教育，银行，电商，互联网….都在使用R语言。 参数控制函数 仅用于构造功能的参数，不能独立使用。 regex 定义正则表达式 stringr的API介绍stringr包1.0.0版本，一共提供了30个函数，方便我们对字符串处理。常用的字符串的处理以str_开头来命名，方便更直观理解函数的定义。我们可以根据使用习惯对函数进行分类： stringr包中的函数默认使用正则表达式的函数（pattern） R中的转义字符则是双斜杠：\\ \\d 代表\d 字符串拼接函数 str_c:字符串拼接。 str_join:字符串拼接，同str_c。 str_trim:去掉字符串的空格和TAB(\t) str_pad:补充字符串的长度 str_dup:复制字符串 str_wrap:控制字符串输出格式 str_sub:截取字符串 str_sub&lt;-截取字符串，并赋值，同str_sub 字符串计算函数 str_count:字符串计数 str_length:字符串长度 str_sort:字符串值排序 str_order:字符串索引排序，规则同str_sort 字符串匹配函数 str_split: 字符串分割 str_split_fixed: 字符串分割，同str_split str_subset: 返回匹配的字符串 word:从文本中提取单词 str_detect: 检查匹配字符串的字符 str_match:从字符串中提取匹配组。 str_match_all: 从字符串中提取匹配组，同str_match str_replace: 字符串替换 str_replace_all: 字符串替换，同str_replace str_replace_na:把NA替换为NA字符串 str_locate: 找到匹配的字符串的位置。 str_locate_all: 找到匹配的字符串的位置,同str_locate str_extract: 从字符串中提取匹配字符 str_extract_all: 从字符串中提取匹配字符，同str_extract 字符串变换函数 str_conv:字符编码转换 str_to_upper: 字符串转成大写 str_to_lower: 字符串转成小写,规则同str_to_upper str_to_title: 字符串转成首字母大写,规则同str_to_upper 参数控制函数，仅用于构造功能的参数，不能独立使用。 boundary:定义使用边界 coll:定义字符串标准排序规则。 fixed:定义用于匹配的字符，包括正则表达式中的转义符 regex:定义正则表达式]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R_导入&导出]]></title>
      <url>%2F2017%2F07%2F24%2FR_%E5%AF%BC%E5%85%A5%26%E5%AF%BC%E5%87%BA%2F</url>
      <content type="text"><![CDATA[Windows下路径要用斜杠/或者双反斜杠\\ R本身把\ 当做转义符，所以写pattern的时候要用\\进行转义 获取文件目录信息目录操作getwd &amp; setwd getwd()：获得当前工作目录 setwd() ：设置当前工作目录 setwd(&quot;C:/data&quot;) dir &amp; list.files - 获取 dir 与 list.files 功能相同；列出当前目录中所有的文件 dir() ：列出当前目录中所有的文件名 dir(path=”/home/conan/R”, pattern=Null, all.files=False, full.names=Fasle, recursice=Fasle, igonre.case= False, include.dirs=False, no..=False)：查看指定目录的文件 path：查看指定路径下的文件。 pattern ：匹配的正则表达式模式 all.files = False(默认) ；若为True，则列出隐藏的文件名 full.names=False(默认) &quot;我的形状&quot;；若为True，列出含相对路径的文件名 &quot;./我的形状&quot; 1dir(path="/home/conan/R",pattern='txt$') choose.dir - 获取 通过选取的方式获得目录 1a &lt;- choose.dir() system(“tree”) - 获取 通过系统命令以树状结构查看目录结构 file.info() dir.create - 新建 dir.create()：在当前目录下，新建一个目录 dir.create(path=”a1/b2/c3”,recursive = TRUE)：创建一个3级子目录./a1/b2/c3 file.path - 合并 file.path(…, fsep = .Platform$file.sep) file.path(getwd(), dir()) ：当前工作目录下的文件的路径 … : 字符串 fsep : 用于使用的路径分隔符 123456&gt; file.path("C:\\Users\\long\\Desktop","txt") [1] "C:\\Users\\long\\Desktop/txt" #----------------------------------------#&gt; file.path(getwd(),dir())[1] 'E:/Jupyter_notebook/test' 'E:/Jupyter_notebook/test.ipynb' 'E:/Jupyter_notebook/专项分析' 一般用paste来生成系统路径的时候，在最终结果，结合的地方会多一个空格，当然也可以用去空格的方式排除，但是不够好。 用file.path的方式直接生成，比较方便，而且绝对正确。 几个特殊的目录 R.home() 查看R软件的相关目录 .Library 查看R核心包的目录 .Library.site 查看R核心包的目录和root用户安装包目录 .libPaths() 查看R所有包的存放目录 system.file() 查看指定包所在的目录 文件操作 file.exist - 存在 判断文件是否存在 12345678&gt; file.exists(".")[1] TRUE&gt; file.exists("./a1/b2")[1] TRUE# 目录不存在&gt; file.exists("./aa")[1] FALSE file.remove - 删除 删除某目录 file.create - 创建 创建文件 123456789# 创建一个空文件 A.txt&gt; file.create("A.txt")[1] TRUE# 创建一个有内容的文件 B.txt&gt; cat("file B\n", file = "B.txt") # 把字符串输出到file# 打印B.txt&gt; readLines("B.txt")[1] "file B" file.copy - 复制12&gt; file.copy("A.txt", "C.txt")[1] TRUE file.append file.rename - 重命名 对文件重命名 file.rename(“old_name”, “new_name”)：将old_name变更为new_name 压缩与解压 unzip(),zip() 两个函数，可以压缩和解压缩 导入 导入 - 数据表 要导入的数据必须存放在getwd()目录下 Windows下路径要用斜杠/或者双反斜杠\\ readr library(readr) read_delim(“filename.xxx”, delim=””) : 自由分隔符 delim= &quot;|&quot;或其他任何形式 read_csv(“filename.csv”, col_names=T, col_types=NULL, skip = 0, locale(), na=c(“”,”NA”))：分隔符-逗号 col_names = True(默认) / False 或者 c(“”,””) 指定的 [向量]列名 col_types = cols(colname=colcharacter() ) / cols(colename= “c”, colname=”“) ：指定某个列的类型； 可以使用简写 each character represents one column: c = character, i = integer, n = number, d = double, l = logical, D = date, T = date time, t = time, ? = guess, or _/- to skip the column. cols(colname=col_skip() ) 跳过某个列不进行选取； skip = n 跳过的行数 locale= locale(encoding=”UTF-8”, date_format=”%AD”,time_format=”%AT”) (默认为US-centric) encoding=”UTF-8” / “gb2312” na = c(“”, “NA”) ：设置 &quot;&quot; 与&quot;NA&quot; 显示为NA；也可自定义 read_tsv()：制表符 read_csv2()：分号 read_table() read_fwf() readxl .xls和.xlsx格式的Excel工作表 read_excel(path, sheet = NULL, range = NULL, col_names = TRUE, col_types = NULL, na = “”, trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, n_max)) ：读取xls/xlsx的工作表 path：Path to the xls/xlsx file sheet：Sheet to read；整数或者字符串 range：读取的范围，例如 “B3:D87” col_names：True/Fasle，或者输入自定义的列名，长度需要与col_types相同 col_types： na = “ ”：默认将空格视为NULL skip=0：跳过行数；若给定了range则忽略 excel_sheet(path) ：显示表中的sheet名称 导入 - 非表格式 非表格式的（Non-Tabular）；这里的文本文件指的是非表格式的文件，如纯文本文件，html文件 readr read_file(file, locale=default_locale())：读入为一个单一的字符串 file ： 文档路径，一个连接或一个文本数据 Files ending in .gz, .bz2, .xz, or .zip 将自动被解压 Files starting with http://, https://, ftp://, or ftps:// 将自动被下载 Remote gz files 也能被自动下载 locale=locale() : 默认为US-centric read_file_raw(file)：读入为一个未加工的向量 read_lines(file, skip=0, n_max=-1L, locale=default_locale(), na=character(), progress=interactive())：逐行读入，每一行作为一个单一的字符串 read_lines_raw()：逐行读入，每一行作为一个未加工的向量 read_log(file, col_names=FALSE, col_types=NULL, skip=0, n_max=-1L)：读入日志文档 scan scan(“file.xxx”, what=double(), seq=””, n=-1, nmax=-1, skip=0, encoding=”UTF-8”) 读取文本文件，默认情况下读取文件中以[空格分割] 所有[浮点数值] 如果文件中包含非数值，可以字符串形式读入 scan(&quot;a.txt&quot;,what=&quot;&quot;) 指定分隔符为换行，scan(“a.txt”,what=””,sep=”\n”) 返回以换行分割的字符串向量 如果数据为表格形式：因为有表头，用scan不能读入 what：读入的数据类型；The supported types are [ logical, integer, numeric, complex, character, raw and list. ] character(0)：每个单词作为字符向量的一个元素 sep：分隔符，默认为空格&quot; &quot; n = -1：显示至最后一行 nmax = -1：读取至最后一行 skip=0：跳过的行数 encoding=”UTF-8” / “Latin1” quote =’’ : 若提示 EOF within quoted string可将quote = &#39;&#39; readline 可以从键盘读取单行数据 1age&lt;-readline("input the age: ") readLines readLines(“file.xxx”, encoding=”UTF-8”) ：每一行当做一个字符串。等价于scan中指定分隔符为换行 用于读取字符型的格式文件；常用于文本文件 encoding = “UTF-8” / “Latin1” ; Lattin1是[ISO-8859-1]的别名，有些环境下写作Latin-1。ISO-8859-1编码是单字节编码，向下兼容ASCII 导出 导出 - 数据表readr write_delim(x, path, delim = “ “, na = “NA”, append = FALSE, col_names = !append) ：默认分隔符为 &quot; &quot; write_csv(x, path, na = “NA”, append = FALSE, col_names = !append) ：导出为逗号分隔符的文档 path：Path or connection to write to. append=False (默认), 覆盖已有的文件；若为True，增加已经存在的文件 col_names = !append 写入的时候不写入列名 write_tsv() ：分隔符为制表符\t write_excel_csv()：导出为csv文档 All columns are encoded as UTF-8 导出 - 文本&amp;文本文件readr write_file(x, path)：导出为字符串文档 write_lines()：导出为字符串向量，每一个元素一行 write_rds()：导出为RDS文档 ​ cat cat(x, file=””, sep=””, fill=False, labels=NULL, append=False)： 拼接后输出对象 把结果写到指定的文件中 x：R的对象 file：一个连接，或命名的文件打印到一个字符串；默认情况下打印到标准输出连接 sep=” “：默认为空格； 每个元素后追加一个字符串的字符向量； append = False 覆盖file内容；若为True，表示附加到file 123456&gt; cat(c("AB", "C"), c("E", "F"), "\n", sep="")[1] ABCDEF#----可以把结果写到指定的文件中-----------------#cat("i = ", 1, "\n", file="c:/work/result.txt")# 加上一个append=TRUE参数可以不覆盖原文 件而是在文件末尾附加，这很适用于运行中的结果记录。 cat vs. paste cat是输出，paste连接成一个字符串 显示结果是：一个没有引号的结果（cat），另一个是有引号的字符串（paste） 12345678910111213141516a&lt;-c(1,2,3,4)b&lt;-c(4,5,6,7)c&lt;-c('hi','hello')&gt; paste(a,b,c)[1] "1 4 hi" "2 5 hello" "3 6 hi" "4 7 hello"&gt; cat(a,b,c)1 2 3 4 4 5 6 7 hi hello&gt; cat(LETTERS, letters)A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z&gt; paste(LETTERS, letters) [1] "A a" "B b" "C c" "D d" "E e" "F f" "G g" "H h" "I i" "J j" "K k" "L l"[13] "M m" "N n" "O o" "P p" "Q q" "R r" "S s" "T t" "U u" "V v" "W w" "X x"[25] "Y y" "Z z" cat vs. print cat被认为是更低级别的print，会识别转义符并进行执行 1234567&gt; x &lt;- "a b\tc\nd"&gt; print(x)[1] "a b\tc\nd"&gt; cat(x)a b cd writeLines案例 - 获取指定目录下的csv文档，并合并输出 Windows下路径要用斜杠/或者双反斜杠\\ 12345678910111213141516171819202122232425262728#----获取指定目录下的csv文档，并合并输出----------### 获取当前工作目录下所有文件名的路径file.path(getwd(),dir())'E:/Jupyter_notebook/test' 'E:/Jupyter_notebook/test.ipynb' 'E:/Jupyter_notebook/专项分析'path &lt;- file.path(getwd(),dir())[1]'E:/Jupyter_notebook/test'## 获取该路径下的所有csv文件名name &lt;- dir(path, pattern=".*\\.csv$"); name'2016-01-11-IC_1.csv' '2016-01-11-IH_1.csv' '2016-01-12-TF_1.csv' '2016-01-13-T_1.csv'## 合并文件名路径 + 文件名path_name &lt;- file.path(path, name); path_name## 省去定义data.frame的时间，我选择先读入一个文件table0 &lt;- read_csv(path_name[1], locale=locale(encoding='gb2312')) ## 写循环写入该文件中for (i in path_name[2:length(paht_name)])&#123; # 大括号表示代码块的起止 table1 &lt;- read_csv(path_name[1], locale=locale(encoding='gb2312')) table0 &lt;- bind_rows(table0, talbe1)&#125;## 写出文档write_csv(table0, file.path(path, 'test.csv'), append=F)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R_数据处理_dplyr&reshape2&tidyr]]></title>
      <url>%2F2017%2F07%2F24%2FR_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86_dplyr%26reshape2%2F</url>
      <content type="text"><![CDATA[dplyr：轻松地处理data.frame, data.table以及多种数据库为基础的数据，实现选择、变换、分组等 plry：轻松地在vector, list, data.frame之间做分组变换，实现拆分、变换、合并的操作 reshpae2：横向、纵向做数据变换 非特别标注，默认为dplyr包 准备工作 tbl_df(iris) ：数据类型转化 将数据转化为tbl类型，更易于查看 glimpse(iris)：tbl数据的信息密集概括 View(iris)：以电子表格的样式显示数据集 %&gt;% ：管道函数，将左边对象的第一个参数传递到右边的函数中 summary()：数据统计摘要；区别对待不同类型的数据变量- (1)数值型：相关极值等信息；(2)名义型/有序型：显示的是各水平的频数值 重组数据 改变数据集的布局 布局转换 - reshpae2 （数据透视） melt(data, id.vars, measure.vars, factorsAsStrings = TRUE)：以id.vars为基准，转为长格式形式 melt(data, id=c(“”), measure=c(“”) ) id=c(“”,””) 或 id.vars=c() 以该变量为 [基准] 进行重构；其他的列均摞起来 measure=c(“”) 或 measure.vars=c() ：组合进id列的变量；若measure缺失，表示所有字段 varaiable.name ，表示将 各个变量的列名 放在这个列下面； value.name，表示对应观测值的具体数值 na.rm = FALSE, factorsAsStrings = TRUE,将因子转化为字符串 12345678910111213141516171819202122232425262728names(airquality) &lt;- tolower(names(airquality))View(airquality)airquality_1 &lt;- head(airquality,3)aqm &lt;- melt(airquality_1, id=c("month","day")) # 以该变量为 [基准] 进行重构；其他的列均 [摞起来]&gt; melt(airquality_1, id=c("month","day")) # measure缺失时，默认选择所有的列 month day variable value1 5 1 ozone 41.02 5 2 ozone 36.03 5 3 ozone 12.04 5 1 solar.r 190.05 5 2 solar.r 118.06 5 3 solar.r 149.07 5 1 wind 7.48 5 2 wind 8.09 5 3 wind 12.610 5 1 temp 67.011 5 2 temp 72.012 5 3 temp 74.0&gt; melt(airquality_1, id.vars =c("month","day"), measure=c("wind","temp")) month day variable value1 5 1 wind 7.42 5 2 wind 8.03 5 3 wind 12.64 5 1 temp 67.05 5 2 temp 72.06 5 3 temp 74.0 dcast(data, formula, fun.aggregate = NULL)：以formula中的rowvar为基准列，重铸为宽格式 [excel统计表单的格式]；若加上FUN，则为 [数据透视表] 的格式 dcast(data, ID~variable, mean) dcast的功能相当于 group_by + summarise 的功能 formula , rowvar1+rowvar2 ~ colvar1+colvar2的格式； rowvar ：以此为基准的id列； colvar ：需要重构的变量列；将该变量中的元素 [分类] 映射到 [列] 上去 运行后的结果：出现的变量，原本为变量的列名，融合后是不参与计算的；参与的是对应的value列 若整个formula表达是中，均没有出现 variable列，默认即对其他所有的列默认做 [统计计数length] 除非指定具体的FUN函数 fun.aggregate（聚合函数）：直接列出聚合函数的名称；默认为计数 [length] margins = NULL；向量形式的变量名字； 若为TRUE，则计算所有的合计 margins= “colname” / “rowname” 即表达式中出现的变量名 subset = NULL；针对特定的变量类别做重铸；但需要加载plyr包去接收函数 选择 行中分类值 或者 variable列中的分类 “length” 进行重铸 subset = .(variable==&quot;length&quot;) 或者 subset = .(month == 5 ) subset = .(time &lt; 10 &amp; chick &lt; 20) fill = NULL； 填充NA的值 drop = TRUE；对缺失值的处理；drop or Not 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556names(airquality) &lt;- tolower(names(airquality))View(airquality)aqm &lt;- melt(airquality, id=c("month", "day"), na.rm=TRUE) # 除了month和day两列，其他列摞起来，为了等长，m和d列循环对齐dcast(aqm, day + variable ~ month) # 保持day和variable不变，按month中的元素 [分类] 映射到列上去(若month有5、6两个月，则分别有2列)dcast(aqm, variable + day ~ month) # 换一下顺序，重复的variable连在一起，对应不一样的day，这样的方式排列dcast(aqm, day ~ variable + month) # 只保留day列dcast(aqm, day+month ~ variable) # 还原为原本的样子# 表达式中均未出现variable列，即默认把其他列的每一行看做一个整体进行计算-#dcast(aqm, day ~ month) # 当整个formula表达是中，均没有出现 variable列，即对其他所有的列默认做长度计算length day 5 61 1 4 3 # 表示day为1，month为5时，共有4个变量2 2 4 33 3 4 34 4 4 3dcast(aqm, day ~ month, mean) # 对所有没有出现的变量做函数mean day 5 61 1 76.35000 124.200002 2 58.50000 123.566673 3 61.90000 108.366674 4 101.12500 93.06667# -------加入计算：等价于group_by + summarise------------------------------### 正常情况下含variable&gt; dcast(aqm , month~variable) Aggregation function missing: defaulting to length # 默认为计数 month ozone solar.r wind temp1 5 26 27 31 312 6 9 29 29 29 &gt; dcast(aqm , month~variable, mean) month ozone solar.r wind temp1 5 23.61538 181.2963 11.62258 65.548392 6 29.44444 191.9655 10.34483 78.96552 # ------加入合计：margins-------------------&gt; dcast(aqm , month~variable,sum, margins = T) month ozone solar.r wind temp (all)1 5 614 4895 360.3 2032 7901.32 6 265 5567 300.0 2290 8422.03 (all) 879 10462 660.3 4322 16323.3 dcast(aqm , month~variable,sum, margins = "month") # --------加入子集的选取subset-------------------library(plyr) # needed to access . functiondcast(aqm, variable ~ month, mean, subset = .(variable == "ozone"))dcast(aqm, variable ~ month, mean, subset = .(month == 5))names(ChickWeight) &lt;- tolower(names(ChickWeight))chick_m &lt;- melt(ChickWeight, id=2:4, na.rm=TRUE)dcast(chick_m, chick ~ time, mean, subset = .(time &lt; 10 &amp; chick &lt; 20)) # 多条件选取 dcast 和 acast区别 12345&gt; dcast(aqm, variable + month ~ day) &gt; acast(aqm, variable + month ~ day) # acast和dcast的功能基本上相同，只是dcast会把 [分组信息] 作为一列或几列显示，而acast会将其作为行名&gt; acast(aqm, day ~ month, mean) # 保留的列作为合并在一起作为列名（少了day列，不建议使用）&gt; acast(aqm, variable ~ month ~ day) # acast 多出来的功能，生成一个三维数组，按照day的值分成31个矩阵&gt; t(x) ：转置 mtcars &lt;- mtacrs[, c(12,1:11) ] ：列重新排序 排序 arrange(mtcars, desc(mpg),var) ：根据变量进行排序 arrange(flights, desc(dep_delay - arr_delay))：对计算的数据进行计算 默认为升序，aes 返回行/列名 - Basic colnames(object)：返回所有列的名称 names(object) rownames(object)：返回所有行的名称 [二维以上的任何对象] row.names(object) 重命名列变量 rename(tbl, y=year)：将变量名year变更为y 1rename(data, newname=oldname) # 新的列名在前 select(df2tbl, x1 = x, y1 = y)：选择变量时，重命名；x1为新的列名 fix(object)：可以同时改变格式 numeric / character 【Basic】 data_frame(a=1:3, b=3:5)：将向量合并为数据框 合并 &amp; 分割 - Tidyr separate(data, col, into, sep=”[^[:alnum:]]+”, remove=TRUE, convert=FALSE, extra=”warm”, fill=”warm”)：将一列分隔为几列 data： col ：待分隔的列 into=c(“”,””)：新的列名 sep：分隔符； 若为字符串，作为正则表达式进行匹配（默认） 若为数值型，则根据位置进行匹配（-1代表最后一位） remove =TRUE，移除原来的待分隔的列 convert=FALSE， 若为TRUE，则进行格式转换 separate_rows(data, …, sep=””, convert=FASLE)：把一列分隔为若干行 unite(data, col, …, sep=”_”, remove=TRUE)：把几列合并为一列 … : 指定需要合并的列名 col=”” :合并后新增的列名 1unite(table, century, year, col="year", sep="") 重编码&amp;排名 - 参见 [创建新变量] 合并数据集合并联接 - Join 等价于SQL中的join联接 inner_join(a, b，by=”x1”) ：内联接 合并数据，仅保留匹配的数据 left_join(a, b, by=”x1”) ：以a表为基准表，加入与a表中x1列匹配的数据集b的记录 right_join(a, b, by=”x1”) ：以b表为基准表，加入与b表中x1列匹配的数据集b的记录 outer_join(a,b, by=”x1”)：保留所有数据，所有行 by = NUll（默认）；表示为 自联接，自动选取 [相同的列] 作为索引 by=c(‘col1’, ‘col2’)：两个表中相同名称列的匹配 by=c(‘col1’ = ‘col2’) ：两个表中不同名称列之间的匹配 copy=False(默认)； 若为True, 当a与b不为同一张表，会自动创建一个y的表 集处理 - 行 intersect(y, z)：均出现在数据集y和z中的记录行 union(y, z)：出现在y或者z中的记录，自动删除重复的值 setdiff(y, z)：仅出现在数据集y 而不在z中的记录行 合并与筛选 仅返回匹配列的记录 semi_join(a, b, by=”x1”)： 数据集a中能与b匹配的记录，以a表中”x1”列的值为索引 anti_join(a, b, by=”x1”) ：数据集a中能与b不能匹配的记录，以a表中”x1”列的值为索引 插入行/列 bind_rows(y, z) ：插入新行；把数据集 z 作为新的行添加到y中 bind_cols(y, z)： 添加新列；把数据集 z 作为新的行添加到y中（注意：数据按所在位置匹配） 数据选取子集观测值 - 行 filter(tbl_df, cond &amp; cond) ：根据逻辑条件选取，使用 &amp;或者| 来进行设置 filter(hflights_df, Month == 1, DayofMonth == 1) filter(tbl_df, x %in% c(“a”,”b”)) ：表示x中包含“a”或者“b”的值，返回为逻辑为真 filter(iris,Species!=”setosa”) / filter(iris,!Species %in% c(“setosa”))：排除某些行 ! filter() %&gt;% select(., var)：选中子集中的特定列 对于多条件的选择，需要完整条件的，然后使用集合运算符将条件拼接起来。 &amp; 、| ==、 &gt;=、&lt;&gt;、!= %in% sample_frac(iris, 0.5, replace=False)：按比例进行随机选取 sample_n(iris, 10, replace=True) ：按数量进行随机选取 1## replace = False(默认)，表示是否替换 slice(mtcars, n:n)： 通过行数的位置进行选取， 等价于data[n:n, ] top_n(mtcars, 1, desc(carb) )：选取并排列前n条记录；相当于先按某变量进行排序，然后选择前n条记录。 top_n(tbl_df, n [,wt]) 若为分组数据，则按组排序 12## wt，用于进行排序的变量，可选；若不指定，默认为最后一个变量## -n，从底部开始选择n个数据 子集变量 - 列 Selection drops variables that are not in the selection while renaming retains them select(mtcars, hp) ：通过列名或帮助函数选取列变量 select(tbl_df, mpg:hp)：；选取在mpg和hp之间的连续多个变量 （包含mpg&amp;hp；用:连接 select(tbl_df, -var) / select(tbl_df, -(var1:var4))：通过-来排除某个变量列 select(tbl, xxx )：通过帮助函数进行选择 starts_with(“x”)：列名中以元素x为首的列 ends_with(“x”)：列名中以元素x结尾的列 contains(“x”)：包含元素x的列 matches(“.t”)：符合指定匹配正则表达式的列 one_of(c(“mpg,”hp”) )：名字在指定组中的列，等价于 select(tbl, mpg, hp) everything()：所有列，一般调整数据集中变量顺序时使用 select(df2tbl,y,everything()) #将变量y放到最前 num_range(“x”, 1:5)：选取名为x1、x2、x3、x4、x5的列 select_if()：选取不同条件的列 hflights %&gt;% select_if(is.factor)：选取hflights数据中为因子的列 / is.numeric hflights %&gt;% select_if(function(col) is.numeric(col) &amp;&amp; mean(col) &gt; 3.5)：选取hflights数据中某一变量列 ？？ 唯一值 distinct(iris)：删除重复记录 distinct(hflights_df, Month, .keep_all = TRUE) 1## .keep_all = TRUE,指保留除Month以外的其它列的内容。默认的情况是不保存其他列的。 指各个变量列均相同的记录 unique(x)：只对向量可用；或对各行中各变量完全相同的行取一行 !duplicated(x)： 返回逻辑值；若完全相同则为TRUE，可对data.frame使用 x[!duplicated(x)] ：选取不重复值的值 返回data中所有不相同的值，然后在进行行选取data[x, ] 12345678# 删除各行中变量完全相同的值 = unique(x)data &lt;- data[!duplicated(data), ] --# 返回各列所有相同的值 data[duplicated(test),]# 删除某变量中相同的值data &lt;- data[!duplicated(test[, "var"]), ] # 删除某两个变量完全相同的行 data &lt;- data[!duplicated(test[, c("var1","var2")], ] 创建新变量 根据是否删除原列进行区分 计算并添加新列 若要将多个单元格中的值合并，用stringr包中的str_c() 运用$直接创建 mtcars$new &lt;- sqtr(mtcars$carb) mutate(tbl_df, var3=var1+var2, var4=var3+..)：优势在于可对刚添加的列进行变换 mutate_each(iris, funs(min_rank), [var1,var2])：对每一列运行窗口函数 mutate_all()：对每一列运行窗口函数 mutate_at()：对指定的列运行窗口函数 mutate_if()：对指定类型的列运行窗口函数 窗口函数: min_rank # 排序，并列时，其他序号延号 dense_rank #无缝排序 row_number # 排序。并列时将并列数在前的序号在前 percent_rank # 把数据在[0,1]中重组，并排序 lead # 把除第一个值以外的所有元素提前，最后一位为NA lag # 把除最后一位以外的所有数据延后，第一个元素为NA between() # 数据在a、b之间 ntile # 把数据分为n分 cute_dist # 累计分布 cummean # 累积mean函数 cumsum # 累积sum函数 cusmax # 累积max函数 cusmin # 累积min函数 cumall # 累积all函数 cumany # 累积any函数 cumprod # 累计prod函数 pmax # 针对元素的max函数；返回输入中最大的值，并将其长度自动扩大到输入中长度最大的那个向量 pmin # 针对元素的min函数 ​ 计算并删除其他列 transmute(df, var3=var1+var2)：该函数扩展新变量的同时，将删除原始变量 ；常伴有na.rm=T na.rm= True 计算时排除NA值 1234567891011121314151617&gt; mutate(head(airquality),Temp=Temp - 32) Ozone Solar.R Wind Temp Month Day1 41 190 7.4 35 5 12 36 118 8.0 40 5 23 12 149 12.6 42 5 34 18 313 11.5 30 5 45 NA NA 14.3 24 5 56 28 NA 14.9 34 5 6&gt;transmute(head(airquality),Temp=Temp - 32) Temp1 352 403 424 305 246 34 排名 row_number()：对于相同的值，位置在前的排名在前。 min_rank()：对于相同的值，均显示排名较前的值。 dense_rank()：对于相同的值，类似于min_rank()，均显示排名较小的值；但与后一位之间没有间隔； percent_rank()：将排名缩放为[0,1]之间的值 cume_dist()：累计的分布函数 ntile(x,n)：将x划分为n个组块 123456789101112131415161718&gt; x &lt;- c(5, 1, 3, 2, 2, NA)&gt; row_number(x)[1] 5 1 4 2 3 NA&gt; min_rank(x) # 相同的值，排名较前的值[1] 5 1 4 2 2 NA&gt; dense_rank(x) # 相同的值，排名较前的值，但与后一位没有间隔[1] 4 1 3 2 2 NA&gt; percent_rank(x)[1] 1.00 0.00 0.75 0.25 0.25 NA&gt; cume_dist(x)[1] 1.0 0.2 0.8 0.6 0.6 NA&gt; ntile(x, 2)[1] 2 1 2 1 1 NA 重编码 if_else() &amp; case_when() 适合进行重编码，但缺少对象的输入，可结合within() 因为recode是面向 [向量] 的函数 常规编码 - within / $ within(x, {}) ：对x中的对象做运算 within：能对原始数据进行修改 with()：不能对原始数据进行修改，创建的变量只能在花括号之内有效（即使进行赋值也是如此） 123456789101112131415161718192021222324252627&gt; aq&lt;-with(head(airquality), &#123; + lOzone &lt;- log(Ozone)+ Month &lt;- factor(month.abb[Month])+ cTemp &lt;- round((Temp - 32) * 5/9, 1)+ S.cT &lt;- Solar.R / cTemp + rm(Day, Temp)+ #head(aq)+ &#125;)&gt; aqNULL # 显示为NULL，即aq不存在&gt; aq&lt;-within(head(airquality), &#123; # Notice that multiple vars can be changed+ lOzone &lt;- log(Ozone)+ Month &lt;- factor(month.abb[Month])+ cTemp &lt;- round((Temp - 32) * 5/9, 1) # From Fahrenheit to Celsius+ S.cT &lt;- Solar.R / cTemp # using the newly created variable+ rm(Day, Temp)+ &#125;)&gt; aq Ozone Solar.R Wind Month S.cT cTemp lOzone1 41 190 7.4 May 9.793814 19.4 3.7135722 36 118 8.0 May 5.315315 22.2 3.5835193 12 149 12.6 May 6.394850 23.3 2.4849074 18 313 11.5 May 18.742515 16.7 2.8903725 NA NA 14.3 May NA 13.3 NA6 28 NA 14.9 May NA 18.9 3.332205 Recode(var, recodes, as.factor.result, as.numeric.result=TRUE, levels) ：car包中的Recode函数，用法与car包中的recode函数相同；无需通过指定car包来运行； var：字符型、数值型、因子型 向量 recodes：字符串格式的重编码方式；即编码内容需用 引号&quot; &quot;包括起来，多个条件之间用分号;分隔 单个变量：&quot;0=NA&quot; 一组向量：&quot;c(7,8,9)=&#39;high&#39;&quot; 一组序列变量：&quot;7:9=&#39;C&#39;&quot; 未匹配的值： &quot;else=NA&quot; 字符串变量：&quot;&#39;a&#39;=&#39;b&#39; &quot; 若编码的内容为字符串格式，需要用引号括起来；而最外面的引号也是必不可少的 as.factor.result = T/F；当输入的var为因子格式时，默认为TRUE,否则默认为FALSE as.numeric.result=T/F；当输入的var为数值格式时，默认为TRUE,否则默认为FALSE levels：可选的，默认为原本的顺序 recode(.x, a= ‘apple’, .default = NULL, .missing = NULL)：保持原有的顺序水平； recode_factor(.x, …, .default = NULL, .missing = NULL, .ordered = FALSE)： .x : 进行处理的向量 对于数值型向量，你可以基于位置替换它 对于字符串，你可以基于字符串的名称来替换它 指定替换的变量为字符串 a = &#39;apple&#39; : a为对象中要变更的值；’apple’为变更后的值 .default=NULL: 对未匹配的值不做变更； .default=NAcharacter ：用NA替换未匹配的值 .default= ‘others’ : 可以指定替换的值 .default = level(x) ：支持对默认的顺序进行因子化 指定替换的变量为数值 `2` =20 或 20L 若对象x为向量is.vector() ，若不加L，则对于未匹配的值默认用NA替换；加L，对其他未匹配的值不做变更； ？？？ .missing = NULL(默认) ：对缺失值NA不做处理，默认为NA； .missing = “missing”：指定具体的值对NA进行替换 若不指定替换的变量，默认按照位置顺序进行重编码；但对未匹配的值默认用NA替换 .order=FALSE(默认)：若为TRUE，则创建有序的因子 当输入的向量是可比较的，它的因子会被重新定义为默认的 123456789101112131415161718192021222324252627## 指定替换的变量 - 字符串&gt; x &lt;- sample(c("a", "b", "c"), 10, replace = TRUE)&gt; x [1] "a" "a" "b" "b" "a" "b" "a" "a" "a" "c"&gt; recode(x, a = "Apple") [1] "Apple" "Apple" "b" "b" "Apple" "b" "Apple" "Apple" "Apple" "c" &gt; recode(x, a = "Apple", .default = NA_character_) [1] "Apple" "Apple" NA NA "Apple" NA "Apple" "Apple" "Apple" NA ## 指定替换的变量 - 数值型&gt; x &lt;- c(1:5)&gt; recode(x, '2'= 20L, '4' = 40L) # 加上L之后，对未匹配的值不做变更[1] 1 20 3 40 5&gt; recode(x, '2'= 20, '4' = 40)[1] NA 20 NA 40 NA## 若不指定替换的变量，默认按照顺序进行重编码&gt; recode(x, "a", "b", "c") # 但对未匹配的值默认用NA替换[1] "a" "b" "c" NA NA NA #--------recode_factor------------------------------------------#&gt; recode_factor(factor(letters[1:3]), b = "z", c = "y") # 当输入的向量是可比较的，它的因子会被重新定义为默认的[1] a z yLevels: z y a 条件编码 if_else(cond, true_value, false_value, missing=NULL)：对于逻辑值的重编码 cond : 条件 missing = NULL(默认)； 若对缺失值替换为某个值，需指定 “x” 123456789101112131415## 常规重编码leadership&lt;-within(leadership,&#123;agecat&lt;-NAagecat[age&gt;75] &lt;- “Elder”agecat[age&gt;=55 &amp; age&lt;=75] &lt;- “Middle aged”agecat[age&lt;55]&lt;-“young”&#125;)y$new&lt;- if_else(y$new&lt;=1, 10, y$new)# 搭配within使用within(y,&#123; carb &lt;- if_else(carb&lt;=2,20,carb)&#125;) case_when(cond ~ “”, TRUE ~ “”)：多条件的重编码 类同于SQL的case when；多条件之间按顺序进行执行。 ~ ：表示赋值 TRUE ：类同于 Else的功能 配合list() 与 !!!，将语句进行拼接，然后执行 12345678910111213141516171819202122232425262728x &lt;- 1:10case_when( x %% 3 == 0 ~ "fizz buzz", x %% 5 == 0 ~ "fizz", x %% 7 == 0 ~ "buzz", TRUE ~ as.character(x) )## 创建一个新变量starwars %&gt;% select(name:mass, gender, species) %&gt;% mutate( type = case_when( height &gt; 200 | mass &gt; 200 ~ "large", species == "Droid" ~ "robot", TRUE ~ "other" ) )# 配合list() 与 !!!，将语句进行拼接，然后执行patterns &lt;- list( # 先将语句拼接 TRUE ~ as.character(x), x %% 5 == 0 ~ "fizz", x %% 7 == 0 ~ "buzz", x %% 35 == 0 ~ "fizz buzz")case_when(!!! patterns) # 用 !!! 执行 缺失值检查与判断 is.na(x)：逻辑判断 colSums(is.na(x))：求该列缺失值的数量 mean(is.na(x))：求该列缺失值的比例 is.nan(x)：判断不可能值 is.infinite(x) ：判断无穷值 移除 na.rm=T：在计算之前将缺失值移除，可用在函数内部 na.omit(x)： 移除所有含缺失值所在的行 [删除整行] 12 # 用来存储没有缺失值的数据newdata &lt;- na.omit(mydata) 缺失值重编码 na_if(x, y)：把对象x中的y替换为NA 12345&gt; x &lt;- c(1, -1, 0, 10)[1] 1 -1 0 10&gt; na_if(x,0)[1] 1 -1 NA 10 coalesce(x,y)：把对象x中的NA替换为y x, y ：均为向量 123456789101112131415161718# 把x中的NA替换为y&gt; x &lt;- sample(c(1:5, NA, NA, NA)); x[1] 5 3 NA 4 2 NA 1 NA &gt; coalesce(x, 0L) [1] 5 3 0 4 2 0 1 0# 将NA匹配为对应位置的值 （y, z 两者长度必须相同）&gt; y &lt;- c(1, 2, NA, NA, 5)&gt; z &lt;- c(NA, NA, 3, 4, 5)&gt; coalesce(y, z)[1] 1 2 3 4 5# 配合list() 与 !!!，将语句进行拼接，然后执行vecs &lt;- list( c(1, 2, NA, NA, 5), c(NA, NA, 3, 4, 5))coalesce(!!! vecs) 其他 pmin/pmax(.., na.rm=FALSE)：返回输入中最小/最大值的向量组合，并将其长度自动扩大到输入中长度最大的那个向量 min/max()：只返回单一长度的值 12&gt; pmax(5:1,10) [1] 10 10 10 10 10 概述函数 - summairse summarise(iris, avg=mean(Sepal.Length)) ：对数据进行概述，并创建新的子集 （将数据概括为单行数值） summarise_all(.tbl, .funs, …)：对每一列运行概述概述 summarise_each(iris, funs(mean)) ：对每一列运行概述函数 summarise_at(.tbl, .vars, .funs, …, .cols=NULL)：对指定的列运行概述函数 summarise_at(mtcars, vars(hp,mpg), mean, …, .cols=NULL) vars() : 表示需要进行概述的列 .funs的用法 直接在函数中写明需要运行的函数 summarise(., vars(), mean) 结合funs写出调用的函数 summarise(., vars(), funs(mean)) summarise_if(.tbl, .predicate, .funs)：对指令类型的列运行概述函数 funs的用法 123456&gt; summarise_all(df1[,-1],funs(mean,sum)) # 若出现两个及以上的函数，列名中自动添加后缀&gt; summarise_all(df1[,-1],funs(sum(.*2))) # 所有数据用.表示&gt; summarise_all(df1[,-1],funs(medi=median)) # 指定得到的列后缀名&gt; summarise_all(df1[,-1],funs("in"=median)) # 或者加引号 (因为in在R中表示其他含义)&gt; mutate_all(df1[,-1],funs(.^2))&gt; min / max / mean / median / sd / var / sum / IQR (向量的四分位距离) n （向量中元素的个数）/ n_distinct （不同元素的个数） first / last / nth （向量的第n个值） 12345678910111213141516171819202122232425262728name1 &lt;- c("Bob","Mary","Jane","Kim")weight &lt;- c(60,65,45,55)height &lt;- c(170,165,140,135)weta &lt;- 1:4df1 &lt;- data.frame(name1,weight,height,weta);df1## 需指定要进行计算的列summarise(df1,avg_weight=mean(weight),avg_height=mean(height)) ## 对选出来的 [每一列] 都进行计算summarise_all(select(df1,-1), mean)## 配合vars函数，一次选择多列summarise_at(df1,vars(weight,height,weta),mean) summarise_at(df1,vars(weight:weta),mean)u &lt;- c("weight","height")summarise_at(df1,vars(one_of(u)),mean) # 可以接字符串向量summarise_at(df1,u,mean) # 也可以直接接字符串向量summarise_at(df1,u,mean,trim=1) # mean的参数可以接在后面summarise_at(df1,vars(contains("eig")),mean) # 匹配含有的summarise_at(df1,vars(matches(".t.")),mean) # 使用正则表达式summarise_at(df1,vars(starts_with("w")),mean) # 匹配以此为开头的summarise_at(df1,vars(ends_with("ht")),mean) # 匹配以此为结尾的summarise_at(df1[,-1],vars(everything()),mean) # 选择所有列## 检验出所有是数值的列，全部求均值summarise_if(df1,is.numeric,mean) count(iris, Species [, wt=Sepal.Length]) ：计算变量中每一个特定值的行数/频率/求和 （带或不带权重） 若出现wt，表示进行 [求和] ； 12345678910## wt="" 可选；若缺失，则计算频率count(iris, Species) # 分组计算Species列中各类别的频量；类似于基本函数包中的table函数## wt="",若指定某一列，则会通过计算非缺失值的总和来比对权重(weighted)；# wt = var2 ， 表示按var中的类别来分组，计算var2中未缺失值的对应的 [求和]count(iris, Species, wt=Sepal.Length) # 即按Species分组后，求对应Sepal.Length中的值的总和--等价于 iris %&gt;% group_by(., Species) %&gt;% summarize(., sum(Sepal.Length))## sort = False 计数 length(x)：返回一组向量（包括列表）或因子的长度 12345678## 返回对象的个数 或者 某个列的的观测值行数length(object/data$col)# 返回非空置的行数length(na.omit(object/data$col))# 返回对象的唯一值的行数 length(unique(data$col/object)) # 等价于 n_distinct() nrow() / ncol()：总行数/总列数 n()：返回观测行的行数，不能单独使用（可被用于 summarise()、mutate()、filter() ） n_distinct(x, na.rm=FALSE)：返回不重复的行数 sum(!is.na())：计算非空值的行数 分布 mean(x, na.rm=FALSE) ：返回均值； mean(!is.na()) ：非空值的均值 median(x, na.rm=FASLE)：返回中位数 sum(x, na.rm=FALSE)：返回求和 range(object)：值域 colSums(x) / rowSums(x)：各列/行求和 colMeans(x) / rowMeans(x)：各列/行求均值 位置与序列 first(x)/last(x)：最前/后的值 nth(x, n)：从开始数的第n个值 quantile(x, probs=seq(0, 1, 0.25), na.rm=FALSE)：显示x中处于[0,0.25,0.5,0.75,1]的值 probs = seq(0,1, 0.25) 或者 = c(0.25,0.5) ：指定要显示的所处位置的值 min/max(x, na.rm=FALSE)：返回最大/最小值 趋势 IQR()：四分位距离 var()：方差 sd()：标准差 mad()：绝对均方差 数字处理 options(digits=7) ：默认有效位数为7位 trunc(x)：取整 trunc(3.531) [1] 3 floor(x)：向下取整 ceiling(x)：向上取整 sigif(x, digits=n)：指定最小值的有效位数 abs(x)：绝对值 x %% y ：求余数 x^n：幂次方 exp(x)：指数 ln(x) / log(x, y)：对数 sqrt(x)：平方根 分组 group_by(.data, …, add=FALSE)：根据Species进行分组 group_by(mtacrs, cyl,vs ) … ： 表示用于分组的列名； add= FALSE(默认) FALSE，表示会覆盖原来的分组，相当于对源数据重新分组； 若为TRUE,则不覆盖，相当于在原来的基础上在进行分组； 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&gt; ## 先对mtcars按cyl 进行分组&gt; by_cyl &lt;- mtcars %&gt;% groupby(cyl) &gt;&gt; # --------add=FALSE (默认)-------------------------#&gt; by_cyl %&gt;% group_by(vs, am) %&gt;% # add默认为FALSE，即对 mtcars进行 vs,am 两个变量进行分组；&gt; summarise_at(.,vars(new),funs(mean) )&gt; # A tibble: 4 x 3&gt; # Groups: vs [?]&gt; vs am new&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;&gt; 1 0 0 1.737751&gt; 2 0 1 2.115355&gt; 3 1 0 1.404061&gt; 4 1 1 1.177520&gt;&gt; # 与如上等价&gt; &gt; group_by(mtcars, vs,am) %&gt;% summarise_at(.,vars(new),funs(mean) )&gt; # A tibble: 4 x 3&gt; # Groups: vs [?]&gt; vs am new&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;&gt; 1 0 0 1.737751&gt; 2 0 1 2.115355&gt; 3 1 0 1.404061&gt; 4 1 1 1.177520&gt;&gt; # --------add=TRUE ----------------------#&gt; &gt; by_cyl %&gt;% group_by(vs, am, add=TRUE) %&gt;% &gt; + summarise_at(.,vars(new),funs(mean) )&gt; # A tibble: 7 x 4&gt; # Groups: cyl, vs [?] # 分组变量有3个&gt; cyl vs am new&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;&gt; 1 4 0 1 1.414214&gt; 2 4 1 0 1.276142&gt; 3 4 1 1 1.177520&gt; 4 6 0 1 2.149830&gt; 5 6 1 0 1.500000&gt; 6 8 0 0 1.737751&gt; 7 8 0 1 2.414214&gt;&gt; &gt; group_by(mtcars, cyl,vs,am) %&gt;% summarise_at(.,vars(new),funs(mean) )&gt; # A tibble: 7 x 4 &gt; # Groups: cyl, vs [?] # 分组变量有3个&gt; cyl vs am new &gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;&gt; 1 4 0 1 1.414214&gt; 2 4 1 0 1.276142&gt; 3 4 1 1 1.177520&gt; 4 6 0 1 2.149830&gt; 5 6 1 0 1.500000&gt; 6 8 0 0 1.737751&gt; 7 8 0 1 2.414214&gt; &gt; ungroup(iris)：移除数据框的分组信息 group_by_all()： group_by_at(.tbl, .vars, .funs = list(), …, .add = FALSE)： group_by_at(df, vars(accept,weight)) %&gt;% summarise(., var=mean(height),count=n()) group_by_at() 与 group_by 的区别，仅在与at中将分组的变量用 vars() 包含起来，利于查看 group_by_if()： iris %&gt;% group_by(., Species) %&gt;% summarize(., sum(Sepal.Length))：对每一个分组分别进行概述计算 iris %&gt;% group_by(., Species) %&gt;% mutate(., …)：按组计算新变量 分组&amp;概述函数12 plyr - 分隔-操作-合并 用来切割、计算、合并数据的包 在一个函数内同时解决spilt-apply-combine的三个步骤 Spilt：把要处理的数据分割成小的片段 Apply：对每个小片段进行操作 Combine:把片段重新组合 a*plyr(.data, .margins, .fun, …, .progress = “none”) d*plyr(.data, .variables, .fun, …, .progress = “none”) l*plyr(.data, .fun, …, .progress = “none”) 首字母代表输入的待处理的数据格式，第二个字母-输出的数据格式； ddply(.data, .variables, .fun = NULL, …, .progress = “none”, .inform = FALSE, .drop = TRUE, .parallel = FALSE, .paropts = NULL)：以ddplyr为例 ddply()函数会自动的将分割后的每一小部分的计算结果汇总，以data.frame的格式保存。 123## .data, 要操作的原始数据集## .variables, 是按照某个/几个变量，对数据集 [分割]; 比如按照year对数据集分割，可以写成.(year)的形式## .fun, 具体执行操作的函数，对分割后的 [每一个子数据集，调用该函数] 控制流重复和循环 for结构 ：for (var in seq) statement 循环执行某语句statement，直到某个变量var的值不在包含在序列seq中为止 1for (i in 1:10) print("hello") while结构 ：while (cond) statment 必须确保cond中的条件语句能【被改变】（即它在某个时刻不在为真），否则循环将永不停止 条件执行 if-else结构：if (cond) statement 或者 for (cond) statement1 else statement2 1if (!is.factor(grade)) gerade &lt;- as.factor(grade) else print("Grade already is a factor") ifelse结构：ifelse(cond, statement1, statement2) 12ifelse(sorce&gt;0.5, print("Passed"), print("Failed"))outcome &lt;- ifelse(socre&gt;0.5, "Passed", "Failed") switch结构：根据一个表达式的值选择语句执行switch(expr,...) 12345678910111213feelings &lt;- c("sad", "afraid")for (i in feelings) print( switch(i, happy = "I am glad you are happpy", # 用逗号分隔 afraid = "There is nothing to fear", sad = "Cheer Up", angry = "Calm down now" ) )## expr之后的…是expr的可能取值，后接等号（=），表示执行的行为## switch语句中，不同条件末尾要有 [逗号]## 若expr为文本形式，输入时需加 [引号] 逻辑判断 which()： 返回为真的逻辑对象，允许对数组array使用 自编函数 结构 1234myfunction &lt;- function(arg1, arg2, ...)&#123; statements return(object)&#125; 数据拆分 pretty(x, n) ：将连续型变量x分给为n个区间； cut(x, n,[order_result=TRUE])：将连续型变量x分割成有n个水平的因子]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《麦肯锡精英的39个工作习惯》_摘抄]]></title>
      <url>%2F2017%2F07%2F23%2F%E3%80%8A%E9%BA%A6%E8%82%AF%E9%94%A1%E7%B2%BE%E8%8B%B1%E7%9A%8439%E4%B8%AA%E5%B7%A5%E4%BD%9C%E4%B9%A0%E6%83%AF%E3%80%8B_%E6%91%98%E6%8A%84%2F</url>
      <content type="text"><![CDATA[《麦肯锡精英的39个工作习惯》 _ 大岛祥誉 “解决问题的基本在于保持疑问。怀疑这个结论是不是最佳结论。这样一来就能够找到解决问题的线索。” —— 大前研一 重视”成果” 问题究竟是什么？ 掌握真正的问题 对问题进行整理 收集信息 提出假设 验证假设 思考解决办法 实行解决办法 保持”从零开始”。考虑什么才是真正的问题？这项问题今后有没有继续的必要？ 分清”重视效率” 还是 “重视思考”。时常思考，自己需不需要在这个事情上花费这么多时间。 工作能力不强的人，往往本末倒置。在别人看来，往往不理解 “为什么他要在这样的工作上浪费那么多时间”。——思考自己有没有这样的事情 追求效率，指的是那些花费时间毫无意义，越快做完越能够提高生产效率的工作 将要点分为”三部分” 摸清上司的类型。[ 去回顾 《向上管理》] 情感型 or 理智型； 单独型 or 复合型 情感型：直率、感情丰富、重视共鸣；不知追求结果同样重视过程，用自己的感性来描述自己的经验和方法 理智型：自制、重视理论、准备周全、讨厌借口和浪费时间，对逻辑讨论有反应 | | 情感型 | 理智型 || —- | ——————– | —————— || 谈话准备 | 正是开始对话之前，寒暄几句 | 直奔主题 || 谈话节奏 | 把节奏交给对方，配合对方的节奏进行交流 | 自己掌握 || 谈话内容 | 可以坦白说出自己的请求 或者让对方来决定 | 由自己展开内容；插穿假设的方式来沟通 | 第一句话应该表明交谈的主题。 对于这个主题的事项，上司会根据他的理解来安排处理的时间。 关于XX事情，可以占用您一分钟时间吗？ 邮件使用。主题 + 简洁 + 尽快回复 邮件要尽快回复 回复内容需要一些时间考虑，也应该立即回复一封邮件说明 “我要考虑一下，明天给你回复” 明确邮件主题。 邮件要尽可能简洁，为了使对方在最短的时间了解邮件的要点。 将主张放在疑问里 灵活运用面谈、电话和邮件。针对不同的情况选择不同的沟通方式。 负面的 或 紧急的 信息一定要当面沟通，其次为电话。千万不要用邮件。 邮件无法传达紧张感与迫切感 打电话时慢点说话，等待对方的反应。 对方还要讲下一句话，而自己常常却插了进去。以为对方讲完了。 打电话之前思考，”这件事情真的有打电话的必要吗？” 决定打电话之前，自己先理一下思路 等对方把话说完之后，自己再开口。说话慢一点，再慢一点。 将自己的主张放在疑问里，以此引导对方自己说出你要的结果 通过 “提问” 的方式引导对方的思维； 而该 问题的答案是你心里已经知道的结果 认可、共鸣、激励 明确会议的 “目的” 与 “目标状态”。 目的：开展会议的原因(why) 目标状态：会议要达到的结果 将会议的 “目的”与”目标状态” 写在会议的白板上/显眼的地方 控制感情 用5分钟时间自省，最适合用来进行 专注性思考 的训练 5分钟后你等的人出现了，你的思考没有得出任何结论的情况下被中断了。看上去好像浪费了时间，但实际上你的发散思维在后台已经开启。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《麦肯锡精英的48个工作习惯》_摘抄]]></title>
      <url>%2F2017%2F07%2F22%2F%E3%80%8A%E9%BA%A6%E8%82%AF%E9%94%A1%E7%B2%BE%E8%8B%B1%E7%9A%8448%E4%B8%AA%E5%B7%A5%E4%BD%9C%E4%B9%A0%E6%83%AF%E3%80%8B_%E6%91%98%E6%8A%84%2F</url>
      <content type="text"><![CDATA[《麦肯锡精英的48个工作习惯》_户塚隆将 人际关系 相处时注意变换场合。这样利于加深对彼此的认识。 不管多忙，每周都要跟工作无关的人见一面；和他们交换信息，这是有效拓展视野、扩展人脉的好方法。 如果对对方有好感，一定要约定近期再见面。如果你初次见到对方就对他产生了好感，那就应该在下周或近期在见面。 对交谈抱有诚意，并真诚提问。初次见面时应记住对方的名字，接下来就是努力相互了解。而且你应该采取主动，要首先对对方产生兴趣。 磨炼内在与外在 不要说 “不好意思”， 也不要把 “对不起” 挂在嘴边，要多说 “谢谢你” “不好意思” 的便利之处，在于它既不能充分地表达感激之情，也不能充分地表达歉意 每当你要说 “不好意思” 时，停下来想一想。如果要表示感谢，就说 “谢谢你”。如果要表达歉意，那就说 “对不起” 读书后，花三倍的时间思考。思考的时间一定要大于阅读的时间。 读报的时候，要思考 “大家的反映”。 读完后要思考人们对这则消息的反映； 因为通过这些，你可以预测市场的动态 读新闻，要注意各条新闻的登载方式 至少一次读2份 报纸/网站； 一份作为信息的主要来源，一份找出与他的区别 思考每条新闻给人们带来的影响，努力探寻自己的答案，这样就能渐渐形成自己的看法。 运用图表来整理逻辑，强化结论。 整理想法的三个过程： 先写出头脑中浮现的想法 不要介意逻辑构成、因果关系、先后次序和语言表达 不断审视整理，改写成 “金字塔结构” 的模式 用 “三个关键” 锻炼思考的能力 如果一个内容需要超过3条以上的信息来表达，这个时候你应该思考自己到底要表达的是什么，它的目的与意义是什么。 护理鞋子。出门前把鞋子理干净。 不被时间操纵 无论遇到什么情况，都提前10分钟到场。这个是基本的基本。 根据事项的 [优先程度] 和 [工作所需的时间] 为中心来对工作分类 先做 优先程度 [高]，所需时间 [长] 的项目A 其次 优先程度 [高]，所需时间 [短] 马山能完成的项目B 再次 截止日期延后的 优先程度 [高]，所需时间 [长] 马山能完成的项目A 然后 优先程度 [低]，所需时间 [短] 马山能完成的项目C 最后 优先程度 [低]，所需时间 [长] 的项目D 沟通创造成果 接到任务之后，当场确认任务信息。 接到任务之后，要当前去 [界定问题]。 在什么背景下S提出的任务，目的是为了解决什么问题。5W2H 产出的要求/标准 （可通过类举之前的工作产出来对比，确定产出的要求） 截止时间 接到任务后，5分钟内马上开始安排进程。 目的是确认问题、界定标准、确认是否有遗漏的信息、预估时间。如果目前还有工作在进行，就暂时先放一放。然后抽出5分钟时间，将精力集中在刚刚接到的任务上 再次确认指示；如果工作刚开始时都是疑问，一定要立刻找上司加以确认。 因为工作初期出现的问题，越是尽早确认，越能将问题的影响控制在最小范围内。 如果等到第二天早上再对初期出现的问题确认，对你工作能力的评价就会降低 制定一份工作计划，并对完成工作所需的时间进行预判 将截止日期提前一天；这会使你自觉加快速度。 回复邮件的速度 = 别人对你的评价。这与你设置固定时间接收邮件没有然后进行回复，并不冲突。 把回复邮件的时间当做你的名片；如果对方等了很久还是没有收到回信的话，他就会担心自己之前的邮件是不是么有发送成功，进而去通过其他方式进行确认 当回复邮件需要花费大量时间时，先发送一份言简意赅的邮件告知对方 当需要整理思路时，要敢于搁置一晚再回复 向上司报告、联系、交谈时要先发制人，并穿插假设来说服对方 先报告、联系，然后交谈；报告不是目的，联系也不是目的；报告不是单方面的，在报告的同时还要听取对方的意见、调整工作的方向。 通过假设 “我打算…… 你觉得怎么样” 向上司报告工作要选在第二天一早 挤出泡沫 - 输赌候群症 超出对方的期待值 可以及时调整工作方案；如果等到下午才报告，若要调整方案则时间就很少了。 早晨的环境安静，可以进行充分沟通 对待资料与会议 把自己的资料/产出视为自己的产品。你的作品就是代表了你这个人。 在制作PPT之前，先关掉电脑，在纸上绘制出草图，理顺你的逻辑，构造你的呈现。 把注重细节贯彻到底 注重统一感 最后阶段无视资料内容，只做机械地校对；（一次只做一件事情） 会议上一定要发言，否则就跟缺席一样 出席会议的人不是被赋予了发言的权利，而是被分配了发言的义务。 会议的目的是要求全体出席者对会议作出了某系贡献 职业技能 通过多次 [写下] 相同的目标来进行目标管理；不要将回顾笔记作为目的，而是要重视书写的过程。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[张开双臂，拥抱她]]></title>
      <url>%2F2017%2F07%2F15%2F%E5%BC%A0%E5%BC%80%E5%8F%8C%E8%87%82%EF%BC%8C%E6%8B%A5%E6%8A%B1%E5%A5%B9%2F</url>
      <content type="text"><![CDATA[生命的诞生，始于跳动的脉搏，那是从无到有的变化，至此带来了新的灵魂。 张开双臂，拥抱她​ 生命的诞生，始于跳动的脉搏，那是从无到有的变化，至此带来了新的灵魂。 ​ 呱呱坠地，睁开眼的一瞬，全是陌生的一切，但又是那样的新颖。那时的我，仿佛拥有无上的力量，呼风唤雨，无所不能。我以为世界只有这么小，都在我的掌握中。直到我迈出第一步的瞬间，才发现原来路有那么长，怎么走都走不完；原来天空有这么远，怎么望都望不到边。 ​ 端坐学习，翻阅书籍，原来还有那么多没有见过的事，没有听过的人。从尧舜禹帝到飞上太空，原来过去有这么长，原来还有比天空更远的地方，原来生命如此短暂。至此，我努力探索，尽情生活，为了在这短短的流年里，留下只属于我的印记。 ​ 走出山林，踏入河流。涌进大厦，奔走路途。原以为要去经历多彩的人生，想不到却跌入了名为无奈的河流。随波逐流，恍恍惚惚。 ​ 不曾想过，原来我能够离天空那么近。当我探头往外望时，纯白的云朵和蔚蓝的天空，仿佛拨动了心底的琴弦。猛然间，发现自己停滞太久，活在所谓的城市里。但其实，不过是一颗无趣的灵魂，朝生暮死。当再次踏上大地的时候，却俨然丢弃了那副皮囊，准备重新出发。 ​ 所谓意志，所谓坚持，到头来都是脆弱的另一个名字。那个踏上征途时的自己，已经记不清他的模样，就只是记得好像有这么一个人。这一次，是被拖入温热的沼泽。好像一切并没有那么糟糕，好像继续下去也可以。但其实，看似平稳的世界，正在慢慢下降，只不过你无法觉察到而已。 ​ 原以为就会这样过活下去，但一个新的生命突然闯入了我的世界。她是那么柔弱，那么娇小，但又那么充满活力。巨大的能量被唤醒，我迈出脚步，挣脱束缚。因为我知道，我要用尽一切的力量去保护她。 ​ 望着她远去的背影，默默送她离开。我知道，她长大了，她要去探求自己的世界。原来，自己的容颜已经衰老，原来时间走的这么快。来不及感伤，庆幸发现这一切的自己，因为那一刻我知道，在余下的岁月，我要更加真实地去感受天空，感受寒冷，感受爱，感受逝去的青春。 ​ 如果没有迈出那第一步，我就不知道原来自己并不是唯一； ​ 如果没有翻开第一本书，我就不知道原来生命是如此渺小与短暂； ​ 如果没有那一次近距离的接触天空，我一定会是茫茫砂砾中那最平凡的一颗； ​ 如果没有新生命的涌入，我一定是沦陷于温暖的河床； ​ 如果没有她的远去，我一定不会如此真切地感受这个世界。 ​ 如果…… ​ 恰好都不是如果。正是因为那些突如其来的变化，让我的世界如此不同；正是因为那些意想不到的意外，让我有如此自豪而绚烂的人生。我感谢出现在我生命中的那些变化和意外，如果可以，我愿意张开双臂，拥抱她。 —— 写于2017.07.15]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《刻意练习》_读书笔记]]></title>
      <url>%2F2017%2F07%2F11%2F%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《Secrets From The New Science of Experience》(刻意练习) - Anders Ericsson (安德斯.艾利克森) 刻意练习的原则是通过研究杰出人物发现的。 成人最佳的学习方式是在情景中学习，而非独自练习。 年龄越小，大脑的适应性越好。有些能力只能在6岁/12岁/18岁之前培养。 学习中会经历的几个阶段 从0到1：从完全不会，到慢慢掌握技能，并且能够完成 “自动” 地完成，而非刻意的完成。 在球场上你的所有动作都是自动做出来的，你的表现也被人接受，不需要太多的思考。你可以真正在球场上放松。 这个阶段，即使你对自己的水平不是很满意，但你的进步是实实在在的。你已经掌握了容易的技能。 从1到N：提高技能的熟练度，但存在一个上限 你的能力随着练习的增加而增加，但那你很快会发现你依然有一些弱点，不论你多么经常地学习，这些弱点总是暴露出来 这是大多数人会遇到的一个瓶颈。而且很多事情实际上也只需要我们达到中等水平就可以了。 一旦你达到令你满意的技能水平，并能做到自然而然地表现你的水平，你就已经不再进步了。人们通常错误地理解这种现象，认为继续联系就能提升水准 “天真的练习”， 基本上只是反复地做某件事情，并指望只靠那种反复，就能提高表现和水平。 从N到N+1：克服自己的弱点，超越瓶颈，把技能上升到高水平 刻意练习的特点 刻意练习发展的技能，是已经拥有一套有效训练方法的技能。 刻意练习发生在舒适区之外，但并不会太远。并且要持续不断地尝试刚好超出当前能力范围的事物。 在 “舒适区” 做事，叫生活；在“学习区”做事，才叫练习。有效的练习必须发生在“学习区”，一旦你学会了某个东西，就不该在上面继续花时间，要立即转入下一个难度。 心理学家把人的知识和技能分为层层嵌套的三个圆形区域：最内一层是“舒适区”，是我们已经熟练掌握的各种技能；最外一层是“恐慌区”，是我们暂时无法学会的技能；二者中间则是“学习区”。 组块化地学习。 刻意练习需要把训练的内容分成几不同层次渐进提升的小模块，每次针对每一个模块进行重复联系，重复练习正确掌握一个模块后再进行下一个模块的练习。 有明确可衡量的特定目标。 只有结果可控的领域，刻意练习才有用。 需要专注和有意识地行动。 学习时间长不等于用功，决定性因素不是学习时间，而是学习环境。刻意练习不好玩，如果你在打打闹闹中享受练习的过程，那就不是刻意练习。你必须在一个不受打扰的环境中单独学习，调动大量的身体和精神资源，全力投入。特别专注地干一件事才是最酷的。 包含反馈，并且是及时的反馈。 刻意练习的关键是随时获得有效的反馈。你需要一个旁观者，他不见得水平比你高，不需要经常跟你谈心，不用激发你的战斗热情，但他必须给你提供三步反馈：演示一遍正确动作，表现一遍错误动作，再演示一遍正确动作。 有效的反馈，应该满足三个条件： 及时，一旦不对马上就有人给你指出来；超脱，对事不对人，反馈者不把你的错误上升到“你这个人行不行”的层面；试错，你犯错误的代价很小。 刻意练习的原则 确定谁是杰出人物 理想的情况是找到客观的、可复制的测量指标，为了能够一致地从人群中找到最优秀的人 找出杰出人物与其他人物的差别 思考他们都做了什么 思考哪些训练方法帮助他们实现了卓越 最佳方法是找到优秀的导师 摘抄 考试是最好的反馈。熟悉并不等于理解，想要真正理解，唯一的办法是考试和测验。没有经过测验，你的知识只是幻觉。 刻意练习最为关键的一点，是敢于迈出从舒适区往外走的那一步。你不但应该在“学习区”刻意练习，你的研究、工作和娱乐都应该在“学习区”。 遇到瓶颈时，试着从不同角度来里思考/练习，而不是去做更难的事情。 大脑的机制：如果你足够多地练习某件事情，你的大脑会改变某些神经元的用途，以帮助完成那些任务。 记忆是取决于背景的。 *一组句子你可以记忆，但若打乱句子中各个字的顺序，凌乱地排列，可能你就无法记忆了。 于刻意练习，被误读最久的一个概念是“一万小时定律”。事实上，想把自己变成高手，光知道“一万小时”毫无意义，因为真正的关键根本不在训练时间，而是训练的方法 。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[文件名命名规范]]></title>
      <url>%2F2017%2F07%2F11%2F%E6%96%87%E4%BB%B6%E5%90%8D%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[文件名的命名规则。 命名规则 只使用小写字母，不使用大写字母 可移植性：inux 系统是大小写敏感的，而 Windows 系统和 Mac 系统正好相反，大小写不敏感。 易读性：小写文件名通常比大写文件名更易读，比如accessibility.txt就比ACCESSIBILITY.TXT易读 易用性：某些系统会生成一些预置的用户目录，采用首字母大写的目录名。 文件的命名规范：项目命名词（或项目编号）_文件命名词_日期_V版本号.文件后缀 文件名称由四部分组成：第一部分为项目名称或编号，第二部分为文件的描述，第三部分为当前文件的日期，第四部分为文件阶段标识加文件后缀 如果是同一版本同一阶段的文件修改过两次以上，则在版本标识后面加以数字标识，每次修改数字加1； 当有多人同时提交同一份文件时，可以在版本标识的后面加入人名或缩写来区别。 文件夹的命名规范：项目命名词(或项目编号)_文件夹名称_起始日期_结束日期 举个文件夹命名例子：Prj_PC PIS Project_20101112_完成日期。第二个下划线后为空，等待工作结束时，添加工作结束的日期。 用下划线_ 作为分割符，用连字符- 作为联接符（同一个属性的内容） —— [ 个人习惯 ] 1_工作学习_jupyter-notebook_20170711 实例 版本号式命名法 12XX平台交流材料_V1.0.pptxXX平台交流材料_V1.1.pptx 用V1.0、V1.0.0或者V1.0.0.0作为起始的版本，可根据需要自行控制，然后对其中的需要变更的数字进行+1操作即可 日期命名法 12广东办事处周报_20140117.xlsx广东办事处周报_20140220.xlsx 综合命名法 123XX平台交流材料_20170102_v1.0XX平台交流材料_20170102_v1.1XX平台交流材料_20170103_v1.2 技巧增加特殊符号，用于标识不同状态的文件： ！（叹号）——标注重要的文件或者文件夹 #（井号）——标注等待处理的文件或者文件夹 @（@号）——标注正在处理的文件或者文件夹 对那些处理完毕的文件，应该放在合适的文件夹当中，因此不作特殊符号的标注。 这些符号的使用，是作为文件命名的首字应用，如此一个文件夹中，标注特殊符号的文件会排列在一块，查找和使用起来会比较方便。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[个人日志_2017年6月总结]]></title>
      <url>%2F2017%2F07%2F09%2F%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97_2017%E5%B9%B46%E6%9C%88%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[6月总结 掌握正确的学习方法，运用严谨的思维组织与表达体系完成思考与输出。 【运动&amp;健康】9分 对于新年目标的达成情况：有约3周的时间早睡早起，还是不错的战绩。 | 做晨间日志 | 早睡早起 | 晚睡早起 || :—: | :–: | :–: || 25天 | 14天 | 11天 | 从6.4开始学习游泳，截止到月底，共学习3次；完成了蛙泳腿部动作的学习，进度上还算合理。对于学习时间上，基本保持住1周1次的进度。 6月不在乱来，算是达到了目标。 剪头发：结果剪的太短；但其实本可以防止这种事情发生，原因在于自己发现了问题，但没有及时行动去制止。 【生活&amp;娱乐】8分 参加读书会《非常历史说——简述欧洲史》的分享，地点在大悦城-西西弗书店；自1500年以来的全球发展，由三个国家进行主导 17世纪 - 荷兰：开启了全球商业帝国 18-19世纪 - 英国：第一个工业化、立宪制度国家 20世纪 - 美国：宗教灵魂之国 学习魔方，最终仍然么有学会。 看了电影《异形：契约》，小时候对它留下的恐怖的阴影，但这一次完全么有那么恐怖与害怕。当然也主要是由于电影基本都在讲剧情，没有太多怪物的场面。 吃了两个 “大餐”：周童鞋、杨童鞋 【阅读&amp;学习】10分一个学习与阅读的忙碌月份。这个月，顺利通过了”证券从业资格”的考试。完成了内容整理与输出的思考； 阅读郑也夫《信任论》《代价论》，重读 芭芭拉 • 明托《金字塔原理》，完成了读书笔记的同时还形成了自己的思考体系。研究学习与阅读的方法，阅读《学习之道》《刻意练习》，使用 Anki 软件，从根本上提高学习的效率。 研究 “稳重”的特性，准备改变自己的行为方式。 对比了博客、微信、知乎各个品台的功能，决定将博客作为知识储备，微信作为知识输出。 分别描述它们的特点，最后要决定如何去使用。 阅读郑也夫《信任论》、《代价论》，后续因为忙于提高自己思维的组织与表达能力，所以没有花时间去做读书笔记的整理，把这个事项排在了后面。 参加 “证券从业资格” 的考试，并顺利通过。 将软件的认识真正落实到行动上。对于Python与R的选择，最终决定数据处理用Python，可视化用Excel。其次可视化用 R (单独处理) 对于选择用Excel，是认识到当前做的分析报告都是基于word/PPT/Publisher，而对此兼容性最好的是Excel中的图表 图表的原则：简洁，一个图表表达一个观点； 而对于需要绘制复杂图形的软件，目前还没有应用的余地 当前的数据量，并没有大到Excel无法处理的地步 这个月，对于Pytonn 与 R 的使用仍然处在选择困难期，一方面期望Python的兼容性，一方面想要 R 中ggplot2作图的美观性。为了能将两者完美的结合起来，花费了大量的时间研究如何在Pythton中调用R。 魔法命令 - %R / %%R； 兼容性较好，会作为一个方案 可视化直接调用R进行处理 rpy2 - 作图时会出现打开另一个窗开，虽然有代码可以解决，但不易记忆 ggplo2包 - Python中无法识别中文字符 研究 “稳重” 的特质以及具体的行为表现方式，通过可落实的行为来改变自己。 [思考先于言行] 一定是思考先行。 对事情有一个基本的判断 + 思考自己的目的&amp;背景 + 思考对方的目的&amp;背景 + 降低语速、直视对方 + 思考事情的发展趋势 时隔7年再次阅读《金字塔原理》，深受感触，完成《金字塔原理》_读书笔记 ，同时形成自己的思考体系。 纵向：任意层次的思想必须是下一层次的概括 横向：同一层次的内容必须属于同一逻辑范畴 横向：同一层次的内容必须按照某种逻辑顺序进行组织 收听知乎Live《如何自学计算机课程》，并做了读书笔记；其中谈到的学习方法，让我很受用。并让我去关注学习&amp;阅读的方法，进而去阅读《学习之道》《刻意练习》；最终输出 《学习的方法》 认识大脑对于学习这件事情的处理方式（工作记忆/长期记忆、构造组块） 学习的过程就是新知识与已有知识产生联接的过程 发散思维不仅是一种重要的思维，而且在学习过程中担任非常重要的角色；必须要留有时候给发散思维对知识进行粘合与整理。 通过 回想 而非重复阅读来加深记忆。 【工作】6分 前往上海清算所拜访，了解关于当前市场的运作情况，以及引入个人投资者的可行性；但自己的对话能力太弱，全程几乎没有说几句话； 参加讲座《期货，你不知道的那些事》，认识到期货市场远远比现货市场更加复杂，不仅如此，还有一个强力的监管者 “证监会”。 分享 “贝叶斯分类”。刚开始举的例子出现了错误，其实这正好说明了自己并没有特别充分地理解；同时也说明没有很好地去准备； 换工位；虽然只是一件小事，但反应了自己的一些问题。对事情如何发展一定要自己去判断；当涉及对方的提议时，思考对方对这个建议的重视度，他的处事风格，已经这个事情可能的发展情况。 对于分析报告，由于逻辑与表达的原因，改了好几个版本。非常惭愧。痛下决心要改过来。阅读《金字塔原理》，购买”麦肯锡思考类”书籍，奋起学习。 【友情】 9分 认识两位新伙伴：朱童鞋、周童鞋 由于学游泳的关系，认识了新的伙伴 - 朱童鞋；接触下来，还是挺合拍的。 收到周童鞋的邀请，说为了感谢我的笔记，邀请我一起去看电影《异形》；但之后相约一起吃午饭都是她主动提出的，这点上自己做的不太好。虽然彼此都是第一次见面，但这并不影响我们的沟通；整个下午，看了电影，吃了东西，逛了大悦城，还是挺开心的。 老伙伴的邀约： 邀约瑶瑶，第一次约的时候刚好不巧，原本说约下周五，但最后不了了之 与杨童鞋一起逛新天地、K11、日月光；说好了这次是TA请吃饭，但自己好像太过于在意消费的问题，生怕对方多花钱，但这个时候应该是由对方去决定，而非自己替对方决定说吃什么。 约李童鞋，但因第二天要去苏州徒步，故无缘相见 约周童鞋一起去看”减压展” ，因TA要备考，所以下次再约。 【亲情】5分 虽然自己很少主动打电话回家，但对父母的态度更加缓和，没有之前的不耐烦。话说这个不耐烦好像是好多年前的事情了，但在最近一年自己开始有所察觉与感悟。 【投资】 0分 对于5月遗留的问题没有去实施。（去了解个人贷款的途径与方式、金额及利率；） 【感恩回报】7分 虽然记录的事情只有一件，但这是有意识地表达感谢。 感谢一起学游泳的朱童鞋，特意带了樱桃给我。樱桃很甜，我告诉他。 【成功小事】5分 周末早起成功过 6月没有乱来，自己的计划得以完成 【自我思索】10分 当你发现事情并没有向你期望的方向发展时，要及时制止。明明已经观察到了不对劲的地方，但却保持了默许的态度。——剪头发 将软件的认识真正落实到行动上。对于Python与R的选择，最终决定数据处理用Python，可视化用Excel。其次可视化用 R (单独处理) 对于选择用Excel，是认识到当前做的分析报告都是基于word/PPT/Publisher，而对此兼容性最好的是Excel中的图表 图表的原则：简洁，一个图表表达一个观点； 而对于需要绘制复杂图形的软件，目前还没有应用的余地 当前的数据量，并没有大到Excel无法处理的地步 去上海清算所拜访，发现自己的对话能力太弱。之后看电影《异形》的过程中，欣赏稳重的人的行为表现，所以花时间研究稳重的具体行为，并要把自己塑造成稳重的个性。自我塑造，我真正想要的自己应该是如电影中的角色那样，生活中可以风趣玩耍，但对于事情，你要有自己的坚持与判断，不是严肃，而是认真。 （回想电影中准备赴任舰长时，他的表现） 软件的全部价值在于应用，帮助你解决问题。 睡前阅读好像已经半个多月都没有实施了。因为不仅是学习，更关键的是为了早睡。 随身带本书，可以在坐地铁的时候拿来翻一翻，的确如此。好习惯，要养成。 学习的时候，往往会发觉时间不够，还有好多想阅读的书，还多待办事项没有完成。但同时，有一个问题，就是你花在提高你工作能力方面的时间有多少。是不是花费了太多时间在你感兴趣的领域，而这些本应该花在工作能力提升上的时间。 对事情如何发展一定要自己去判断；当涉及对方的提议时，思考对方对这个建议的重视度，他的处事风格，已经这个事情可能的发展情况。 自己在其他主题上的记录太少，要用心去记录，而不是当成一项任务去完成。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《金字塔原理》_读书笔记]]></title>
      <url>%2F2017%2F06%2F29%2F%E3%80%8A%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E3%80%8B_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《The Pyramid Principle》（金字塔原理） - Barbara • Minto（芭芭拉 • 明托） [ 思考先于写作/表达 ] - 在开始写作前，先将自己的思路组织成金字塔结构，并按照逻辑关系的规则进行检查与修改。 你要强迫自己先想后写、先想后做、先向后说。 1. 表达的逻辑从整体介绍了金字塔结构的运用方式。包括使用金字塔的原因、金字塔的内容与构建方法、序言的撰写以及思维的呈现。 为什么要用金字塔结构归类分组，将思想组成金字塔 大脑会 “自动” 把具有 “共性”的任何事物组织在一起； 共性：具有某种相似的共同点 或 所处位置相近 大脑一次记忆不超过 7 个思想、概念或项目；大脑比较容易记住的是3个，次之5个，绝对不要超过7个 当我们把9个概念分类后提高一个层次变为3个项目时，但闹需要处理的内容就只有3个 因为处于较高层次上的思想总能提示下一层次的意思 自上而下表达，结论先行 清晰的顺序：先提出总结性思想，再提出被总结的具体思想 受众的大脑只能逐句理解作者/演讲者表达的思想。他们会假定一同出现的思想在逻辑上存在某种关系。如果你不预先告诉他们这种逻辑关系，他们会自动从中寻找共同点，将你表达的思想归类组合，以了解各个组合的意义 读者可利用的思维能力有限：(1) 用于识别和解读读到的词语；(2) 找出各种思想之间的关系； (3) 理解所表述思想的含义 通过有效的方法表达你的思想，减少读者在前面两项活动上的时间与精力，从而使读者能够用最少的脑力理解你表达的思想 自下而上思考，总结概括 你的思维总是从最底部的层次开始，将句子按照某种逻辑关系组成段落，然后将段落组成章节，最后将章节组成完成的文章；而代表整篇文章的是金字塔最顶端的一个思想。 仔细回想你的实际思考过程，你在总结主要思想时的确使用了这种自下而上的方式。 假设你要将6个句子组成一个段落。为什么要将这6个句子组织在一起，而不包括其他句子？原因自傲与你认为这6个句子之间有某种逻辑关系。而这种逻辑关系要求所有6个句子共同解释或支持由其组成的段落所表达的单一思想。通过这种方法，你可以把3个段落而不是其他段落组织在一起。将章节组成文章也按照这个思路进行。 每一篇文章的结构必定只支持一个思想。因为你总是要不断地对思想进行概括和归纳，直到没有可以与之关联的思想能继续概括。 思想符合如下规则能实现好的表达==【写作之前，先将你的思路放入到金字塔结构中，并根据如下规则进行检验。若不能符合，说明你的思路存在问题，需要调整思路】== 纵向：任一层次的思想必须是其下一层次思想的概括 横向：每组中的思想必须属于同一逻辑范畴 横向：每组中的思想必须按照某种逻辑顺序组织 横向：同一逻辑范畴 若希望将某一组中思想的抽象程度提高一个层次，那这一组中的思想必须在逻辑上具有共同点 对 “同一逻辑范围” 的具体解释：如果某组思想中的第一个思想时做某件事的一个原因，那么其他思想也必须是做同一件事的其他原因；如果第一个思想是某个过程的一个步骤，其他也必须是步骤； 横向：按某种逻辑顺序组织 必须有明确的理由说明为什么把第二个思想放在第二位 组织思想的4中逻辑顺序 你写作的逻辑顺序展现了你组织思想时的分析过程 演绎顺序：大前提、小前提、结论 时间（步骤）顺序：第一、第二、第三 结构（空间）顺序：波士顿、纽约、华盛顿 程度（重要性）顺序：最重要、次重要 金字塔的内部结构【在开始将思想组织成金字塔之前，首先你必须梳理你想要表达的思想】 金字塔中的子结构，能够加快你树立思想的过程： 主题与子主题之间的纵向关系 (疑问/回答式对话) 各子主题之间的横线关系 (演绎、归纳) 序言的叙述方式 (讲故事 - SCQA) 重要的是，了解读者最早提出的疑问，确保你组织和呈现的思想与读者有关联 纵向关系【金字塔中的 “思想”，指的是向受众发出信息并 “引发疑问” 的语句】 【你的每一个表述都应当引发读者的疑问，而你也必须在这一表述下的横向结构上逐个回答读者的疑问】 一些很明显的事实可能需要经过很长的时间才能被人们所认知；阅读的过程就是一个典型的例子。 文章都是一维的：一个句子接一个句子，在纸面上基本呈现出纵向向下的结构。 这种纵向延伸掩盖了一个事实，即思想时位于不同的抽象层次上的。根据这一事实，大主题下的任何思想都同时与文章的其他思想发生着纵向与横向的联系。 通过 疑问/回答式的对话，能使你的读者按照你的思路产生符合逻辑的反应 金字塔中的 “思想”，指的是向受众发出信息并 “引发疑问” 的语句 表达思想的主要目的，向受众传达新的信息；而这样的标出，必然会使对方就其逻辑性产生疑问。作为文章的作者，你必须在该表述的下一层次上横向地回答读者的疑问。但是，你的回答仍然是向读者传递他所不知道的信息，这又使读者产生新的疑问，于是你又在再下一个层次回答新的疑问。不断按照 “ 引起读者疑问并回答疑问” 的方式写作，直至读者不会再对你的新表述提出任何疑问为止。至此，作者就可以离开金字塔结构的第一个分支，返回关键句 (Key Line) 层次，继续回答由金字塔顶端中思想引发的初初始疑问。 吸引读者的全部注意力： 在做好回答问题的准备之前，避免引起读者的疑问 在引起读者疑问之前，避免先给出该问题的答案 横向关系横向结构上的表述不仅能回答上一层次引起的疑问，而且还必须保证表述符合逻辑。 演绎 第一个思想是世界上某种现象的表述 第二个思想是对第一个思想的 [主语] 或 [谓语] 做出的表述 第三个思想从以上两个思想中得出结论 归纳 组合中的思想相互关联，必须保证逻辑上有共同点，并且可以用一个 [名词] 来表示 序言的结构【序言的目的 $\to$ 确定初始问题】 即促使你思考做这件事的目的与原因是什么。 只有当引发 疑问/回答式对话的话语与读者有关，才能吸引读者的注意力。保证出现相关性的唯一办法，就是使这句子直接回答你所发现的读者头脑中已存在的某一疑问。 读者只有在需要了解问题的答案时才会去找答案； 文章的序言可以通过追溯问题的起源和发展来确定这一问题。 通过 讲故事 的方式进行呈现，读者会更易于理解信息 Situation：背景 Complication：冲突 Question：疑问 Answer：回答 S-背景与C-冲突，是为了说明做这个事情的Why-原因； 可以理解为，通过S与C将Why拆解 通过讲故事的序言模式，会促使你思考做这件事的目的与原因(Why) 叙述式的序言说明了 “冲突” 发生的 “背景” ，以及 “冲突” 引发的 “疑问” ，而这个 “疑问” 正是你的文章将要 “回答” 的。一旦你提出了对该 “疑问” 的 “回答”，就回使读者产生新的疑问，于是你就要在文章结构的下一层次上回答这些疑问 如何构建金字塔当前已经掌握的信息 金字塔顶端有一个包含 主语和谓语 的句子 这个句子的 主语 就是文章的 主题 这个句子是对读者头脑中已经存在的某个疑问的回答 回答这个最初的疑问，就是你写作的动机 自上而下法 先利用序言的结构将头脑中的观点逐个梳理出来 再开始进行书写 目的是为了确保你了解自己将要回答哪些疑问。而一旦确定了主要疑问，其他因素就很容易在金字塔结构中各就各位。 简要步骤 提出主题思想 设想受众的主要疑问 写序言（背景 - 冲突 - 疑问 - 回答） 与受众进行 疑问/回答式对话 对新的疑问重复进行 疑问/回答式对话 具体步骤 画主题方框，填入要探讨的主题 金字塔结构最顶端的结构。 若不确定主题是什么，跳到第2步 确定读者 ，并设想主要疑问 ，然后写出来 确定文章将面向哪些对象？ 希望回答读者关于该主题的哪些疑问？ 若无法确定，跳到第4步 写出对该疑问的回答 若还不清楚答案，请注明你有能力回答该疑问 说明 “背景” 证明现阶段你能够清晰论述该主要的疑问和答案；具体做法： 把要讨论的主题与”背景”相结合，作出关于该主题的第一个不会引起争议的表述。 指出 “冲突” 你作出了第一个不会引起争议的表述，开始了与读者进行 疑问/回答式对话。 考虑 “背景” 中发生了哪些 “冲突”，以致引发读者的 “疑问” 检查 “主要疑问” 和 “答案” 【确定读者的疑问与你之前设想的疑问是否一致】 在对 “背景” 和 “冲突” 的介绍中，应当直接导致读者提出主要疑问（已在步骤2中列出） 否则，必须要重新介绍 “背景” 中的 “冲突”，使之可以直接导致读者提出主要疑问。 若 “背景” 中的 “冲突” 与 主要疑问对不上，则必须重新构思 自上而下构建金字塔 P35 图3-1 金字塔结构中互相关联的各要素 自下而上法 当你无法确定主题、读者心中的疑问，无法构造金字塔的顶端，可以向下移动一个层次，从关键句层次上着手。 步骤 列出向表达的所有观点 行动性思想 描述性思想 找出各要点之间的逻辑关系 得出结论 初学者事项 一定先搭结构，先尝试自上而下法 序言先写背景，将背景作为序言的起点 一旦你知道自己想在序言的主体部分说什么（背景、冲突、疑问和回答），你就可以根据你所希望产生的效果，按任何顺序写出这些内容。选择不同的顺序会影响文章的风格 多花时间思考序言，不要省略 序言是你思考为什么采取行为的原因/目的 将历史背景放在序言中 正文部分应当只包括思想，思想只能以逻辑方式相互联系 序言仅涉及读者不会对其真实性提出质疑的内容 在关键句层次上，更宜选择归纳推理而非演绎推理 序言的具体写法 以讲故事的形式编写序言； 序言应概述读者已知的信息，并将这些信息与文章将要回答的疑问建立联系；然后作者就可以把全部精力放在回答问题上 序言的讲故事结构 讲故事的形式，是为了让读者抛开复杂的思想，专注于你的话题。同时激发读者兴趣，吸引注意力。 “背景” ：一个特定的时间和空间 “冲突” ：能推动情节发展，并引发读者 “疑问” 的因素 （并不是严格意义上的所谓冲突） “疑问” ：读者产生的 “疑问” “回答” ：仅对该疑问的 “回答” ( 为什么 - 回答必须是原因 ) 序言不同顺序的呈现形式 结构必须是 ”背景 - 冲突 - 疑问 - 回答“；但呈现的顺序可以有所变化 标准式：背景- 冲突 -答案 开门见山式：答案 - 背景 - 冲突 突出忧虑式：冲突 - 背景 - 答案 突出信心式：疑问 - 背景 - 冲突 - 答案 关键句要点 不仅回答由文章主题引起的新疑问，还要呈现文章的框架结构。 列出的关键句要点必须让读者在开始阅读的30秒内就能了解你的全部思路。随后的内容只是解释/支持这些观点，就能顺利地将读者请到一个适当的位置上。 关键句要点，必须是完整的思想，完整的句子。而不仅是一个名词。例如，”成功的前提和条件“等 序言与要点 全文序言：提示全主题的信息 要点引言：提示这一主题与全主题的关系 序言的目的是 ”提示“ 读者而不是 ”告诉“ 读者某些信息 序言必须包含讲故事的三个要素，”背景“、”冲突“、”答案“ 全篇文章的中心都依赖于读者提出的第一个疑问，即初始疑问。这种疑问全篇只能有一个，并且是通过序言来引出的。 序言的常见模式常见的4类问题 What - 我们应该做什么？ 不知道做什么？ 有多个可供选择的内容，不知道做哪一个？ How - 我们应该如何做？ Do or not - 我们是否应该这样做？ Why - 为什么会发生这种情况？ 关于解释做法的方式 （我们应该如何做？） 告诉读者他们之前没做过的事 告诉读者如何正确做他们正在做的事 分别列出两个对象之间的流程/因素 两者之间的差异决定了关键句的要点 涉及两个对象之间的比较时 关于比较选择的方式（我们应该做什么） 一旦选择了某种方案，必须回答 ”为什么此方案优于其他方案？“ 当事先没有可选方案时，即回答 ”我们应该做什么“ 最好的方法：围绕评估的标准（即该行为产生的结果）撰写关键句要点。 若有最佳方案，则表明选择方案C的主要原因，放弃方案A与B的主要原因来进行（而非通过否定A与B，来确定C；我们选择C是因为它能解决问题，根本没有必要提及A和B。若读者要求给出可供选择的方案，很可能时因为他的问题没有被清晰地既定，即R2是模糊不清的；这种情况下，读者真正想要的不是所有可选的解决方案，而是可供选择的R2） 如果任何一种方案都无法达到你的目标/无法准确描述目标，此时你的目标是围绕 “替代目标”写作，而不是 “替代方案”； 关键句应该为 ”选择哪种方案，取决于你希望达到的目标“ 各个方案之间相互比较意义不大，重要的是如何与R2比较。由于没有明确而的R2，我们在做的其实是界定它应该是什么 下一层次的关键句应该是各方案产生的结果 “如果你希望取得稳定的销售额，应该选择方案A” 转化为替代目标的写作 P76 图4-11 对”疑问”的回答 关于介绍流程的改进 想象改变前和改变后流程中的每一步，确定这些改变就是你想要的 读者对新旧流程都了解。他的问题：是否应该实施新流程 或 应该怎样实施 读者不了解流程是怎么工作的，更不知道问题所在。他的问题：准备怎么改变，以及为什么要改变 演绎推理与归纳推理 在金字塔横向结构中，同一组的思想之间存在着逻辑顺序，具体的顺序取决于该组思想之间的逻辑关系是演绎推理关系、还是归纳推理关系。 演绎推理：位于演绎推理过程上每个思想均有前一个思想导出，重点是演绎推理过程的最后一步，即由 ”因此“ 得出的结论。 归纳推理：将一组具有共同点的思想、事实归类分组，并概括共同性 演绎推理 演绎推理比归纳推理更容易实现，人们在思维时会更多地使用演绎推理。但在写作时却显得比较繁琐。 在关键句层次上尽量避免使用演绎推理，而用归纳推理取而代之。 演绎推理的步骤 第一个思想是世界上某种现象的表述 第二个思想是对第一个思想的 [主语] 或 [谓语] 做出的表述 第三个思想从以上两个思想中得出结论 也可以是如下三个步骤： 出现的问题或存在的现象 产生问题的原因 解决问题的方案 演绎推理的参照标准 演绎推理的过程不要超过4个步骤 推导出的结论不要超过2个 归纳推理 同一主题的信息都集中在一起，不同主题之间的界限非常明确。 完成归纳推理需要的两项技能： 正确定义该组思想 准确识别并剔除该组思想中与其他思想不相称的思想 通过自下而上提问的方式来检查你的推理；并且概括的思想不能与该层之下的思想抽象层次过多。 归纳推理的步骤： 最重要的是找到一个能够表示该组所有思想的名词； 这个词必须是单一名词 因为所有表示一类事物的词都是名词 该组思想中必定包含两个及以上该类思想 找不出一个与该名词不相配的思想 eg：计划、步骤、损害方式 演绎推理与归纳推理的区别 当你进行演绎推理时，推理过程的第二个思想必须是对第一个思想的主语或谓语的表述； 如果不具有这一特点，就不是演绎推理；而是归纳推理 当你进行归纳推理的时候，同组中的思想具有类似的主语或谓语，同时你应当能用一个单一的名词来概括，以检查你归类是否恰当 归纳过程中，通常需要保持主语不变，谓语改变；或者主语改变，谓语不变 来进行归纳； 不同情况下对 [关键句层次] 选择不同的逻辑方式【对关键句层次，尽量使用归纳推理法】（不包括关键句层次以下的层次） 对于演绎推理 与 归纳推理的争论，常见的问题可能是： 应该先告诉读者为什么要进行改革，然后告诉读者要采取的措施？ 应该先告诉读者必须进行改革及进行的措施，然后再告诉读者为什么要采取这样的改革？ 先说明what再说明why P87 配图 5-5 用归纳法论述更清晰、更简洁 建议最好先说明行动 (what)，后说明原因 (why)； 大部分情况下，采取哪些行动才是读者最关心的； 极少情况下，会关系采取行为的原因 采取演绎推理的两种情况： 当你在金字塔顶端表达的思想与读者期望的或预想的不一样时，建议采取先说明原因，在表述具体行为的方式。即读者更关心”为什么“的情况下，需要使用演绎表达法； 若不先给予解释，读者无法理解需要采取的行动。 商务文章的读者很少属于以上两种情况。 在某个段落中使用演绎法是合适的，读者也是容易理解的；若在较高的层次上，归纳法总是比演绎法更容易理解。 如果读者必须读完好几页才能找到演绎推理的第一步和第二步之间的关系，读者一般是无法理解演绎推理之间的关系的。 2. 思考的逻辑写作时机的掌握： 当你对文章结构的思考已经深入到关键句层次的下一个层次时，你就应该开始写作了。 更低层次的思想不要在构思阶段完成，而应放在实际的写作过程中完成。 罗列并不是一个好的表达方式 罗列似乎已经是一种普遍的倾向。虽然罗列不失为一种将思想排列出来并审视的方法，但我们不能止步于此，应当进一步思考，以保证每组中的各个思想之间确实存在某种内在的逻辑关系，然后明确说明这种逻辑关系的隐含意义。 研究各个组的思想是思考过程的重心，但也是一项艰难的工作，因此经常被忽略。 完成思考需要的两个步骤，这一过程称为 ”冷静思考“ 确定逻辑顺序 概括各组思想 应用逻辑顺序归纳分组活动仅有的3种方式： 前后因果关系（时间/步骤顺序） 将整体分割为部分、或将部分组成整体 将类似事物按重要性归为一组 每个问题都具有一个共性，但所具有的共性的程度各不相同； （如果不存在这种差异，就无法从这方面进行区分） 逻辑顺序呈现的是一个过程，而这个过程取决于你需要回答的问题。 根据逻辑顺序呈现内容 P127 表6-2 需要回答的问题 时间顺序 按照采取行动的顺序依次达到某一结果的行动 根据结果寻找原因 同一组行动是为了达到同一个特定的结果。如果某个过程或流程较长，且包括许多步骤，那就会存在多个层次的原因和结果。事实上，每组思想最好不要超过4个或5个。如果某一组思想超过5个，那么其中某些思想之间很可能缺乏紧密的联系。 即使各个步骤的却应该按照以上顺序进行，但这些步骤可能并不处于同一个抽象层次上。其中一些步骤是为了实现另一些步骤；所以，在总的过程中存在一些具有完整结构的子过程。 检验各行动的因果关系，以此来进行分组：想象采取行动之后产生的结果，这个结果是为了先于另一项行动，还是为了实现另一个行动 结构顺序 结构顺序就是当你使用示意图、地图、图画或者照片想象某事物时的顺序。 某事物可以是概念性的，可以是一个物体，也可以是一个过程。但这个事物必须被合理地划分入不同的部分。 严格遵从 [MECE原则] “创建” 逻辑结构 相互独立 - Mutually Exclusive ； 没有重叠；各个部分之间是否有明显的排他性以及分割点； 完全穷尽 - Collectively Exhaustive ； 没有遗漏；各部分加起来是否能组成整体 当一个事物可以被多种方式划分时，采取哪种划分方式其实是一种倾向性的呈现。 如果划分时强调活动本身，那么各部分展现的是一个逻辑过程（流程），因此采取时间顺序。 如果划分时强调地点，那么各部分展现的是一个地理状态，应采取结构顺序。 如果划分时强调与某一产品或市场有关的活动，那么划分就是一种归类。各部分应按照重要性顺序进行排序。 按照 [自上而下、自左而右] 的方式 “描述”逻辑结构 程度顺序重要性顺序。一组因为具有某种共同特点而被组合在一起的事物所采取的特点； 创建适当的分组 明确指出每组中的所有问题具有共同特性，并确保所有具备该特性的问题被列入该组。 根据重要性程度进行排序，先重要后次要 除非是处于情绪的考虑，采取将最重要的放在最后的方式产生戏剧性的效果 概括各组思想概括各组思想的行为实际上是完成思考的行为。需要确保思想属于同一组，应抽象、提炼、概括思想精华； 总结句避免使用 “缺乏思想” 的句子 “缺乏思想” 的句子不能激发读者往下读，还可能使读者根本无法了解你表达的意思 “缺乏思想” 的句子会掩盖思考不完整的事实，使你错失一个进行有逻辑性和创造性思考的机会 当你得出一个概括性的思想，可用两种方式延续你的思路： 对其做进一步评价（演绎法） 找出与之类似的思想（归纳法） 使用这一过程之前必须确保原有的概括性思想时合理的 思想表达的方式与分组无关， 可以是行动性语句（告诉对方做什么），也可以是描述性语句（告诉对方关于某事的情况） 概括行动性思想 （介绍采取的行动、行为、动作、步骤、流程）时，应说明采取行动后取得的结果（效果、达到的目标） 概括描述性思想（介绍背景、信息）时，应说明这些思想具有的共同点的含义 总结句要说明行动产生的结果/目标，这些结果必须是可衡量的 当你罗列出一系列你认为实现某一目标应当采取的行动时，你必须先指出这些行动应当达到的结果，然后才能判断是否遗漏了任何行动。 理顺思路最简单的办法：想象自己确实采取了这些行动，根据这些行动产生的明确结果，修改行动步骤的措辞 帮助你梳理思路、轻松表达的技巧： 在将各行动（步骤、流程）联系起来之前，先用明确的语句描述各行动（步骤、流程） 找出明显的因果关系组合，尽量将每一组中的行动控制在5个以下 直接从这些行动、步骤，概括行动的结果与目标 总结句要使用明确的词汇/语句 对于要达到的结果，必须是可衡量的。可以用某种明确的方式判断是否实现了这一结果。 对于这个结果，进行反向思考。想象采取了这些行动，这些行动能达到概括的结果吗？ 并以此来修改行动性思考的措辞 eg: (1)为了达到目标X，需要做Y； (2)想象已经做了Y，能达到目标X吗？ 使用明确的语言表达最终结果是非常必要的。除非你使用的语言达到了这一要求，否则你根本无法客观判断你列出的行动、步骤，是否包括了所有应当包括的步骤。 区分行动步骤的层次 两个行动之间，先做哪个是可以选择的，属同一层次 两个行动之间，必须要先做哪个的，属不同层次 对于没有本质区分的各个行动，根据产生的结果进行分类。 直接概括行动的结果 该组行动、步骤之间必须相互独立(不重叠)，完全穷尽(无遗漏) 总结概括性语句，必须说明完成各行动步骤之后导致的直接结果，且是可衡量的； 对于这个结果，进行反向推导。想象采取了这些行动，这些行动能达到概括的结果吗？ 并以此来修改行动性思考的措辞 eg: (1)为了达到目标X，需要做Y； (2)想象已经做了Y，能达到目标X吗？ 使用明确的语言表达最终结果是非常必要的。除非你使用的语言达到了这一要求，否则你根本无法客观判断你列出的行动、步骤，是否包括了所有应当包括的步骤。 可通过分别确定主语、谓语的方式来拆解各个复杂的句子 P148 ​ 找出结论之间的共性 列出一些可能值得思考的思想 （常止于第一步） 找出这些思想之间的共同点，并证明这些思想确实属于同一类，因而有理由与其他思想分开（关键1） 明确说明这些思想之间的共同点所具有的普遍意义，即推出一个新思想（关键2）（至此，才完成思维过程） 结构上的共性 针对同一类主语 针对同一类谓语（动作或对象） 具有同一类隐含的思想 “同一类” 不是指完全相同，而是指属于同一范畴，能够用同一个名词表示的 如果无法在一组被列为”问题”、”原因” 或 “结论” 的思想中找出明确的逻辑关系，这说明其中必定存在问题。你必须重新思考。 【找到概括性语句的主要价值，可以帮助你发现自己的真实思想。 】 完成提炼总结概括的完成思考过程：图7-10 的呈现形式，虽然简单，但简洁地表达了核心思想；“富有思想” 的图表 富有思想的图表 P159 图7-10 有吸引力的市场 不能简单地把一系列思想堆放在一起，并假定读者能够看出其中的意义。每一组思想都隐含着一个总结性的思想，这个思想是能够呈现该组思想之间关系的本质。 进行任何一次分组，都要问自己 “为什么我只列出了这些思想，而不是列出其他思想呢？“ 这些思想都具有某种共性，而且是以这种方式相互关联的仅有的一些思想 在这种情况下，该组的概括性思想应当是该组思想共性所隐含的意义 这些思想都是实现某一结果而必须同时采取的行动 这种情况下，该组的概括性思想应当是表明采取以上行动后产生的直接结果 3. 解决问题的逻辑 序言的作用 $\to$ 对问题定性 金字塔结构的作用 $\to$ 分析问题和寻找解决方案 提高报告的秘诀： 界定问题 有条理地搜集和分析数据，转化为金字塔形式 界定问题存在问题，是因为现状的结果与期望的结果之间有差距； 非期望结果R1 - Undesired Result 期望结果R2 - Desired Result 界定问题的框架要去了解问题存在的背景，以及在其中的发展历史。 问题，是你已有的（现状）与想要的（目标）之间存在的差距。这种差距是来自某一背景，并在一系列特定的条件下产生的。所以，了解在其背景中的发展历史，是确定差距的性质和把握其重要性最基本的过程。 你的解决方案所处的阶段 不知道做什么？ 给出What 不知道这个措施对不对？ 给出 Do or not 不知道怎么做？给出How 做了之后，仍然没有达到结果？Do what, not success 展开问题的各要素4个要素： 序幕 - Opening Scence - 某一特定的场景 困扰 - Disturbing Event - 推动剧情发展的因素，并引发非期望结果R1 某件事情的发生打破了原本稳定的环境 困扰的来源：内部 、 外部因素 现状，非期望结果 - R1, Undesired Result 目标，期望结果 - R2, Desired Result 可衡量的具体目标；若R1是机会，则希望利用它 展开问题的各个部分，目的是搭建一个粗略但清晰的框架，帮助找出你理解问题上的差距，并围绕这些差距写序言 通过各要素界定问题 P168 图8-2 问题源于现有背景 发掘读者的疑问最常见的问题 不知道如何从R1（现状）到R2（目标） - what 知道如何从R1到R1，但不确定是否正确 - do or not 知道从R1到R2的正确方案，但不知道如何实施 - How 最常见问题的变形 知道从R1到R2的解决方案，并且已经实施，但由于某种原因行不通 - do it , not success 确定了好几个方案，但不知道选哪一个 - choice 不常见的情形： 知道R1，但不能具体描述R2，所以无法找到解决方案 知道R2，但不清楚自己是是否处于R1（典型的标杆对比） 初始问题的种类 P177 图8-10 确定读者究竟想找哪些问题的解决方案 开始写序言 结构化分析问题分析问题的方法 提出假设 设计试验，根据产生的结果排除一个/多个假设 通过试验得出明确的结论 采取补救措施 设计诊断框架 根据仅有的3种逻辑顺序来设计 - (1)因果/时间关系；(2)结构顺序；(3)归类分组 寻找因果关系 财务结构 - 涉及数学公式，均可用因果关系归类 eg: 利润 = 收入 - 成本 任务结构 - 结构顺序 归类分组 将所有可能的原因按相似性分类；前提是这种预先的分类有利于综合分析各种事实 4. 演示的逻辑分别介绍了书面呈现、PPT呈现的一些基本原则 书面上呈现金字塔 应该让读者在30秒之内理解作者的整体思维架构，包括序言、中心思想和关键句要点。 突显文章的框架结构 当支持关键句的段落只有1个时，只需使用下划线即可。 当支持关键句的段落超过2个时，有多种方式。 多级标题 一个标题代表的思想是一组思想中的一个，一组中所有思想共同解释/支持该组的整体思想 不同层次的思想，用不同的标记区分 层次越低的思想离左侧越远 同一层次的思想采用同一表现形式 相同的思想应使用相同的句型（同一组内之间） 所谓句型，指需与第一句中第一个词的类型（动词/名词）保持相同 协调各项活动 （第一个词为动词） 实施各项改革 标题与正文应分开考虑 每组标题前应集中提前介绍 大标题下应该有一段话，集中介绍下面标题的主要内容；不要紧接着文章题目写每一章的标题，也不要每一章标题写每一节标题 标题用词应提炼思想的精髓 下划线 下划线是为了方便阅读和提高阅读速度 上下文之间要有过渡 各种不同的过渡方法是为了抓住读者的思想，把他拉回到他应该属于的地方，让读者理解你想说的内容 总结各部分内容 当一个章节特别长或特别复杂时，可以停下来做一个完整的总结后再继续往下写； 说明下一步行动 如果你的文章是建议读者采取一系列你认为他有可能采取的行动那个，你就有必要说明下一步的措施。并且可以以 “下一步措施” 来作为章节的题目； 在PPT演示文稿中呈现金字塔 文字幻灯片应该只包含最重要的、经过适当分组和总结的思想 演示文稿应图文并茂，使用各种图表相配合 文字幻灯片 说明框架结构 强调重要的结论、观点 图表：解释复杂的关系、原因 房间里听众最感兴趣的不是幻灯片，而是你。幻灯片只是视觉上的辅助手段。因为，你说的和你演示的应该有明显的区别 理想的比例，图表90%，文字10% 设计文字幻灯片清楚你要说的内容 不要把文字浪费在那些可以通过口头表达的转折性或介绍性语言上 文字幻灯片最好只用于强调金字塔中的主要论点 清楚你要演示的内容 每次只演示和说明一个论点 除非你想先列出摘要或列表中的一组论点 论点应使用完整的陈述句，而不是 “缺乏思想” 的标题性语言 文字应尽量剪短 使用简单的数字。 数字越简单越好，比如490万美元就比487987美元更容易让人记住 字号应足够大 一次只阐述一个内容 P244 图11-3 用幻灯片呈现金字塔中的主要思想 设计图表幻灯片 图表幻灯片传递的信息应简单易懂。 读者没有几乎对它们自己研究找出各个部分的含义。同时，如果图表过于复杂、详细，就会把大量时间浪费在解释上，而不是用在讨论上 即使使用复杂的图表，一份演示文稿中复杂图表的数量 &lt; 3个 制作图表幻灯的步骤： 问题 $\to$ 答案作为标题 $\to$ 选择图表样式 确定想用图表表达的问题 把答案作为图表的标题 选择最适合表达论点的图表样式 最后一步才是选择图表样式，千万不要本末倒置； 图表的标题一定要直接传递信息 传递更清晰的信息 “各地区利润份额” 所包含的信息比 “西部地区约占利润的一半” 少得多 最大限度减少混淆 把读者的注意力集中在你希望强调的数据 因为观众有不同的观点、背景和兴趣，关注的角度也不同；即使同一张图表，不同的人会有不同的理解； 在字里行间呈现金字塔我们的大脑是通过图像而不是文字来进行理性思维的，因为这样效率更高。图像能把大量的事实综合成简单抽象的概念。 遣词造句要做到条理清晰，必须从 “看见” 你要说的内容开始。有了图像后，只需简单地把它复制成文字；读者反过来也能从你的文字中重新在大脑中化图像，这样不仅理解了你的思想，而且过程本身也是一种享受。 P255 图12-1 图像更易于理解 在大脑中画图像 - 记忆图像记忆图像能在阅读过程中，帮助你逐字逐句记忆段落和从中提取信息。为了理解和记忆，每次阅读时必须在大脑中画图像。 对于一些抽象的观点，可以用骨架结构代替图像来说明。 骨架图。通常仅包括一种或几种几何图形（圆形、直线、矩形、椭圆形等），以程式化/草图的形式编排，加上箭头之类表明方向与相互关系。 把图像复制成文字 做到条理清晰的有效方式，强迫自己想象各种思想之间的内在关系。头脑里有了清晰的图像后，就能立刻把它转换成清楚的句子，并在记忆中以图像的形式储存记忆。 以图像形式储存记忆非常重要，因为阅读是一个逐字逐句的过程，而且我们的头脑只能容纳有限的词汇。通过从文字恢复图像的方法，不仅能大量传递知识，而且能用清晰的图像传递信息，便于回忆。 威廉 • 明托的一段话： 写作时，你好像一位司令官，指挥着千军万马，排队通过一个每次只能通过一个人的狭隘关口；而你读者则在另一边迎接，将部队进行重新编排和重新组织。无论主题多么大或多么复杂，你都只能以这种方式表达。 最终你会发现，这就是我们在顺序和编排上对读者应尽的义务，以及为什么修辞学者们除了强调措辞得体和别出心裁外，还把顺序和编排当做那些给予自己厚爱的人应尽的义务。 对于一些非场景化的表述，可以找出名词以及它们之间的关系，同时把它们看做视觉图像。 把图像复制成文字 P259 图12-4 用图像表示3个名词的联系 其他摘抄金字塔结构总括 金字塔结构组织的思想： 首先表达的主要思想，使受众对表达者的观点产生疑惑 关键是对初始问题的引出与界定 主要思想在下一层次上的思想将回答这些问题 人类只有用某种方式将思想表达出来（说出来/写下来），我们才能够准确把握自己的思想。 针对上一层次的问题，回答必须是对问题的直接指向； “为什么” 之类的问句回答必须是 “原因” 标题应该呈现某种思想、观点或结论，而不是只说明要讨论问题的类别 推理的三种方法 分析问题的方法，是通过了解背景（情况），寻找非期望结果（结果）产生的原因（规则），并检查是否已经找到（情况） 任何推理过程都要涉及的3类实体 规则：关于事物运行所遵循的法则 情况：已知事实 结果：如果把规则用于该情况，预期将发生的事情 有意识地将所认知的信息归类到这3类实体中 演绎推理 1 - 规则 如果价格定的太高，销售将下降 如果A则B 2 - 情况 价格定的太高 A 3 - 结果 所以销售将下降 必然B 归纳推理 1 - 情况 提高价格 A 2 - 结果 销售下降 B 3 - 规则 销售下降的原因可能是价格太高 如果A很可能B 外展推理 1 - 结果 销售下降 B 2 - 规则 销售下降通常由于价格太高 如果A那么B 3 - 结果 检查价格是否太傲 可能A 好的表达是遵从大脑的运作方式 【把这些特点转变为有指导意义的具体行为】 尽量用简单的句子，而不是复杂的结构与修辞 对受众来说，最容易理解的顺序是：先了解主要的、抽象的思想，然后了解次要的、为主要思想给提供支持的思想。 对文章的思想作出 疑问/回答式反应 是人类的一种自然反应 大脑会 “自动” 把具有 “共性”的任何事物组织在一起； 共性：具有某种相似的共同点 或 所处位置相近 大脑一次记忆不超过 7 个思想、概念或项目；大脑比较容易记住的是3个，次之5个，绝对不要超过7个 我们的大脑是通过图像而不是文字来进行理性思维的，因为这样效率更高。图像能把大量的事实综合成简单抽象的概念]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[学习的方法]]></title>
      <url>%2F2017%2F06%2F27%2F%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[学习如何学习。阐明大脑对待知识的处理机制，并在这个基础上进行适合大脑运作的学习方式。 只有成网的知识体系才是有用的知识 最初学到的是孤立的知识点 通过消化、吸收和实践，这些知识点开始连接起来，构成了组块； 组块之间再联接起来，就组成了知识之网 能够创造性地在知识之间建立新的联系，就成了一名创新者 有效的学习过程，就是建立新知识与已有知识联接的过程 有意识地、刻意地将现有知识与旧有知识进行联系与对比，目的是为了建立两者之间的关系 知识的输出才是王道。 个性塑造，不要做无效的重复阅读；运用回想-纸片的方式 第一个问题：why在开始学习之前，必须要先问自己做这个事情的目的/原因是什么；不仅仅是学习这件事，其实在所有行动之前都应该这样问自己。 why：为什么要学这个知识？ 以解决实际问题为目的 以通过考核为目的 success：根据你的目的/原因，得出可衡量的的成功标准； how：制定适合目标的学习路径与方法 学习的方法 学习的过程，就是把吸收的知识转化为组块，并将其移入长期记忆的过程。 组块：根据知识的内在逻辑，把相关的信息碎片组合而成的集合。 通过学习得到的知识组块，最开始是零散的；需要经过理解与重组，让它们之间建立联系并相互搭配，才能形成对某一个事物的总体认识。 知识之间本身是有所关联的。 形成网状结构的知识，才是有效的知识 （孤立的知识点，其实并没有什么用（新旧知识没有关联，很快就会遗忘）） 【有效的学习过程，就是建立新知识与已有知识联接的过程】 学习的误区：把知识本身当做一个个孤立的知识点去攻克，而忽视了新旧知识点之间的关联 循序渐进，是为了能把新的知识与已有的知识连接起来；（这也就是学习为什么要循序渐进的原因；） 1. 先广而浅的学习 - [创建结点]先运用发散模式对全局进行了解，创建神经模型的结点 如果你认识到对学习的内容，不是看一遍书就可以解决的，那就一定要采用这样的方法。 2. 再精而深的学习直至你锁定一个新的、更有成效的方法，然后进入专注模式，开始围绕这个结点构造组块 精而深的学习 - [ 构建组块 ] 把注意力集中在需要组块的信息上 理解【基本概念】 获取【背景信息】；从宏观上/自上而下的方式将知识点置于整个知识之网中来进行定位。 有意识地建立新知识与旧知识之间的联系 知识之间本身是有所关联的，而不是孤立的一个个知识点；若是孤立的，则会很快忘记 形成网状结构的知识，才是有效的知识 有效的学习过程，就是建立新知识与已有知识联接的过程 将【学习时间分散开】，而不是集中在一天之内；即在两个专注学习期之间，【至少要有一个你在无意识思考的时间段，让发散模式运行】，让信息进行整理并在彼此之间加固联接。 下一次重读开始前的间隔时间才是这件事真正有效的部分。利用重读间隔中进行的回想，训练了你的大脑。 （每天学习1h的效果 &gt;&gt; 一天学习8h ） 在单个组块内部，需要时间对其进行整理；在组块之间，需要时间对其进行巩固与联接； 这个关键的整理动作，是由无意识的发散模式来进行的。 因为，通过学习得到的知识组块，最开始是零散的；需要经过理解与重组，让它们之间建立联系并相互搭配，才能形成对某一个事物的总体认识。 而这个过程，需要无意识的发散模型来进行。虽然你在休息，但你的发散模式也是在后台运行的 穿插学习，解决混杂交错的各种问题，而不是在同一个问题上过度学习。衡量学习的标准：理解基本概念；一旦理解了X的基本概念，学习重心应该转移到别的概念上，过一段时间再来回顾 X 即可 加深记忆 - [ 强化组块 ] 应用【主动回想】而不是重复阅读的被动学习 工具：Anki 卡片学习 一天之内再次强化学习模型，这在构造神经模型的起始阶段至关重要。 做标记前，要先训练自己找到主要观点，用自己的话来归纳进行标注；慎用划线的方式 划重点，其实只是手在动而已；这个过程会欺骗大脑，以为大脑在工作 书写 &amp; 说话会把要学的知识编译到你更深的记忆中 肌肉记忆 【输出知识】，最终极的检测与巩固方法 记忆方法【有意识地、刻意地将现有知识与旧有知识进行联系与对比，目的是为了建立两者之间的关系】 大部分的记忆方法（讲故事、类比），其实就是为了通过与旧有知识建立联系，从而加深记忆。 视觉图像 记忆宫殿：想象一个你熟悉的空间，把你所需记忆的概念放入这个空间 类比/比喻：与旧有知识建立联系 3. 遍及所有内容的学习顺序 从已经掌握的/感兴趣的内容开始 进行深度遍历 当你以完成某个主题为目的的时，把精力花在当前的知识的N层、N+1层与N-1层 （除非你在学习的过程中，转移了核心层） 1) 当前第N层的知识 2) N-1层的基础知识 3) N+1层的应用知识 离你越远的层次，你所需要知道的细节就越少 一次学习一个内容 4. 学习技巧 入睡前回顾这一天最重要的任务，并把它写下来 这种前期准备有助于你的发散模式开始预热思考明天如何完成这些事 当你在某一个方面感觉累的时候，可以跳到其他类型的专注任务上。（例如放下数学，背背单词） 先做困难的事，但当你发现没有进展的时候，及时从中脱离出来做其他的事情；这个时候，其实你的发散思维还是在后台工作；等一段时间之后，再回过头来做这件困难的事，发现突然有了新的思路/并没有那么困难。 通常，专注模式生成了初步思路之后，发散模式的灵感才能涌现 在学习中遇到解决不了的问题，就去查，随后及时使做记录，然后再回过头去实践，这样提升会很快。 好的学习是从一个小的例子开始，然后了解相关概念，阅读书籍，阅读参考文献/文档，同时进行分析整理，之后去做一个完整的项目 期间，必须要做的事情有两样： 分析与梳理 输出（用自己的话做的整理或理解） 现在的自己，缺少【实践】 和 【输出】。 —— 2016.12.21 大脑工作机制大脑思维方式1. 专注思维 what：将思维聚焦在某一部分的神经结网络中（看成排布紧密的弹球机） why ：把精神集中于已在脑中形成紧密关联的事物上 通常，专注模式生成了初步思路之后，发散模式的灵感才能涌现 2. 发散思维 what：思维在大范围的神经结网络中跳动（看成排布宽松的弹球机） how ：即使休息的时候，你的发散模式也是在后台运行的 [关键] 为什么会有这两种思维模式？ 思考动物的行为；一方面获取食物时需要注意力（专注思维），同时要警惕天敌的接近（发散思维） 有的时候，你越是冥思苦想，得出的想法就越是相差无几；这是因为你的弹珠只在狭小的范围里打转。 专注思维使你在小范围内寻找答案，但可能真正的答案是在另外一侧；这个时候，你就应该转化为发散思维，先完成跨度较大的跳跃，跳跃到对应该问题的另一个小范围内，然后再进行专注思维； 3. 两者之间切换 两者的关系：当我们有意识地处于集中状态时，发散思维是被屏幕的； 切换：关键在于去做别的事情，直至你的大脑意识自然地忘掉了之前的问题。 只要你放下手中的工作，停下来休息一会儿，发散模式就会乘虚而入 大脑工作方式 工作记忆：对正在处理的信息进行有意识地加工的记忆。类比 - 内存； 工作记忆大约能容纳 4 个记忆单元（组块），最多不超过7个； 当你掌握了一门技术，它在工作记忆中所占据的空间会变少；释放出的空间能让你更轻松地处理其他想法 你需要消耗大量能量来使得这4个组块保持活跃 长期记忆：存储记忆的地方。类比 - 硬盘 大脑的认知规律 从感性到理性、从具体到抽象；先解决/学习一个具体的例子/事物 （当你跟他人讲一个抽象的/新的知识点的时候，可以先讲一个具体的例子；因为这遵从人的认识规律） 理论必须在实践中才能真正学好 大脑学习的机制 (核心)学习过程与组块 学习的过程，就是把吸收的知识转化为组块，并将其移入长期记忆的过程。 组块：根据知识的内在逻辑，把相关的信息碎片组合而成的集合。 ​ 通过学习得到的知识组块，最开始是零散的；需要经过理解与重组，让它们之间建立联系并相互搭配，才能形成对某一个事物的总体认识。 ​ 形成组块的过程、知识重组的过程本身是需要多次反复学习的 学习的过程中，必须进行适量的练习 + 回想 适当的休息与及时整理，在两个专注学习期之间，【至少要有一个你在无意识思考的时间段，让发散模式运行】，以让信息有调理且彼此之间联接牢固。 要学习一个新的概念，至少要有一个你在无意识思考的时间段。这个是必须的。正是这些在你并非直接关注的时间里，发散模式得以运行。在此之后，当注意力重新回到问题上时，你就可以将发散模式传达的新想法和新模型整合起来。 – 培训班的问题是一次性给过多的知识，不给消化的机会，使得神经元之间难以连接和巩固 构建组块 把注意力集中在需要组块的信息上 开始学习新知识，既要创造新的神经模型，又要把新模型和遍布大脑各处的既有模型联结在一起 理解；要把基本概念打包成组块，首先要理解基本概念 获取背景信息；将整个知识点置于整个知识之网中来进行定位。不仅要知道如何使用，还要知道何时使用与何时不能使用。 练习 + 回想 搭建组块会压缩已有知识，为工作记忆腾出更多空间 知识之网 知识之间本身是有所关联的。 形成网状结构的知识，才是有效的知识 （孤立的知识点，其实并没有什么用（新旧知识没有关联，很快就会遗忘）） 【有效的学习过程，就是建立新知识与已有知识联接的过程】 学习的误区：把知识本身当做一个个孤立的知识点去攻克，而忽视了新旧知识点之间的关联 循序渐进，是为了能把新的知识与已有的知识连接起来；（这也就是学习为什么要循序渐进的原因；） ​ “学不会”的内在原因 学习的知识点与你旧的知识点没有联接 所期望掌握的知识点，位于另一个结构复杂的内部知识子网之中，必须以那个子网为大的背景去学习，并且还需要把那个子网与现有的知识网络之间建立连接 知识之网的遍历方法 从已掌握的节点出发（其次最感兴趣的） + 进行深度遍历 + 一次学习一个内容 错误的方法 - 一开始就看最核心的内容 学习知识的N+1层、N-1层 当你以完成某个主题为目的的时候，你所涉及的知识需要仅3层，所以你的关注点也应该仅在这3层而已； 除非你在学习的过程中，转移了核心层 1) 当前第N层的知识 2) N-1层的基础知识 3) N+1层的应用知识 离你越远的层次，你所需要知道的细节就越少 能力错觉 当书本/答案摆在眼前时，大脑会产生错觉，以为学习材料也同样存入了大脑。 通过回想，让弹脑提取关键概念，而非通过重复阅读被动地获取知识，将让你更加高效地记忆与学习； 对于划重点与标下划线，一定要谨慎，否则不仅会效率低下，而且会被误导。因为划线的动作会让你欺骗自己说大脑在工作，其实只是手在动而已。 做标记前，要先训练自己找到主要观点，并把做标记的数量降到最低； 但用自己归纳的话来进行标注，是很好的方法 有人认为画概念导图是最好的学习方法。但如果基础组块还没有嵌入脑中，就试着在组块间构建联接，完全是空中楼阁； 所以，在掌握了基础概念之后，再进行全局的联接]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[个人日志_2017年5月总结]]></title>
      <url>%2F2017%2F06%2F10%2F%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97_2017%E5%B9%B45%E6%9C%88%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[5月总结 你要掌握自己的人生，拥有自己的选择权，而非被选择。当你不够强大，无能为力的时候，就只能被选择。而留给你的只有无奈与不甘。 —— 2017.05.27 去往迪卡侬的路上 【运动&amp;健康】 9分虽然运动很少，大更加注重自己的身体健康，更愿意为此承担更高的消费； 整个五月，对于新年目标的达成情况：(1): 对于周末[周六、周日]早上的两天，基本都是晚睡晚起，而且还不写晨间日志。 (2): 对于晚睡早起，这个一直是个问题；继续加油。 做晨间日志 早睡早起 晚睡早起 19天 7天 12天 不知哪里来的想法，自己竟然买了一瓶洗面奶。可以说，这是我自己买的第一瓶洗面奶（捂脸）。来到上海，有一个很明显的改变，那就是对自己身体的重视度，或者说对身体健康方面的消费更愿意去承担。 第一次配优质的镜片，花费近1000大洋给自己配了2副眼睛，一幅防蓝光，一副正常使用；更加关注自己的身体。会这样做是因为工作时，常常感到眼睛疼痛；但如果换做之前，自己应该只会配一幅300+左右的眼镜就了事了。 对于自己多年来的一个想法：学游泳，终于在今年迈入正轨；虽然之前也有去游泳，而且还有自学，但这次是报了培训班，做了必须要学会的心态去的。给自己一个赞。 【生活&amp;娱乐】 9分这一个月是看片大月，这么说是在这一月中，看了很多影视剧。同时，给自己定下一个任务，每周都要出门去，去见朋友也好，去参加活动也好，去看展览也好。总之必须要出门去。 《人民的名义》，利用五一假期，把它重头到尾补了一遍。整个看完一遍，似乎并无太多感触。也并不是说剧情不好，只是并无欢喜也并无厌恶吧。 《越狱 第五季》。迈克尔 • 斯科菲尔德又出现了。《越狱》可以说是第一部看的美剧，带领我走入美剧的殿堂。虽然之后基本也没有追过什么剧，但《越狱》在我心中的地位是无可比拟的。有追的好像就是《权利的游戏》（冰与火之歌），是她推荐的。第五季中，同样的角色，还是大爱；但剧情的精彩程度却要打个折扣，但仍是好看；或者说是第一季到第四季的浓缩版，为何这么说。因为在这短短一季中，涉及了越狱准备、成功后的逃亡，再到最后击败BOSS。说它好看，因为每每到一个关键时刻，总是有意外情况发生，使得不得不改变原先的方案，永远让人猜不透下面的剧情。因为总是你会有突然的意外来打破原先的计划。而这，其实才是正常的生活，没有那么多一如既往，总是会有意外降临。而这一点正是国内影片所欠缺的。 《摔跤吧！爸爸》印度宝莱坞的阿米尔 • 汗，因为之前看过他主演的几部电影，真的非常精彩。《三傻大闹好莱坞》《未知死亡》都很精彩；对于这一步电影，在印度上映的时候就已经听说，而且口碑很好。不过意外的是在今年5月份的时候引入到中国，这让我很是意外的。不过，这次没有去影院看，而是自己电脑中看的。表面上看可能是一个父亲为了让自己的子女继承自己的梦想，而不断鞭策其努力并最终获得成功的故事。但在当时的背景下，要表达的是对女性自由的争取，或者说是对规则的抗拒。不愿因为规则而被束缚，为了追求而去做为挑战者去打破这个禁锢。这是需要多大的勇气与毅力；当每个人都在嘲讽你的时候，你必须要有足够强大的内心来坚持自我。 发现一个看书的好去处 “大众书局”。环走在里面，发现了自己有好多书想看还没看的。所以要多多阅读。 报名参加了《富爸爸现金流游戏》 ​ 【阅读&amp;学习】 9分这个月，主要完成的“期货从业资格”考试的准备，并且顺利通过。看了《理性经济学》《文明是副产品》，已完成1本读书笔记；收听一场知乎Live《数据挖掘技能的提升》，并做了收听笔记。同时，对于读书以及读书笔记这两件事，有了更深刻的认识。 对于之前阅读过的《企业生命周期》，不知道由于什么原因，又再次翻阅起来。只是这次，是以回顾各个周期的主要特点为目的进行的二次翻阅，并做好记录。遗憾的是，回顾到一半然后就没有在继续了。 《理性经济学》，本月的第二本书籍，还是啃完了，也做了读书笔记_《理性乐观派》。对于这本书，全文围绕一个核心观点开展：由交换带来了双赢，并进一步促进了专业化的深入，最后走向彻底的分工。文章中富裕的定义还是认同的，所谓富裕指的是你不仅可以用时间换取所需的物品，而还换取你想要的物品。而贫穷的人，只能用自己的时间换取所需的物品。当然真正的富裕，应该是你无需用你的时间你所需要的物品。在这个定义中，时间的价值是衡量富裕的尺度。另外还有一个有意思的现象是：过去的人类消费简单化，生产多样化(生存所需的事物都是自己来完成的)，而现在的人类则是消费多样化，生产简单化(用单一的专业的劳动，但消费的是上千种的物品)。对于自我生活的指导，应该是交换，或者说分享。上个月在一次活动中听到两个词 “无限资源/有限资源” 。说的是，对于无限资源，要主动去分享。但在当下，其实有限资源也应该去分享，或者说交换。回顾这个月分享自己的学习笔记，真的是给我带来了很多的惊喜。 《文明是副产品》《代价轮》《信任论》，郑也夫老师的一套书。5月份看了第一本《文明是副产品》；因为之前收听罗辑思维的节目中罗胖分享过其中的观点，让我觉得很受感触。文章围绕的核心观点：在人类发展历史中，引发的文明大跃迁的发明其实往往是副产品，是由在追求其他目的的时候偶尔产生的结果。 讲述了两个人类发展史中最重要的两个现象：(1)一夫一妻制； (2)农业； 关于其他现象（造纸术、印刷术）也是副产品。本书的读书笔记还在整理过程中。 (1)一夫一妻制：人类能够成为地球的霸主，这个与实行一夫一妻制有非常大的关系；达尔文的进化论中说到，适应与自然选择；适应性：指的是个体生存和繁衍能力好，说到根本还是后者； 唯有后代多，父母的品性才能被继承下来，于是有助于繁衍的品性将成为该物种的特征 ； 正是由于一夫一妻制，使得人类婴儿的出生率远高于其他动物(这里仅指动物，排除昆虫、鱼类、微生物等)； 或者应该这样说，由于一夫一妻制的存在，可以完成2年生育一个幼崽，甚至1年生育一个；其他生物不是说不能保证生育率，而是在母亲生下幼儿之后，由于群婚或者一夫多妻制的情况，使得母亲必须花费大量的时间与精力来照顾自己的孩子，这使得它们没有更多是食物与精力来继续生育； (2)农业：农业更是完全改变了人类的生活方式，并进步促进了人类生存的稳定性，并进一步提高了人类繁衍的能力；即使到了今天，想象一下如果没有农业，地球的70亿人口如何生存。 开始收听 “得到”APP中的《罗辑思维》；最新的罗辑思维改版为1天1更新，内容上缩短了很多，从原本对一个主题的深入解析到现在对一个主题的轻度解析，从更新频率上来讲，是迎合了更多人的需求，但对内容的理解程度大大降低了。想起了一个概念，“ 碎片化学习”。其实，学习这个事情，如果是碎片化的，效率远没有在一段时间内专注&amp;系统的学习有效。 第一次使用了坚果云中 ” 历史版本 “的功能，非常好用。即使不小心替换，也可以进行恢复。 对于关于数据挖掘的Live《数据挖掘技能的提升》，虽然数据挖掘与数据分析有很大的区别，与当前自己的工作内容还是有一定距离；但去收听这方面的内容，是为了更全面地认识此类职业的涉及范围与可能涉及的技能。走向数据挖掘必备的两个知识：编程能力 + 数理统计；但这两块，都是我比较欠缺的，我指的欠缺是指今后对其深入学习与研究的能力； 根据知识管理的核心原则：以终为始。重新整理自己的文档，按照以以 [ 用 ] 为导向，以 [ 主题 ] 为核心重新归档； 【工作】 7分 开始要学习Python了，开始思考自己的职业。问自己，你到底是想要成为什么？如果往程序员的方向发展，现在的你已经是部门中的老人了，相比其他92年、94年的年轻孩子，你至少少了3年的时光。当然，成为程序员也不是我想要的。我真正想要的，成为一个有严谨思维的分析师；这才是会让我一想到，眼睛就放光的。而且你要时常记得，你的目的不是为了成为程序员，而是为了解决问题。 对于工作中与人合作，自己似乎过于在乎他人的感受。其实，在工作中，如何高效、快速地完成你所负责的事情，才是第一位的，其次才是人际之间的关系。oh.不。事情是这样的，有一件事情同时指派给我跟其他一位同事，我基本上已经完成了所需材料的收集，但想跟她在一起讨论一下，倒并不是说一定能从对方那里得到更好的建议，而是我认为这是最起码的尊重。但当对方没有时间（几天都没有时间）的情况下，我的选择是等待，等待对方有时间了在简单过一下方案，然后在进行汇报。但换成这样的方式是不是会更好？(1) 先跟对方沟通，约个时间简单讨论下； (2) 若对方没有时间，再改时间也不合适的情况下，可以对对方说：”那这样，内容你先看一下；我再把自己做的这个材料检查一下，然后我先进行一个汇报。你看如何？“ 这样一来，不仅尊重了对方，并且把选择权一定那个程度上交给了对方，而且还能保证事情的顺利开展。 工作中，大家对我的一个评价就是细心，一个很细心的人。或者说是考虑全面的人。挺好，但我自己追求的是严谨呐。所以，在保持的细心的前提下，努力成为严谨的人。 【友情&amp;感情】 7分 见了一位之前在上海的朋友曹同学；相见不宜呀，也是约了好几次才碰到有时间的；话说之前上海的朋友都见得好少；惭愧惭愧！！ 对于人际交往，一定要全方位的尊重对方。什么是全方位，说的是不要想当然地认为对方应该会帮你，即使对对方来说只是举手之劳。你一定要知道，“别人帮不帮你，与对此而言是不是TA的举手之劳没有任何关系，并不能说对方是举手之劳，就必须帮我们。”对于这个观念，虽然之前就已经有所认识，但还是不够深刻。所谓深刻，是你有没有真正因此而改变了自己的行为。 张同学有一双发现美的眼睛，经常听她夸别人，而且是发自内心的赞美。对于这一点，一直想夸她这个优点来着，但一直没有去实施。下次再碰到她夸别人的时候，一定要赞美她。不是为了讨好，而是不要吝啬自己的赞美。 一个朋友个我说，他要把她送给他的十字绣给收起来，因为每次回家的时候，看到那些东西，就会想起那个让他遗憾的她。我说，这样也挺好，是该好好向前。 【亲情】 6分 最近几年，似乎受到了更多的关爱。此次五一回去，老爸老妈不仅像平常那样回来接我，去的时候还送我去拿身份证，并且还送我到了车站。 把公司发的端午福利粽子，寄回家给爸妈吃。毕竟，自己一个人也吃不完。 现在会更多把自己的事情跟家人说，之前更多的是自己想自己的事情，自己做决定；因为之前我回想，即使跟他们说了，也不能改变什么。 【投资】 6分 报名参加《富爸爸现金流游戏》；因为原先对《富爸爸穷爸爸》这本书就看过，而且其中的观点也已经有了深刻的理解，应用到生活中，所以此次游戏并没有带来态度的感触。对于游戏中的几个决策，也并无不妥之处。反而是在分享阶段，有个伙伴分享了一个观点，对我还是挺有感触的。“ 在我们实现资产增值的过程中，第一笔资金都是来自银行贷款的。这是一个杠杆，我们如何利用好银行这个杠杆很重要。 ”对于这个观点，之前都没有去考虑过。因为之前的想法就是，前期努力工作获得第一笔投资资金，但从游戏中的过程来看，其实第一笔投资资金完全不是（可以说所有人都不是）通过自己的职业收入的积累来完成的。对我的启发就是，我应该要去熟悉一下当下社会，有哪些途径和方法去获得贷款。 而对于贷款，游戏与生活有个非常大的区别：(1)贷款的便利性，但有极高的10%的月度利息； (2)购置房产这个关键性行为只需付首付就可以，并且无条件贷款，而且后续的贷款无需还贷（即无需在从现金流中支出），不仅如此，还能获得房租的月现金流收入。这简直就是逆天的bug。游戏中在前期上获得5w以上的第一笔现金流的项目都是房产出售的项目。而这个在生活中太困难。 开始建立的自己的微信公众号 - Jerry的那些事 【感恩回报】 5分 向行政的同事借工具，换网线，其实挺麻烦她的。但对方都很配合，谢谢她。 我对那位分享的观点给我启发的伙伴，表示了感谢。说谢谢她的观点。对于这一点，以后需要做的是更加的诚心，要让对方感受到你的谢意，这个才是关键。这样做并不是为了向她表示好感，一方面是为了出于真心的感谢，另一方面是给对方反馈，让她知道你的观点帮助了我 【成功小事】 6分 工作后，第一次在周末继续写晨间日志，并保持早睡早起；继续加油。 能够面对陌生人不在内敛，主动跟对方沟通。表达自己的感谢之情； 成功将 “ 听了你的演讲/玩了这个游戏，说说我的感受 ”。 这个表达方式应用在与人分享中。 【自我思索】 9分 现在工作的环境，真的挺好的。应该说是很放松，不会拘谨。但这样的情景下，自己在工作环境中就会比较真我，就是那种有点小调皮，不是很庄严的那种。当然，并不是指对工作内容，而是在跟同事闲聊的时候，会这样子。也不是说活得真我不好，但总觉得似乎应该更稳重一点，因为这跟自己追去的严谨不符呀。 资源分享，主动分享这件事。对于《期货》考试自己做了整理，之前还在犹豫要不要主动分享给大家。最后，还是主动分享给了大家。想起之前的一句话 “ 无限资源，分享就可以获得更多；它不是零和博弈； ” 但结果确让我很是意外，大家的热情与感谢，这是我完全没有意料到的。那个时候，真庆幸自己做了一个正确的决定。分享，主动分享让人快乐，是一种双赢。 我真正想要的，成为一个有严谨思维的分析师；这才是会让我一想到，眼睛就放光的。 数据分析，是一种工具，或者说是过程。 数据分析，帮助你去更好地认识这个世界的一种方法。数据分析帮你把表象更真实地呈现出来。目的是为最后的决策提供支持。但并不能替代决策。 数据分析的结果，才是你最应该关注的。 对于来到上海，消费观有了更进一步的改变，尤其是对于身体养护这一块，为了身体的健康，更愿意去承担更高的消费； 对于学习有进一步的认识。对于学习，自己更倾向于了解底层&amp;原理性的内容之后，在进行其他知识的学习。 在走往迪卡侬的路上，脑中回荡起这样一种思绪：你要掌握自己的人生，拥有自己的选择权，而非被选择。当你不够强大，无能为力的时候，就只能被选择。而留给你的只有无奈与不甘。工作、生活、感情、婚姻，真的不想再经历那种无能为力，被选择的自己。 人与人的交流，真的应该是面对面的沟通；那才是最直接也是最深刻的沟通方式。 后续任务 【运动&amp;健康】 睡眠：23:20入睡，07:20起床；自己的新年目标要努力坚持； 学习游泳，一周去学一次是底线 【阅读&amp;学习】 完成《文明是副产品》的读书笔记，继续阅读余下两本《代价论》《信任论》 准备“证券从业资格”考试，并争取顺利通过 Python，要去应用，去实践； [ ] 【投资】 去了解个人贷款的途径与方式、金额及利率；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于博客、公众号与知乎的思考]]></title>
      <url>%2F2017%2F06%2F04%2F%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E3%80%81%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B8%8E%E7%9F%A5%E4%B9%8E%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
      <content type="text"><![CDATA[对博客、公众号与知乎的一些思考。 平台选择博客：个人知识的积累；作为知识管理的平台； 当前的自己，更多的是知识的积累，读书笔记也好，总结思考也罢，更多的不是输出，而是输入的整理。当前阶段的自己，或者说过去的自己，都一直是这样的一个状态。 微信公众号：个人观点的输出。 知乎：个人观点的输出。 特点总结所有的知名者，都是现在自己的小领域内有所专注与专长，然后才是发散到其他领域。所以，==[ 关键是要确定你自己的专业领域。]== 平台 结论 特点 博客 做存量的知识存储 可以系统地进行文章的梳理与分类 微信公众号 做增量的观点输出 一天一条信息，会被快速淹没；注重时效性，并且不适合对文章进行查阅 知乎 做特定行业知识的输出 需要你在某一特定领域有专长/见解，然后以此拓展 功能对比 博客 微信公众号 知乎 文章分类 原创认证后方可评论 树状结构浏览 原创认证后方可评论 文章排序 按发表时间进行排序 文章修改 不可对已发表的文章进行修改 评论 原创认证后方可评论 文章数量不限 1天发表一篇图文（1+7,最多8篇文章） 回答问题不限 低访问量 以好友为主的访问量 网络的访问量 传播范围窄 朋友圈传播 传播范围广]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[知识管理]]></title>
      <url>%2F2017%2F05%2F29%2F%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%2F</url>
      <content type="text"><![CDATA[知识管理的核心原则：以终为始。 笔记的终极目标是什么？是应用。应在在一开始就围绕 [ 应用 ] 这个核心价值观来组织和建立笔记。 以 [ 用 ] 为导向 记笔记是为了用，不用的笔记没有价值。目的决定手段，离开目的无法评估手段。 以 [ 主题 ] 为核心 主题即项目，也就是笔记可能的用途。记笔记的目的，在于支撑主题，一切流程都是为主题服务。 定期回顾、整理和归档 分类不是太重要，至少在一开始的时候。刚开始的时候，不要太在意分类，只有到达一定数量之后，才有分类的必要与意义。 分类是随着你的知识积累和学习的深入，不断调整的。 同时，分类也是可以个性化的，你只需要根据你自己的习惯进行简单的分类，便于你自己查找的。个人知识管理是服务于自己，因此不必纠结于外界对某个领域最权威最系统的分类。可以参考，但不必纠结于此。 资料收集的步骤收集 -Note what ：任何时刻，看到任何觉得有价值的资讯，用手机和纸笔（视哪个更方便而定）记下来 why ：为后续的查找、二次阅读提供便利与内容 how ：使用OneNote &amp; EverNote 完成信息收集的第一步 完善 &amp; 总结 what ：对于之前收集的信息进行定期整理，将内容浓缩为几个观点，只留下有价值的部分。并通过搜索将其扩充成一个有价值的详细笔记 why ：没有经过自己理解的信息就只是外部世界的信息，它并属于你。 how ：信息整理 - 对收集的信息进行标记说明，方面后续分类、重新组织和搜索。 用自己的话描述文章在围绕什么主题进行展开 自己为什么要收集 文章的核心观点是什么 自己的看法是什么 how ：内容扩充 - 通过搜索了解它的基本内容 what ( 概念 ) who ( 谁 ) &amp; when/where ( 在什么时间、什么背景下产生/提出的 ) 有助于更深刻的理解 (why)它的原因与目的 why ( 产生的原因 / 它的意义与目的 ) how ( 构成要素/组成部分、应用方法 ) how ( 特点、适用情况 ) 最佳实践 导入工作/生活 根据情况决定是否需要做扩充。 归档 what ：将此类所有相关的文档以主题为划分纬度进行存放 why ：(1) 资料性文件一般只对特定的事项发挥作用；(2) 易于查找 how ：涉及多重分类标准 按主题分、按使用频率分、按时间分 一个文件物理存在只有一个，但是可以创建若干个快捷方式，然后放到不同的分类里去。 应用 - 经常翻阅 what ：定时翻看自己的笔记，尤其是主题笔记，有灵感了，就将其输出。 why ：关键是要去用。将笔记和思考转化成为实实在在的实践，把思想落实成为行动，这才是笔记的本来目的。 how ：写一篇文章，在知乎回答一个问题，或者告诉别人，都可以。 可参考的分类方法按时间每月一个文件夹每月归档，让碎片信息形式上有一个分类，然后通过搜索，根据自己的需要把各个月份的碎片信息组织起来，形成新的一份资料。 why： 了解自己每个月的工作内容和成果。 平时每天处理的工作归到一个文件夹，月末的时候，这个月做了些什么一目了然。如果需要输出各种工作周报、月报，找原始资料非常方便。 最近使用的资料唾手可得。 周期性事务文件夹有一些周期性的事务，可以按事务来建文件夹，然后在文件名中注明重复周期。 主题类文件夹 和项目相关的资料性文件，是和项目文件放在一起呢，还是和所有资料文件放在一起？ 结论：根据【以终为始】的指导原则，应该和项目文件放在一起。 why： 在研究时，相关资料易于查找 避免资料分类的纠结。特别是某方面的资料积累还不多时，就不用纠结到底是单独取个主题名称，还是放到其他下面。如前所说，这只是第一步，是为了主题研究或者项目的顺利进行，资料性文件还只能对特定的事项发挥作用。 资料的整理资料库/工具包的整理 多个主题研究或者项目之后，进行总结。 把常用的、重要的、精华的资料性文件或工具提炼出来，归纳整理成一个资料库或者叫工具包。这个资料库不是各个专题下面资料的简单堆砌，而是经过了筛选、脱水和提炼的。 在新项目或研究新主题时，根据需要把资料库或工具包的全部或部分内容复制到相应主题/项目，或者贴个快捷方式/链接，复用自己之前总结的成果。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《理性乐观派》_读书笔记]]></title>
      <url>%2F2017%2F05%2F20%2F%E3%80%8A%E7%90%86%E6%80%A7%E4%B9%90%E8%A7%82%E6%B4%BE%E3%80%8B_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《理性乐观派》 [英] 马特 • 里德利 ( Matt Ridley ) 交易（贸易）在人类发展中起的作用 交换，是通往繁荣的道路（而非自给自足）。交换 $\to$ 专业化 $\to$ 劳动分工 $\to$ 集体智慧，使得生产效率发生质的飞越； 自给自足的生活，需要花费大量时间在满足生理需求（即生存上），使得几乎没有时间去发展技术 交换，交换的是不同的东西； 交换实质上是不平等的，但却仍然能让双方都受益 集体大脑。没有集体智慧，很难进行复杂工具的生产。知识，从来都不是以浓缩或者综合的形式存在，而是以不完整甚至往往是自相矛盾的知识比特的形式存在，为不同个体所占有。 要让交换可行，两个人不需要提供同等价值的东西。这是因为，人类往往会自己无法拥有的东西赋予高价值；对交换依赖越多，交换的吸引就越大，就越会促成专业化。 所谓繁荣，是你以同样工作量换取的商品或服务的数量增加了。贫穷与富裕的定义是，以你的时间换取 ( 需要的 /想要的) 产品的价格 消费简单化，生产多样化 $\to​$ 消费多样化，生产简单化 人类会与同类的陌生人和平相处。这是其他动物所没有的。 序 当思想有了性阐述了人类与其他动物有什么区别；以及是什么使得人类有能力以这种疯狂的方式不断改变自己的生活。 集体智慧进化到某个阶段之后，人类的智慧就成了集体性的、积累性的，这种现象并没有出现在其他动物身上。 手斧 vs. 鼠标； 前者是一个人做出来的；后者是上百人甚至上万人做出来的；单独的一个人，没有谁知道该如何制作出鼠标来；即使是在工厂装配鼠标的人，也不知道如何钻探油井和从石油里制造出塑料； 流动的思想文化要转入积累，思想就必须互相接触，互相交流。如果文化值包括学习他人的习惯，那它很快就会陷入停滞。 通过交换，人类发现了 “ 劳动分工 ” ，出于互利的目的，将努力和天赋加以专业化； 更好的今天 相比过去，人类整体水平大大提高；富裕者越富裕，但贫穷者并没有越贫穷 整个世界在进步，虽然贫穷问题仍然存在，但有个无法忽视的现象：当今贫困的生活相比过去的贫困的生活，已经算是很大的进步。 繁荣（定义）：你以同样工作量换取的商品或服务的数量增加了。 衡量繁荣的真正尺度是时间。即你单位工作时间能够获得的收益；因为时间是不变的。 贫穷与富裕的定义：价格 vs. 时间 —— (需要的 /想要的) 服务 贫穷：负担不起以足够高的价格卖掉自己的时间，来购买自己所需要的服务 富裕：不光能买到自己需要的服务，还能买到自己想要的服务 困境：我们的富裕是靠透支着孩子们的未来实现的（国家的养老金都是靠孩子们的缴税来实现的）。但这里有个关键的因素来决定这种透支是否有利：透支资金所进行的活动 ： 为了发明创造&amp;创新，那就是可持续的；因为一旦科技发展，效率会提高，即你单位时间能够实现的收益是更多的，即更加繁荣； 为了维持奢侈的生活，那就是不可持续的； 只要人在创新上分配足够的资金，那信贷危机就不可能长时间地阻挡人类生活水平的不断攀升； ==核心观点：通过【交换、专业化、劳动分工】（集体智慧）的产出，你获得了自己几乎无法生产的东西。但你换取它们的成本却是非常廉价的。== ==自给自足并不是通往繁荣的路线。== 如果你必须在每件事上自给自足，那你一天80%以上的时间都将花在满足自己的生理需求：活下来。 交换和专业化为人类带来了奇迹。 ==知识，从来都不是以浓缩或者综合的形式存在，而是以不完整甚至往往是自相矛盾的知识比特(bit，信息量的最小单位) 的形式存在，为不同个体所占有。== 集体智慧或集体大脑： 例如，制作一支铅笔；随便那一个人都只是贡献了一点点知识。但如果要把铅笔制造出来，需要不计其数的劳动（最开始的石墨提取、木材的采集等）， 但并没有一个全知全能的大脑发号施令做指挥。 劳动的繁殖：所有合作的目的，就是 “ 少量的劳动完成大量的工作 ”。==现在生活标志性特征和生活水平高的核心定义：消费多样化，生产简单化。== 生产一样东西，使用很多东西； 这里有一个奇怪的事实：为了换回为你提供无穷商品或服务，你只生产一种东西。也就是说，你消耗了成千上万人的劳动、享受了他们的发明成果之后，你只生产和出售自己擅长的东西——理发、保险咨询等等； 自给自足的园丁与农民，或者以狩猎采集为生的原始人，则是生产多样化，消费简单化； 为了生存，他们要自己播种，自己制作武器，自己狩猎，自己制作衣服； 比较不同时期的消费组成 | 2000年后普通工薪者 | 18世纪90年代农场的劳动者 | 现代马拉维农村服务 || —————————- | ————– | ———– || 20% - 住房 | 75% - 食物 | 35% - 耕种食物 || 18% - 交通运输 | 10% - 服装和被褥 | 33% - 做饭、清洁 || 16% - 家居用品 | 6% - 住房 | 17% - 取水 || 14% - 食物、饮料 | 5% - 取暖 | 5% - 拾柴火 || 5% - 电影、音乐等娱乐 | 4% - 照明和其他 | 9% - 其他劳动 || 4% - 服装； 2% - 教育； 11% - 养老金； | | | 专业知识的积累，使得我们每个人得以靠着生产越来越少的东西，消费越来越多的东西，，这是人类发展的核心故事。 集体大脑 大多数的演进变化来自物种的后代取代了原先的物种，而不是物种本身的习惯发生变化。而人类则恰恰相反。 旧石器时代制作的工具——手斧，持续了100多万年都没有进展，这是为什么？那是因为，如果没有交流&amp;交换，我们几乎认识不到这个事物有何不同之处。 一代又一代人靠着走路，不可能变得越来越好。对旧石器时代的人类而言，制作手斧就像走路，一种通过实践能做好的事情，但你不会反反复复地思考它。因为它几乎成了一种身体机能。难道你会在身体机能上去创新？？有的也就只是想法而已。 它靠着模仿和学习来部分延续。 智人的出现，第一次使得技术变化的速度 &gt; 构造自己的生理结构的速度。这是一种进步。 基因在人类演进中发挥了巨大的作用，但它更多的是为了响应新习惯，而不是新习惯形成的原因。 熟食选择了小肠道和小嘴巴的基因，而不是小肠道和小嘴巴选择了熟食；基本是根据外在环境而改变的。达尔文《物种起源》 演化过程是从外到内的，而解释往往却是从内到外的。 交换的开始 互惠 vs. 交换：两者有本质的区别 互惠：给予对方的同时，对方给予相同的回报； 交换：给予对方的同时，对方给予不同的回报； 对动物而言，更多的是互惠，往往是平等的；但交换实质上是不平等的，但却仍然能让双方都受益。 如果我今天替你做一件衣服，你明天也替我做一件；这么多，好处是有的，但并不会改变什么； 如果我今天替你做一件衣服，你明天替我去找食物，那这带来的收益是明显递增的。 ==核心观点：要让交换可行，两个人不需要提供同等价值的东西。这是因为，人类往往会自己无法拥有的东西赋予高价值；对交换依赖越多，交换的吸引就越大，就越会促成专业化。== 交换的产生，是促使人类快速进步的重要原因； 以狩猎换采集 性别上的劳动分工与交换 男性：狩猎，提高营养，同时用肉换取其他东西 女性：采集，提供最基本的食物；保证在没有捕捉到猎物的情况下，仍然可以生存； 专业分工带来专业的知识，而专业的知识带来了不断的改进。专业分工还带来了给专家们投入时间、设计 隔绝（自给自足）会导致技术上的退化；一旦缺少了交换与交流，技术的进步就会受到停止，因为缺少了最基本的动因； 人类的成功，极大的取决于数量与联系。寥寥百人无法维持复杂的技术。 人类进步是一项集体性的事业，它需要密集的集体大脑； ​ 其他 比较优势 - 李嘉图：当某一个生产者以比另一个生产者更低的机会成本来生产产品时，我们称这个生产者在这种产品和服务上具有比较优势。 制造美德 钱不是金属，而是信任的结晶。 —— 尼尔 • 弗格森 (Nial Fergson) 《货币崛起》 人类会与同类的陌生人和平相处。而对于任何一种动物，不同群体的成员只要一接触，必然出现暴力行为； 一种设想：起初，人类试探性地开始交换，体会到了比较优势和集体大脑的好处，反过来推动了自然选择偏向那些尤其擅长信任和同情； 我们进化之初，生活在一个零和世界，一方获利意味着另一方的损失； 信任的产生，并没有定论。 养活90亿人 10,000年开始的农业耕作 虽然没有探究农业的起源，但提到了农业给人类带来的变化与好处； 农业耕种传播飞快：最初种下的种子产量很高，也易于生长。 有了农业耕作，社会密集度提高，更好地利用合作、协调和劳动分工的潜能，获得了可观的回报； 繁荣的显著特征是专业化程度不断提高，贫穷则是回归到自给自足的状态； 如果现在，一个人要耕种农业来养活自己的话，至少需要1250平方米的土地； 2004年，全世界5亿公顷的土地种植约20亿吨的农作物：每公顷产量为4吨。这些农作物提供了全世界2/3的粮食，养活了40亿人，故每公顷养活8个人； 但是，他们种植的产量与效率是远远高于你个人去种植的； 化肥的诞生，使得农业的产量可以持续的保持高产； 城市的胜利 5000年前的从城市贸易 自由贸易能实现共同繁荣，而保护主义导致贫穷。 贸易的阐述： 威胁：廉价产品摧毁了国内的产业与工作岗位 机会：替消费者省下钱来购买其他的商品和服务；在国内创造出更多的就业岗位 城市的生活不管多么贫穷，始终充满机会，也有更大的自由。 2008年，全国生活在城市的人口首次超过了总人口的一半； 超过一半的人口脱离了自给自足，去探索以集体大脑为基础的生活所充满的无限可能。 2/3的经济增长都出现在城市； 逃离马尔萨斯的陷阱 1200年之后的人口 马尔萨斯人口陷阱：技术的进步与发展，仅仅早就了人口的增长而没有提高人类的生活水平。 逃离：在1800年开始的工业革命，才使得一些国家人均收入大幅增加，最终跳出马尔萨斯陷阱； 人类人口的反常现象：人口密度达到一定程度之后会崩溃，使得人口大幅减少；但崩溃之后，人口密度仍然会停留在比之前更高的水平上，而最低生活水平不规律却又势不可挡的提高了。 人口过渡阶段，很多国家都采取了措施；（尤其是20世纪70年代的亚洲，很多都采取了强制措施） 人口虽然在增长，但增长率其实是下降的； 几乎任何国家的出生率都是维持在较高水平：(1) 死亡率下降； (2) 人口膨胀； (3) 出生率迅速下降 人类生育能力大幅下降，可能的原因： 婴儿的死亡率大幅降低（因为婴儿/儿童的死亡率越高，家庭就会生得越多） 女性普遍接受教育 奴隶的解放 1700年后的能源 关于能源，每一次改变，单个人能为其他人完成的工作量，都靠着动物或机器放大了。 人类自身劳作 $\to$ 奴隶 $\to$ 牛/马 $\to$ 无生命的动力( 水车 ) $\to$ 化石燃料 我们靠着化石燃料，开始了工业革命，最后才冲破了“马尔萨斯天花板”。经济的快速发展，靠的恰巧是不可再生、不环保、不清洁的能源。 像煤炭这种不可再生资源丰富得足够承受经济活动和人口的双重爆炸，直到它们为地球上的所有人创造财富，但同时又不撞上“马尔萨斯天花板”，之后把接力棒传递给其他能源。 石油、煤炭、天然气的确是有限的，但它们能持续数十年甚至数百年，人们要做的就是在用完它们之前找到替代品。 一个常常被我们忽略的重要事实：化石燃料为工业化腾出了大量土地。没有化石燃料，能源是需要从土地里生长出来的，所以需要大量的面积来进行种植。 “杰文斯悖论”：技术的进步提高了资源的利用率，但同时却增加了对这种能源的需求，实际上该能源的消耗也增加了。 传统意义上，资源利用率高了，获得同等能量所需的资源就少；但因为该资源利用率高，所以大家都来用这种资源了。 发明中的发明 1800年后的收益递增 对于思想与知识来说，你产生的知识越多，就越能产生知识。对于实体上的东西，更多的是符合收益递减的规律。 知识永远不可能聚集在一个单独的地方，它是集体性质，不是个人性质。 创新大历程：1800年- 纺织业；1830年- 铁路；1860年- 化工业；1890年- 电力；1920年- 汽车；1950年- 飞机；1980年- 计算机；2010年- 网络。 19世纪，大量运输物品的新途径（自行车、铁路、汽车、轮船） 20世纪，大量传递信息的新途径（电话、广播、电视、卫星、传真、手机、互联网） 推动创新的动因： 金钱很重要，但不是绝对重要的那个点 知识产权：大多数创新并没有申请专利 政府推动：创新不是一个能预测的产业 技术源自把现有技术汇聚成一个大于部分和的整体。 创新是一种外部力量，是某些经济体比其他地方多出来的一点侥幸。诸如气候、地理和政治制度，决定了创新的速度，而这些东西，人们改变不了太多。 其他 企业最危险的时候，就是它实现成功的那一刻，因为那时候它的创新就停止了。 转折点 1900年以后的悲观主义 所有悲观的预言在真正到来之前就遇到了转折点，原因在于人类的发展是动态的。 悲观主义错用了外推法：他们认为未来无非就是规模和范围更庞大的过去。 悲观主义，能够给世人警示。在这一点上，它的功能远大于它所谓的语言。 当今时代的两大悲观源头 非洲和2010年后的气候 关于贫穷，统计数据和历史案例都表明了一件事情：靠援助是做不到启动经济或加速经济增长的这一事实。 我们不能计划出市场来，因为用一种自上而下的规定来设计一套之下而上的制度，这种尝试必然是要失败的。 是否拥有产权，是一个关键。赋予当地人们以可持续的方式拥有、利用自然资源，并从中获得利润的权利。大多数时候，他们都会保护并珍惜这些资源。若野生动物资源受高高在上的政府的保护 (“控制”)，对当地人没有好处，他们就会忽视它，破坏它。 对于气候，持乐观态度。 当下的创造力前所未有的爆发，未来可能的是：比如在太空架设装备，驾驭太阳风；利用地球的自传能量；在太阳和地球之间的拉格朗日点放上镜子，遮罩地球，减缓变暖的趋势。 其他 人口红利：处于工作年龄的人口相对于需要赡养的老人和小孩的所占比例大。 结语 对2100年的理性乐观态度 在假定技术不发生变化的前提下预测未来，是一种常见的伎俩，它让人觉得未来非常可怕。 未来，智慧越来越走向集体化，创造和秩序越来越自下而上，工作越来越专业化，休闲越来越多样化。用专业的生产交换多元化的消费。 自下而上的世界会成为本世纪最重要的主题。 在当下若要破灭创新的火焰很难，因为在网络化的世界里，它是一种自下而上的演进现象。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[个人日志_2017年4月总结]]></title>
      <url>%2F2017%2F05%2F03%2F%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97_2017%E5%B9%B44%E6%9C%88%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[4月总结 【运动&amp;健康】 7分4月的健康，勉强及格的分数，但在很多地方有了新的尝试；那是因为相比3月的精神状态，整个4月份真是大大下降了很多。对，就是精神状态，主要是因为每到周末，放乱的生活；好好的状态，就这样被一点点地侵蚀。我把它称之为 “ 周末魔咒 ”；一个可怕的魔咒呀。不过说到底，就是自律。Self - Discipline 4月3日的运动小跑，仅此一次的运动；3.26km，耗时23min 每日的作息生活，终于在4月下旬的时候开始慢慢转变过来，也算是弥补了一点小小的悔恨心情； 逐渐感觉到枕头对颈椎的帮助，至少睡下去的时候，颈椎没有那么不舒服了 电动牙刷，人生第一次的电动牙刷体验，算是一个突破；从整体来上看，电动牙刷确实能够帮助口腔健康；不过也花费了我200+大洋； 之后购买的小米手环，来了解自己的睡眠状态；秉承了自己的那句话：向死而生。做一个有品质单身汪； 办公室的电脑显示器，垫高了2个垫高板，同时把座椅也调到了最高，尽量使自己以最正确的坐姿来进行办公； 眼镜的选配；已经决定之后重新配眼镜（1副防蓝光，1副正常使用，同镜框，同度数） 【生活&amp;娱乐】 3分生活 = 工作；其实，这个是我对自己至少一年内所设定的标准；一定要常常反问自己，你来上海是为了什么。 迎来4月的第一天，闲逛在K11，坐落在大桌面前，静静阅读； 迎着黄浦江畔的风，夹着黑白的色彩，Shanghai Again；我对着自己说； 江畔的对面，第一次近距离地仰望上海中心；回想，自己似乎缺少一个自拍杆；嗯，确实缺少； 【阅读&amp;学习】 8分这个月啃完了2本书，建立了每天22:40 - 23:10 睡前阅读时间；还输出了1篇读书笔记《读书笔记_未来简史》，1篇学习方法《阅读与学习方法》 一本是小说故事类的情节，卢思浩 - 《离开前请叫醒我》；当初是在某个书吧偶然翻到的几页，感性的剧情，似有故事的文字，撩动着每个人心中那块柔软的地方，所以买下来作为窗前书随手翻阅； 一本是发展史类的逻辑性文章，[以色列]尤瓦尔 • 赫拉丽《未来简史》；其实，在第一遍阅读的时候，还是有很多地方困惑的；当读完之后开始做读书笔记的时候，重新梳理文章的思路，一切都开始变得清晰起来；所以，重新回顾之前的阅读方法，并整合自己的此次体验，重新输出《阅读与学习方法》 ，并把内容更新至印象笔记进行实时查阅。当然，根据自己的习惯，针对整个文章做了读书笔记《读书笔记_未来简史》 ，区别的是这次是用Markdown来做笔记；《未来简史》，通过回顾历史人类的发展，人类通过集群、文字与想象，来征服这个世界，然后通过内在的人文主义来扩大神化自己，到最后人工智能与大数据的出现，可能替代掉大量人类的现有工作，那不是因为AI能够做这类工作，而是因为这类工作AI能过做的比人类更好，而且还不是好一点点；大数据与人工智能的结合，使得机器能够完成人类无法完成的工作，他们的学习效率与速度是我们无法匹及的；使人类个体逐渐变得无作用，但人类整体仍然是一个有意义的群体； 《期货基本知识》&amp;《期货法律基础》，5月份要考的期货从业资格证，所以需要学习；结合之前的《阅读与学习方法》，对考试类的知识点如何来学有了新的方式：(1) 简单阅读一遍；(2) 核心点的梳理；(3) 做题来了解并巩固知识点 《书声》，一个由读书群体组织的活动，书生有声；每一期安排7位分享者，以一本书为主线，介绍相关的内容。 【工作】 7分相对3月的一片新鲜与无知，4月基本已经能够独立完成一些任务，同时对SQL的掌握也达到了一定的水平。需要注意：(1) 你的需求人是你信息的第一来源，而不会你的同事；所以，要与他们做充分的沟通，有疑惑也应该是首先去询问你的需求人； 相较于3月，腾出更多的自由时间来自己安排任务；或者说是选择任务；这个月，对R语言的操作进行了温习，并重点复习dplyr包、ggplot2包，常识性地对已有数据用R进行数据分析与作图； 4月的思索、困惑与解答 思索与困惑：(1) 数据分析团队的发展与各阶段核心工作内容；临时需求—报表需求—数据可视化—自助式分析—数据分析师的高维思考；思考公司当前所处的阶段，思考自己在这个阶段应该做什么(what)； (2) 听了TensorFlow使用者的分享，可以了解到他的工作内容与工作状态，那是针对于算法的不断优化；思考这样的工作状态，是我真正想要的？ 解答：数据分析的核心在于思路(算法)，而非工具(程序语言)；而所有的算法代码，都是先有伪代码 (你的思维逻辑)，然后你通过程序语言把它编译为计算机能够识别的语句。对于我来说，编程式的算法研究应该并不适合我，我所期望的应该仍然是以思维为主导的分析思路，同时以最好的方式进行呈现。但现阶段，主要工具的使用还是要去掌握。 【友情】 5分4月14日，对着黄浦江畔的Shanghai Again. 跟一些小伙伴建立了联系，告诉他们我回来找他们。看到朋友圈的小伙伴们还是都与我进行了联系。不过，在余下的2周的时间，依然没有见到任何一位小伙伴，有些小小遗憾。当然，自己在主动联系这点上，也是有关系的。4月约过某jing，某cao，某jia，各种不巧。所以，到了5月，至少要跟3位小伙伴见面。这是我对自己的要求。 4月的每个周末，或者说从3月以来的每个周末，几乎都是自己一个人度过的。但这也是我自己选择的。在这无所谓长短的2个月，会有那么一个分割点，会让人猛然觉得很希望有小伙伴一起度过周末。人心，就是如此吧。 在临近4月的尾巴，独自一人坐在东外滩的座椅上，迎着江风，邂逅一位小姑凉；各自坐着，不说话，就这样静静的。1个多小时的安静，最后还是小姑凉开的口，“ 你好，我叫乐乐 “。一聊原来是独自一人来到纷萧的上海，工作不顺，又无好友，所以坐在这江畔吹风。确实，在上海这样的城市，有多少年轻人怀揣激情来到这里，有多少人少年都经历着这样的苦痛，但他们依然户选择坚持。因为我知道是他们的不甘，来鞭策他们来到这个陌生的城市，独自一人。我能做的，也就只是默默期许。 【亲情】 9分现在对于家人，能够以更好的姿态与角色去与他们沟通，而不再像之前。之前更多的是自己思考，把事情都藏在心里；因为我知道，即使跟他们说了，也不会有任何改变；同时，对于父母的事情，也会以建议的方式跟他们好好沟通； 现在每次回家都有老爸老妈来火车站接我，感谢感谢！ 五一回家，陪父母散步，给父母买了他们需要的东西，老妈买了个颈椎枕头，老爸买了一套衣服。还带他们看了一场电影《拆弹专家》。说起来，他们已经有10年没有去电影院看电影了。 【投资】 0 分说起投资，没有任何动作。那也是因为经济拮据呀。不过，现在没有投资没有关系，但重要的是一定要时刻有这样的想法；并且，还要时刻去思考以后如何去实现财务自由；即使并不能达到，但一定要有这方面的考量；去思考，当到达什么样的一种情况，你能够以什么样的方式去运营自己，来走向财务自由。 【感恩回报】 5分房东的大哥大嫂，还有阿姨；虽然小朋友是个活泼的主，但房东一家人还是很有礼貌，很平易近人的； 华哥的分享与交流，华哥能够帮我解答我的困惑，帮我指出应该要做的事情，帮我讲解部门的发展历史，对我都很有帮助。而且还是在下班后的时间，聊到21:00多，真的很感谢华哥； 我的小伙伴们，因为可爱的小伙伴们，才能让我这么快就融入这个团队。 行政的小伙伴，帮我整理废纸给我做草稿，帮我带台历；很好的一个菇凉；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[数据分析_数据工作思索]]></title>
      <url>%2F2017%2F04%2F26%2F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E6%95%B0%E6%8D%AE%E5%B7%A5%E4%BD%9C%E6%80%9D%E7%B4%A2%2F</url>
      <content type="text"><![CDATA[一、数据工作内容的各个阶段 临时需求 报表查询；——报表的数量 与 涵盖主要指标 程度 报表可视化 自助式查询 分析师高维视角，提供全新的分析视角 数据分析的结果与呈现，是给谁看的，而对他来说什么是最重要的？ 这个问题，非常关键；很明显，一个组织中，从员工 — 主管 — 经理 — 总监 —事业部负责人 — 总经理，在这个层级中，等级越高，它所需要的内容就越是个性化，定制化的； 对越高等级的人来说，他们最宝贵的是==时间== ；如何以更方便的形式把他们所想要的知道的内容呈现给他们，这个才是核心问题。 (1) 建立自助式的可视化查询报表： ​ 主管与经理：这部分数据最频繁的使用者，也愿意自己去操作来获取针对性的数据信息 ​ 总监及以上：让他自己动手去查看与拖动模块来查询数据，对他来说太麻烦(浪费时间)；需要的是你以最快的方式，并且我能以最简单的成本来获取；——微信/邮件 (每个人都有，及时性也很好)；这部分信息是需要人工去进行处理，然后发送的； 报表，它所包含的数据指标是每天/非常频繁需要查看的，只有这样，你搭建报表的成本&lt;收益； 报表的使用对象：需要那些每天都知道具体数值，并且愿意手动去查看的中层管理者； 报表的适用性：针对大规模企业，由于地理位置的分散而产生的沟通与信息传递成本时，建议搭建报表系统( + 可视化) ； (2) 是否建立该类报表的评判标准：有多少人会通过这个报表系统去主动查询信息，并且获得了他们所要的信息； 信息可视化最大的意义与作用：将复杂的信息以简单的图表形式呈现出来，以节省阅读的时间 一个公司内部对数据呈现的要求：实用； 二、大数据、数据挖掘与深度学习所有的工具与算法（包括深度学习），它都是由人先去组织一个内在逻辑/算法 ( 伪代码 ) ，通过程序语言将这个内在逻辑/算法 输入给计算机，并且指定一个目标，让计算机去实现；所有，所有的算法都有一个指定的目标；即使对于深度学习，也是指定了一个目标。 对于深度学习，例如让计算器去辨识一只猫； 本质是图像识别计算，而计算机做的工作就是分类；把很“像”的东西归为一类；虽然计算机能够进行归类，但它并不知道这个就是猫，只是知道这些东西都很“像”，是一个类别的；因为，所谓猫这种生物，或者称之为猫是人赋予的一个定义；也可以叫做任何其他的东西； (1)之前的做法，通过输入各种算法，来描述猫的形态；例如颜色，胡须等等，跟计算机说符合这些特征的就是猫； (2)深度学习的做法，通过输入1k , 10k, 100k甚至更多的图像，告诉计算机这些都是猫的各种形态，最后让计算机去识别猫； 伪代码 vs. 代码伪代码：是高层次描述算法的一种方法。将整个算法运行过程的结构用接近自然语言的形式描述出来。当考虑算法功能（而不是其语言实现）时，伪代码常常得到应用。 本质上，伪代码 就是你的思维逻辑； 代码，就是你将你的思维逻辑通过某成一种程序语言描绘出来的具体实现指令； 三、当前阶段应该做什么 思维认知：理解数据分析与呈现的本质，应该呈现什么what (思考为什么要呈现这部分信息why)，以何种形式呈现how (如何去组织你的信息，来服务于你的目标)，这个是内在的核心思维； 在加深对内在逻辑思考的同时，去了解工具的具体应用与实现方法； 去了解数据可视化、自助式查询的具体实现方法；（工具） 自助式的数据可视化查询，并不是一个不好的工具，只是它有它的适用范围；当前公司不采用，只是说当前公司的类型与规模并不适合，所以还是需要去掌握；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SQL-server_高级查询]]></title>
      <url>%2F2017%2F04%2F17%2FSQL-server_%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2%2F</url>
      <content type="text"><![CDATA[SQLserver高级查询 批处理 what ：同时从应用程序发送到 SQL Server 并得以执行的一组单条或多条 Transact-SQL 语句；SQL Server 将批处理的语句编译为单个可执行单元，称为执行计划。执行计划中的语句每次执行一条。 how ： 在遇到运行时错误的语句之前执行的语句不受影响。 唯一例外的情况是批处理位于事务中并且错误导致事务回滚。在这种情况下，所有在运行时错误之前执行的未提交数据修改都将回滚。 批处理终止批处理分隔关键字是GO。批处理关键字必须是这一行的唯一关键字； 关键字GO之后可添加一个注释 切换数据库：把USE命令插入到批处理中 GO(Transact-SQL) what ：向 SQL Server 实用工具发出一批 Transact-SQL 语句结束的信号 how ：当前批语句由上一 GO 命令后输入的所有语句组成，如果是第一条 GO 命令，则由即席会话或脚本开始后输入的所有语句组成。 GO 命令和 Transact-SQL 语句不能在同一行中。但在 GO 命令行中可包含注释 12&gt; # GO [count] ; # count 一个正整数，GO 之前的批处理将执行指定的次数&gt; 语句终止：在每个命令的末尾放置一个分号（；） 在CTE前面必须要放一个分号（当CTE不是批处理的第一条语句时） 不要把分号放在If 或者 While 条件之后 不要把分号缝在 End Try 之后 语句终止符必须跟在Meger之后 ​ 声明：DECLARE DECLARE；制定某个变量为特定的数据类型，并可指定具体内容； Declare变量跟 变量名 和 数据类型，并用分号结尾； 单个Declare 声明中用逗号隔开多个变量 变量赋值用分号隔开； 变量是在批处理或过程的主体中用 DECLARE 语句声明的，并用 SET 或 SELECT 语句赋值。 游标变量可使用此语句声明，并可用于其他与游标相关的语句。 除非在声明中提供值，否则声明之后所有变量将初始化为 NULL 123Declare @test Int, @testtwo Varchar(20) ;Set @test = 1 ;Set @testtwo = &apos;a value&apos; ; 使用Set 和 Select 命令 Set 与 Select 对比 命令 描述 Set 限制在从表达式中检索数据； 一次只能设置一个变量 Select 可从数据源中检所数据，还可包括其他Select子句(From、Where等）；可使用函数 一次课设置多个变量 Set命令可以使用访问数据源的标量子查询（一个变量） 如果你希望在确保没有行的情况下将变量设置为NULL，以及在不止一行的情况下获得一个错误，这是最佳做法； 【Select 命令在检索多行时，只会将最后一行的值存储在变量中】 123456789101112Use adventureworks2012GODeclare @productID Int, @producename varchar(25);Set @productID = 782; --声明一个变量Select @productID = productID, -- 声明多个变量； @productname = @productID + name --声明变量可叠加使用 From production.product Order by productID; Select 声明，即将 @var = value 作为一个整体，当做Select查询中的列去看待即可 声明变量可叠加使用 如果Select语句没有返回行，Select语句不会影响变量 12345678910GODeclare @productID Int, @producename varchar(25);Set @productID = 999;Select @productID = productID, -- 声明多个变量； @productname = @productID + name --声明变量可叠加使用 From production.product Where productID = 1000; -- 由于ProductID 没有1000，故ProductID仍未NULL 声明示例 12345678910111213141516171819202122232425262728293031323334353637383940# DECLARE @local_var data_type [= value] # 直接声明declare @mycounter int;DECLARE @find varchar(30) = &apos;Man%&apos;; # 使用名为 @find 的局部变量检索所有姓氏以 Man 开头的联系人信息 --Select ... WHERE LastName LIKE @find; # 使用select声明DECLARE @var1 varchar(30) SELECT @var1 = (SELECT Name FROM Sales.Store WHERE CustomerID = 1000) # 用声明并赋值过的变量构建一个Select语句并查询Select lastname,firstname,title From employees where firstname= @firstnamevariable or region=@regionvariable# 声明日期，并应用DECLARE @起始日期 date set @起始日期 = dateadd(dd,-3,getdate())Select top 100 * From [exchange].[YTX].[v_allcj] where 结算日期 = @起始日期------------------------------------------------# 声明多个变量declare @last_name varchar(30),@fname varchar(20);DECLARE @起始日期 datatime, @截止日期 datatimeset @起始日期 = &apos;2017-03-07&apos;;set @截止日期 = &apos;2017-03-07&apos;;# 给多个变量赋值declare @firstnamevariable varchar(20), @regionvariable varchar(30)set @firstnamevariable=&apos;anne&apos;set @regionvariable =&apos;wa&apos;------------------------------------------------------------全局变量select @@version --返回数据库版本select @@error --返回最后的一次脚本错误select @@identity --返回最后的一个自动增长列的id 过程流 使用条件T-SQL的If命令 一个if，一个命令的执行；并且没有Then和End来终止if命令； 123456789101112131415161718If condition Statement;If 1=0Print &apos;Line one&apos;;Print &apos;Line two&apos;;--结果返回Line two；--if语句之后没有分号； if语句实际上是后面语句的提前；----------------------------------------------------------------------------------# 使用Begin / End 有条件地执行多条语句If condition Begin; Multipie Line; End; --每个都有分号 使用If Exists()作为基于存在性的条件 If Exists() 结构使用从SQL Select语句返回的每一行作为条件。 因为If Exists() 结构会查找每一行，所以Select语句应当选择所有的列。一旦一个单行满足了If Exists()，查询就会继续执行 12345If Exists (Select * From production.product Where quantity = 0) Begin; Print &apos;Relpenish Inventory&apos;; End; 使用If / Else 执行替换语句 可选的Else定义了if条件为False时的执行代码；Else可控制下一个单个命令，后者Begin/End块 1234If condition Single line or Begin/End block of code; Else Single line or Begin/End block of code; – 使用While循环 what ：当条件为ture时循环代码； 触发器 - trigger what：一种特殊类型的存储过程，对特定事件作出相应。一种隐式的存储过程 数据定义语言(DDL)触发器 DDL触发器在用户以某些方式(CREATE、ALTER、DROP或相似的语句)对数据库结构进行修改时激活作出响应。一般来说，只会在对数据库结构的改变或历史进行极为严格的审计时才会用到DDL触发器。 数据操纵语言(DML)触发器 附加在特定表或视图上的代码片段；与需要显式调用代码的存储过程不同，只要有附加触发器的时间在表中发生，触发器中的代码就会自动运行。实际上也不能显式地调用触发器 after触发器（之后触发） INSERT触发器、DELETE触发器、UPDATE触发器 instead of 触发器（之前触发） 有时即使执行的动作是前面这些类型中的一种，触发器也不会激活。问题在于进行的操作是否在记录的活动中。 例如，DELETE语句是一个正常的记录活动，它会激活任何删除触发器，而TRUNCATE TABLE也有删除行的作用，但只是把表使用的空间释放而已-没有记录单个行删除操作，所以没有激活任何触发器。批量操作默认情况下不激活触发器，需要显式告知批量操作激活触发器。 1234567--创建触发器CREATE TRIGGER &lt;trigger name&gt; ON [ &lt;schema name&gt;. ]&lt;table or view name&gt; [WITH ENCRYPTION | EXECUTE AS &lt;CALLER | SELF | &lt;user&gt; &gt; ] &#123;&#123;&#123; FOR | AFTER&#125; &lt; [DELETE][,][INSERT][,][UPDATE] &gt; &#125; | INSTEAD OF &#125;[WITH APPEND][NOT FOR REPLICATION] AS &lt; &lt;sql statements&gt; | EXTERNAL NAME &lt;assembly method specifier&gt; &gt; ON子句：对创建触发器所针对的对象进行命名。 如果触发器的类型是AFTER触发器(使用FOR或AFTER来声明触发器)，那么ON子句的目标就必须是一个表-AFTER触发器不支持视图。 WITH ENCRYPTION选项：加密触发器 如果添加了这个选项，则可以确保没有人能够查看你的代码(甚至是你自己) FOR|AFTER子句与INSTEAD OF子句 除了要确定激活触发器(INSERT、UPDATE、DELETE)的查询类型以外，还要对触发器的激活时间做出选择。虽然人们经常考虑使用FOR触发器，但是也可以使用INSTEAD OF触发器。对着两个触发器的选择将会影响到是在修改数据之前还是之后进入触发器。 ( FOR和AFTER的意义是一样的。) ​ FOR|AFTER：表明了期望触发器在何种动作类型下激活。当有INSERT、UPDATE或DELETE或三者混合操作时，都可以激活触发器。 1234&gt; &gt; FOR INSERT,DELETE --或者是: &gt; &gt; FOR UPDATE,INSERT --或者是: &gt; &gt; FOR DELETE&gt; &gt; &gt; INSERT触发器：当有人向表中插入新的一行时，被标记为FOR INSERT的触发器的代码就会执行。 对于插入的每一行来说，SQL Server会创建一个新行的副本并把该副本插入到一个特殊的表中，该表只在触发器的作用域内存在,该表被称为Inserted表。 DELETE触发器 ：它和INSERT触发器的工作方式相同，只是Inserted表示空的(毕竟是进行删除而非插入，所以对于Inserted表示没有记录)。 相反，每个被删除的记录的副本将会插入到另一个表中，该表称为Deleted表，和Inserted表类似，该表只存在于触发器激活的时间内。 UPDATE触发器 ：对表中现有的记录进行修改时，都会激活被声明FOR UPDATE的触发器的代码。 唯一的改变是没有UPDATE表。SQL Server认为每一行删除了现有记录，并插入了全新的记录。声明为FOR UPDATE的触发器并不是只包含一个表，而是两个特殊的表，称为Inserted表和Deleted表。 ​ WITH APPEND选项：到它的可能性很小；WITH APPEND选项只能应用于6.5兼容模式中。 一旦创建了更新(或插入、删除)触发器，那么就不能创建另一个同一动作类型的触发器。为解决这个问题，WITH APPEND子句显式地告诉SQL Server，即使在表上已经有了这种类型的触发器，还可以添加一个新的触发器。当有合适的触发动作(INSERT、UPDATE、DELETE)发生时，会同时激活两个触发器。 NOT FOR REPLICATION选项 如果添加了该选项，会稍微地改变关于何时激活触发器的规则。在适当的位置使用这个选项，无论与复制相关的任务何时修改表，都不会激活触发器。通常，当修改了原始表，并且不会再进行修改的时候会激活触发器(进行内务处理或级联等操作)。 AS子句：AS关键字告诉SQL Server，代码将要启动。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《未来简史》_读书笔记]]></title>
      <url>%2F2017%2F04%2F16%2F%E3%80%8A%E6%9C%AA%E6%9D%A5%E7%AE%80%E5%8F%B2%E3%80%8B_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[《未来简史》 - [以色列]尤瓦尔•赫拉丽(Yuval Noah Harari) 序 人类的新议题回顾困扰人类的三大议题，在时间的长河中逐渐解决之后，引出新时代的三个议题； 原有的议题 原有的议题 当下的 “ 改变 “ 饥荒 夺走生命的数量：肥胖&gt; 饥饿和营养不良 瘟疫与传染病 ~流感、黑死病~ 非传染性疾病 ~癌症、心脏病~ 战争 新时代的议题 新的议题 描述 战胜死亡 变化：由过去的神学问题 $\to$ 技术问题 追求幸福 两大方面：生理层面、心理层面（主观条件） 人成为神 三条路径：生物工程、半机械人工程、非有机生物工程 备注： 这里的人，并不指个人的人，而是“人类整体” 这仅仅是一项预测 追求，但不一定能够实现 死亡：原先认为死亡是无法避免的；但现在已经认识它只是部分机能的失效；如果我们能够更换细胞（更换心脏）、或者通过科技方法（基本、纳米技术、再生组织与器官）来进行机能的重塑，就可能延长甚至重新定义生命； 生命的延长会产生巨大的变化：婚姻、职业生涯 快乐：快乐与否取决于你的预期，而非客观条件；但随着客观条件的改善，预期也会不断膨胀；现在能让你感到快乐的事情，下一次发生的时候可能就不会如此 ； 快乐是主观的，是短暂的；获得快乐时，我们的反应不是满足，而是想得到更多； 19世纪和20世纪，国家虽然打造了一系列利于个人的系统，但它们最开始的出发点是为了国家强大，而不是确保个人福利； 成立学校 $\to$ 培养温顺而有技能的国民，为国家服务* 卫生系统 $\to$ 国家需要强大的士兵和工人 福利制度 $\to$ 最初开办养老金制度，主要目标是确保国民忠诚；你18岁的时候为国家打仗，在40岁愿意纳税，那是因为希望到70岁的时候可以得到国家的照顾； 【很多人追寻事业单位&amp;国有企业，出发点也是这样】 人成为神： 生物工程：基因、神经元、大脑回路 半机械人工程：让人体与各种非有机的机械装置（仿生手、义肢，或是将纳米机器人注入我们的血管，让它们负责修补） 例证：瘫痪的病人能够仅靠意念就移动仿生肢体或操作计算机 非有机生物工程：智能软件替代神经网络，无机生命替代有机生命 一旦走上这条路，将没有刹车；因为人类只要一有重大突破，就不可能只局限于它最初的目的； 其他知识 对于草坪的认知：富人的场所往往会有一片草坪，越大说明越富有； 【每个现象的背后一定会有它的原因】 因为贫穷的农民绝对不可能把土地与时间浪费在草坪上；于是，城堡入口的那一片草坪成了无法造假的身份的象征；之后，看到草坪，就会联想到权利、金钱和欲望 研究过去不是为了重复过去，而是为了从中获得解放 人们之所以害怕改变，是因为害怕未知。但历史唯一不变的事实，就是一切都会改变。 一、智人征服世界了解智人是一种怎样的生物。 人类与其他动物有何不同？ 人类如何征服世界？ 智人真的是比较高级的生命形式？还是仅仅只是欺负其他物种的生物而已？ 人类对待其他动物（世界）智人对地球的影响 人类灭绝和主宰了其他动物，征服了世界。 智人突破了地球上各个生态区之间的阻碍。在人类世，地球上各个区域之间是联系在一起的，地球有史以来第一次成为一个单一的生态系统。因为在智人以前，各个生态系统之间是彼此独立的； 智人开始突破自然选择的边界；几亿年来，生物的进化无论怎么变化都是在有机领域；而智人正准备将生命形式从有机领域延伸到无机领域。 生物也是一种算法 引出一个非常重要的核心观点：生物也是一种算法。 人和其他动物一样，都是一套以繁衍为目的的生物算法。只不过人类的算法，则是通过感觉、情感和思想来运作。 理念的转变（对待其他动物） 狩猎采集：平等地对待其他生物；人能否存活，有赖于理解和尊重周围动物的欲望； 农业社会：把动物从有感情、值得尊重的生命体降格为人类的资产；人类以自身需求驯养动物，无视动物的情感需求；研究表明，动物（尤其是母子之间）是有感情需求的。 进而把不同等级的人也视为资产；比如，出现过把人当做奴隶，随意处决； 农业社会产生了有神论者；有神论承认了人类的主导地位，可以剥削其他生物。比如基督教； 人类赋予诸神以神格，但同时也将人神格化了。 表面上，神创造了人类；但是，神要负责在人类和生态之间进行调节；但只有人才能与神交谈；（隐藏着说明，人类世高于其他生物的物种。） 现代社会：把人视为高于其他物种的存在；人文主义奠基了智人拥有某种独特而神圣的任性，动物则没有，而自然也不再重要； 人类的特质人有灵魂人有心灵作者并没有直接给出人类是否有心灵的答案；因为我们无法解释心灵； 人类的一切行为或感受都发生在神经网络中（当人有不同的情绪时，大脑不同区域的神经元有不同的反映） 如果一切都发生在神经网络中，那何必把心灵独立出来？ 如果心灵高于神经网络，那它又在哪里？ “他心问题” - “图灵测试”：但即使通过了测试，也并不能说明什么。 【这只是一个知识补充，并不是主要的核心观点】 ​ what ：图灵测试认为，想判断一台计算机有没有心灵，做法是安排测试者同时与真人和一个计算机沟通，而测试者不知道哪个是计算机哪个是人；最后让测试者对它们的身份进行判断；如果无法判断或打错，就认定它具有心灵； 图灵从自己的个人经验得出：你是谁并不重要，重要的是别人对你的看法了； 人有意义之网 动物只能想象实际存在的东西，而人类可以想象虚拟的东西，想象主体间的东西，比如国家、组织、法律。 只有智人才能够大规模且灵活的合作；并且，人类可以通过虚构的故事组织大规模的协作，这是人类的力量被放大、主宰世界的根本原因； 所有的大规模合作，都是基于我们想象的秩序； 想要破解未来，必须破解出种种赋予世界的虚拟构想； 客观现实、主观现实之外的第三种现实：互为主体的显示；互为主体的现实，并不是因为个人的信念或感受而存在，而是依靠很多人的沟通互动而存在的。这是个体集聚引发的群体效应；金钱原本是没有客观价值的 当大家一起编织出共同故事网的那一刻，意义就产生了。 那些诸神，都是我们虚构的；在斋戒日禁食，清明节扫墓，这些日期原本就是一个再正常不过的日子，只不过当我们一起编程的时候，意义就产生了。 智人统治世界，只因为只有智人能编织出互为主体的意义之网：其中的法律、约束力、实体和地点都只存在于他们共同的想象之后。 二、智人为世界赋予意义人类创造了怎样的世界？ 人类为何如此深信自己不但控制了世界，还能赋予世界意义？ 而人文主义（即对人类的崇拜）又是如何成为所有人最重要的宗教的？ 虚构的力量智人活在一个三重世界中： 客观世界（客观实体：河流、山川） 主观世界（内在的主观体验：恐惧、喜悦） 想象世界（金钱、神、国际、企业、品牌）； 品牌的价值，甚至高于客观实体的价值； 想象的虚拟实体 5000年前，人类发明了文字和金钱；文字：催生了强大的虚拟实体； 企业、组织，它们的力量在于能够将虚构的信仰建立在一个让人顺从的现实之上； 货币概念；整租制作一些本身并无价值的纸币，宣布它们是有价值的；强迫人们用这些纸张，人们别无选择 教育系统；那些优秀职位都是由成绩好的人抢下，所以它们宣扬考试是评估的最好方法 故事本应该只是工具，但却成为了目标 公司、组织和货币，都只存在于我们的想象之中，是人类发明了这些概念，好让它们为人类服务；但是，为什么最后反倒是人类为这些概念服务，甚至牺牲生命？ 要努力区分虚构和真实；我们一旦忘记了哪些是虚构的，就会开始跟现实渐行渐远 判断真实实体的标准：它是否会感觉到痛苦 未来会有更加强大的虚构概念 科学与宗教之争 虚构故事是人类社会的基础和支柱，随着历史的不断演进，关于神、国家、组织的故事越发强大，以致于开始主宰客观世界。 宗教 宗教不是超自然 宗教不是是否信仰“神”的问题 宗教是要巩固世界秩序； 宗教认为，人类受制于某种到的法则系统，这个系统并非由人所创造，也非人能改变 宗教是一套无所不包的故事，能够为人类的法律、规范和价值观赋予高于人类的合法性 科学与宗教 宗教并非只管伦理判断，它总是包含事实声明； 典型的宗教故事的三部分： 伦理判断：例如，“人命神圣” 事实声明：例如，“人命始于受孕那一刻” 两者相结合，得到具体的指示：例如，“就算受孕第一天，也不能堕胎” 对于宗教的伦理判断，科学无法反驳；但事实声明的部分，科学可以反驳； 宗教在乎的是“秩序”；目的是创造和维持社会结构； 科学在乎的是“力量”；目的是通过研究得到力量，以治疗疾病、生产食物； 现代历史其实是科学与特定宗教（人文主义）达成协议的过程，现代社会相信人文主义，而科学不是为了质疑，而是为了实现它的教义； 与“现代”的契约前现代人放弃了力量，相信了意义；例如，对当时的人来说，是否在战场上英勇战斗、是否早餐吃了禁忌的食物，都被赋予了重要的意义；如果发生什么可怕的事情（例如洪水、旱灾），我们会说这都是上天的旨意； 现代契约的本质：人类愿意放弃意义，换取力量。 现代生活就是在一个没有意义的宇宙里不断追求更多的力量。 现代社会对力量的追求： 人类原本的思维是资源是有限的，所有我不愿意将当下的资源拿来做研究与开发； 现代社会的理念基础是：经济不仅有可能增长，而且还是必要的。 直到现代社会，人们才开始相信未来，所以有了信贷这项奇迹；使得人们愿意将当下的资源拿出来做开发与研究，为的是换取未来更多的资源； 相信未来：这是经过几千年直到现在社会才出现的；因为，这一想法从根本上违反直觉、进化经验和世界运作的方式。 自然系统多半呈现平衡状态，而且生存之争大部分都是零和博弈，一方发展，另一方必然受到限制 自然界的万物相互制约，维持某种平衡； 例如，一片地区，如果狐狸多了，那被吃掉的兔子自然就少了，使得狐狸数量增加；但因为兔子数量的减少，使得部分狐狸会找不到食物就会饿死，然后狐狸的数量就下降了，接着兔子的数量开始增加； 离开了意义，现在社会之所以还在发展，是因为兴起了一种革命性的宗教：人文主义 人文主义革命人文主义崇拜人性，期望由“人类”来扮演上帝在基督教、伊斯兰教中中扮演的角色，或自然法则在佛教和道教中扮演的角色。 人文主义认为：人类必须从自己的内在体验找出意义，而且不仅仅是自己的意义，更是整个宇宙的意义； 人文主义的主要训诫：为无意义的世界创造意义。 人文主义让我们认为，人类自己就是意义的本源，因此自由意志也是最高的权威； 人文主义的教条 人文主义政治：选民能做出最好的选择 人文主义经济：顾客永远是对的； 即使你做出了完美的汽车，但市场上如果没有任何人购买，那说明顾客不懂欣赏？NO. 如果顾客不想要，那就说明这款车不够好； 人文主义美学：看的人觉得美，那就是美（与该事物实际是什么没有联系；就像抽象派的画） 人文主义伦理：感觉对了，那就去做 人文主义教育：要自己思考； 中世纪，所有意义和权威来自外界；因此教育的重点在于顺从、背诵经文、研读古老传统 现在教育，意义和权威源于我们的内心，所以重要的是你自己对这些事物的看法； 对知识的看法： 中世纪的欧洲，知识 = 经文 $\times$ 逻辑 科学革命，知识 = 实证数据 $\times$ 数学 人文主义，知识 = 体验 $\times$ 敏感性 体验：体验是一种主观现象；知觉、情绪与想法； 任何时候，体验都包括了我的一切知觉（热、紧张），我感受到我的情绪（愤怒、恐惧），自己一切我脑海中的想法 敏感性：（1）注意到自己的知觉、情绪和想法；（2）允许这些体验影响自己 体验和敏感性会形成一个互相加强的无限循环；比如喝茶，刚开始我只喝最普通的茶。直到某一天，我开始闭上眼睛，专心喝茶。我开始感受到茶独特的香味；很快，我想开始尝试不同的茶。再到后来，我不能满足普通商铺里的茶，追求更高品质的茶； 到了人文主义，重点放在了感受与体验上，而不是各种行为；而对战争的描述，业从神、伟大的英雄，转移到小兵和他们的体验上。（从一些电影作品以及其他艺术作品中可以看得到。） 人文主义的分裂 自由主义；每个人都是独特的，拥有永不重复的体验 【关注点：自我】 社会人文主义；社会主义责怪自由主义太过注重自己的感受而忽略他人的体验 【关注点：他人，关注自己的行动如何影响他人】 进化人文主义；各种体验和感受的冲突不可避免，最适合胜出； 三、智人失去控制权人类还能继续掌握世界、赋予世界意义吗？ 生物科技和人工智能将如何威胁人文主义？ 谁可能继承人类的角色，什么新宗教可能取代人文主义？ 为什么实现人为主义的梦想反而可能导致人文主义的崩塌。 实验室里的定时炸弹自由意志 自由主义的基础是人有自由意志，这是事实声明； 事实声明科学是可以介入的： 【从科学的角度来解释人的行为这一事件：人的行为只是某种电化学反映到产物】 每一个电化学反应都是前一项事件决定的，那最后达成的决定肯定也不是自由意志； 科学给出人类行为的解释，那就是特定的基因构造让大脑出现某种电化学反应，并进而引发行为； 按照这种解释，人的欲望不是一种“选择”，我们只能“感觉”到欲望，再据此行事； 毕竟，欲望也只是神经元的某种放电模式而已； 如果原子随机运动产生的决定，当然就是随机的，不能是自由意志 ​ 个人主义自由主义认为每个人都有单一的、不可分割的自我。但裂脑人实验，表明自我是可以物理分割的；左脑控制逻辑推理与语言，右脑控制图像；当有人问一个青年，你长大后想做什么，他会回答，“绘图员”；但如果不是让他以语言的形式回答，让它用自己的左手去拼写出未来想要做的事情，得到的结果却是“汽车比赛”；同样的情况也出现在其他实验中；即，左右脑对输出的内容是不同的； 并且，左脑不仅控制表达能力，还是个内部翻译人员；当左右脑控制的部分得出的结果不同时，由左脑对整个现象进行解释，并在两者之间建立某种联系，来表明他们之前的合理性； 冰水试验，引出人的两种自我：体验自我、叙事自我 体验自我：我们每时每刻的意识；并且它没有记忆力；它不会讲故事，并且当我们做重大决定的时候，也不会去问它的想法 叙事自我：就像左脑的内部翻译人员，永远忙碌着将过去的各个细节联接起来，编织成一个故事，并为未来做计划。 两者的关系：叙事自我就像记者或政治人物，他们不会描述所有细节，通常只用事件的高潮和最后结果来编织故事。整个体验的价值，是通过把峰值与终点加以平均而确定的。 案例1：冰水试验：对同一个人进行两种方式的试验；试验结束7分钟之后，如果他们必须再做一次，他们选择做哪一个实验： （1）“短”实验：时长60s，受试者将一只手放进14℃的冷水（足以让人不舒服）中60s，之后把手拿出来； （2）“长”实验：时长60s，受试者将一只手放进14℃的冷水（足以让人不舒服）中60s；之后研究人员会偷偷将热水导入容器，使水温略升为15℃。使得在最后一刻的水温升高； 这两个实验的顺序并不会固定的，受试者可以先做短或者长的试验，然后在调换做第二个；试验结束7分钟之后，如果他们必须再做一次，他们会选择哪个实验；结果表明，有80%的人选择了“长”实验。 叙事自我对两个实验的解释：（1）“短”实验，将最差的部分（水非常冷）和最后一刻（水还是非常冷）做平均，结论就是水非常冷；（2）“长”实验，将最差的部分（水非常冷）和最后一刻（水没那么冷）做平均，结论就是”水稍微温和一点“。 重点在于，叙事自我对时间持续多久没有感觉。 案例2：大肠镜检查：对患者进行大肠镜检查，之后请他们用 0 ~ 10来评价整体疼痛程度 假设：疼痛程度评分与疼痛持续时间相关；即持续时间越久，承受的痛苦越多，评分也应该越高。 结论：检查时间更久但在最后一刻减轻疼痛的对象，对整体疼痛的评分反而较低 （1）实验1：检查时间为8分钟，患者给出最高疼痛指数为8，最后一分钟打分为7；到最后，给出总的疼痛程度为7.5 （2）试验2：检查时间为24分钟，患者给出最高疼痛指数为8，最后一分钟打分为1；到最后，给出总的疼痛程度为4.5 试验2承受疼痛的痛苦要多很多，但并没有影响他的记忆。 叙事自我对我们的体验下判断时，并不会在意时间持续的长短，只会采用“峰终定律”，即只记得高峰和终点的体验，再平均作为整个事件的体验。 【对我的影响：今后自己做判断的时候，要理性地看待全局，避免峰终定律的影响；】 大分离科学对所谓人不可替代的说法的回应： 人类将失去在经济和军事上的用途，因此经济和政治制度将不再继续认同人类有太多价值； 社会系统仍然认为人类整体有其价值，但个人则无价值 社会系统仍然认为某些独特的个人有其价值，但这些人会是一个超人类的精英阶层，而不是一般大众； 超人类掌控世界，人类失去平等；智能是必要的，但意识并非如此；科幻电影通常假设计算机如果想赶上人类甚至超越人类就必须发展出意识；但如果想达到超级智能，并不是一定需要通过意识；例如，无人汽车；它的作用只是将人安全快速地从A地运送到B地；就这一点，自动汽车如果能够比人类做得更好，就算它不能享受音乐，那又怎么样呢？ 如果当所有的汽车均由计算器控制，那整个交通控制权就交给计算机算法，那就能将所有车辆连接成单一网络；控制车辆的算法能够清楚掌握两辆车在路上的位置和行动方向，绝不可能允许自己操纵的两辆车就此相撞；这就大大降低车祸的发生率； 算法掌控世界，人类失去神性人类整体仍有价值，但个人将不再具有权威，大部分选择由外部算法来管理。 大部分人类都将失业，或者失去价值；因为它们能比你做的更好； 例如，当有一个智能机器人，它搜集了你的所有数据，学习了所有的医疗知识，能够以远胜于顶尖医生的程度帮你诊断病情，同时根据你的家族与基因，然后跟你说，“今天开始的一个月，你要开始吃xx药”；但你此刻不觉得自己又任何疾病或者不适，你问它为什么？它回答，根据你的家族与基因，以及近期的生态特征的表象，包括脉搏、血压等等，得出的结果你应该吃这个。然后你继续问，为什么得出这个？它回答，查阅了所有相关的资料，然后解释原因需要1天的时候，这个时候你是选择听它的还是不听它的。也就是那个时候，它比你自己更加了解你自己的时候。 自工业革命爆发以来，人类就担心机械化可能导致大规模失业，然而这种情况并没有在过去发生。这是因为随着旧职业的淘汰，会有新职业的出现；因为总有一些事情人类做得比机器更好。人类只有两种能力：身体能力、认知能力；在机器与人类的竞争在仅限于身体能力时，人类边专注于需要至少一些认知技能的工作。然后，一旦算法在记忆、分析和辨识各种模式的能力上超过人类，那就会更进一步替代人类； 深度学习 对于智能的机器人，我们不再像过去一样给它算法让它来实现，而是让它自己学习；我们提供给系统的唯一信息就是屏幕上的原始像素，以及指示系统要努力得到高分。剩下的一些都是它自己解出来的。我们也并不知道具体是怎么解答出来的。 Googel 的 AlphaGo软件自学围棋；2016年3月，与韩国棋王李世石在首尔举行了一场比赛，AlphaGo最终以4:1打败李世石；在赛后分析AlphaGo的棋路后，多数人的结论则是人类在围棋上已经不再有希望打败它了。据称，当AlphaGo刚开始输掉一场比赛之后的晚上，作为人类的我们在晚上必然要休息。而AlphaGo却在晚上自己跟自己下了一万盘棋。这样的学习速度与密度，令人可怕。 事实上，随着时间的推移，不仅是因为算法越来越聪明，也是因为人类逐渐走向专业化，所以用计算机来取代人类越来越容易；远古的狩猎者想要生存下去，就要掌握各种各样的技能，正因为如此，想设计狩猎机器人的难度非常大。而现在，人工智能不必要在所有的综合能力上胜过人类，只要在特定行业需要的特定能力上超越人类，那就足够了。 即使，对于艺术（例如作曲）这件事，已经有机器人做出的曲子，让人大为称赞； 【个人观点：即使，计算机能够在艺术上制作出让人惊艳的作品；但毕竟感情的促发，是需要活生生的人类来演绎；所以，认为在这个事情上，作品不能替代感情。】 生命科学对自由主义的挑战 自由主义对个人主义的信念的前提假设 我是一个不可分割的个体。即我具备单一的本质，无法在分为各个部分或者子系统。在最深处的内在，有一个清晰、单一的声音，也就是真正的自我。 真正的自我是完全自由的 根据前两个假设，我能够了解一些别人发现不了的自己。也只有我能够进入自己内心自由的空间，只有我能够听到自己真实自我的声音。因此，自由主义才赋予个人极大的权威； 生命科学对这三个假设剔除的挑战 生物就是算法，人类不是不可分割的个体，而是由可分割的部分组成；即人类世许多不同算法的组合，并没有单一的内在。 构成人类的算法并不“自由”，而是由基因和环境压力塑造，虽然可能根据决定论或随机做出决定，但绝不“自由” 因此，外部算法有可能比我更加了解自己。如果能用某个算法监测组成身体和大脑的每个子系统，就能清楚掌握我是谁、我有什么感觉、我想要什么 其他知识 自由主义面对社会不平等的解药，不是让每个人都拥有同样的体验，而是对于不同的人类体验赋予同等的价值； 20世纪是大众的时代。20世纪的军队需要几百万的健康士兵，经济发展也需要几百万的健康工人；因此，各国都建立起公共服务卫生体系，以确保国民的活力与健康。人类最大的医疗成就正是为大众提供卫生设施、疫苗接种，消灭流行病； 意识的海洋 - 新的宗教科技 科技人文主义 仍然认为人类世造物的巅峰之作，智人升级为神，对抗最复杂的无意识算法 人文主义认为，只有人的欲望才能使世界充满意义。但如果我们连欲望都能选择，又凭借什么来做选择呢？ 但它面临一个无解的两难，它认为人的意志是宇宙中最重要的东西，因此推动人类开发控制；但一旦控制意志，人边失去神圣性，无法在科技面前立足； 数据主义 人类已经完成了自己伟大的宇宙任务，应该把接力棒传递给完全不同的实体； 数据主义数据主义认为，宇宙是由数据组成的，任何现象或实体的价值，在于对数据处理的贡献；在达尔文发表《物种起源》的150年后，生命科学已经认为生物体都是生化算法； 数据处理的两种概念整个世界，就是一个数据处理器；针对不同的情况，只不过整个处理器是单一的处理器*（集权组织，所有的决定都由少部分的集权人士来决定），还是一个*分散的处理器 经济系统 资本主义赢得冷战，并不是因为它更合理或是上帝对苏联降下怒火，而是因为这个阶段分散式的数据处理比集中式更优秀 政治系统 民主与专制本质上也是两套关于收集和分析信息的对立机制 全人类是一个数据系统，个人是芯片 人类历史就是一个数据的处理过程 增加处理器数量；拥有10万人口的城市，运算能力就会高于拥有1000人口的村庄 增加处理器种类；如果单一系统拥有不同的处理器，就能增加其动力与创意；农民、祭祀和医生所产生的想法，可能是狩猎者怎么也不会想到的 增加处理器之间的连接；如果只是增加数量与种类无法连接，是没有意义的；10个有连接的城市产出的效益通常都会高于10个孤立的城市； 增加现有连接的流通自由度； 这四个方面是互相矛盾的；处理器的数量与种类越多，自由连接就越困难；因此，智人数据处理系统的构建方法分成四个阶段，各自强调不同的方法； 人类已经经历了这四个阶段 认知革命；开始能够将大量智人连接为一个单一的网络；村落、部落的形成；对其他物种来说，能够连接成单一网络的个人数量有限制，但智人打破了这个限制；智人走向了各地，分散到不同区域，感受不同气候，并开始逐渐失去联系，经历不同的文化变革； 农业革命开始，持续到大约5000年前；农业加速了人口增长，使人类处理器数量急剧上升，更多的人生活在一起形成密集的地方网络； 约5000年前发明了文字和货币，结束与科学革命；有了文字和货币，人类合作开始走向鼎盛，各个团体融合起来，形成城市和王国；人类开始有意识地将整个地球联接为一个单一的网络； 约1492年，早起的探险者、贸易商使得整个地球初步联接为一个单一的网络；到了21世纪，更是形成了快速联通的网络。更重要的是，随着信息科技与网络的发展，信息能够在整个全球网络里自由流动； 信息自由就是最高的善数据主义的诫命： 要连接越来越多的媒介，产生越来越多的信息 把一切连接到系统，连不想加入的异端也不例外 数据主义将人类体验视同数据模式人文主义认为所有的体验发生在我们心中，我们要从给自己的心里找出一切事物的意义，进而为宇宙赋予意义； 数据主义认为，不分享就没有价值，而且我们不需要（甚至不可能）从自己心里找到意义；我们该做的，就是要记录自己的体验，再连接到整个大数据流中，接着算法就会找出这些体验的意义，并告诉我接下来要怎么做。 前几代人中，写日记只给自己看是很常见的人文主义；但现在很多年轻人会认为，如果么有人读到那不就是白写了？所以，现在的座右铭是 “ 如果你体验到了什么，就记录下来。如果你记录了什么，就上传。如果你上传了什么，就分享； ” 在18世纪，人文主义从以神为中心的世界观走向以人为中心，把神推到了一边。在21世纪，数据主义可能从以人为中心走向以数据为中心，把人推到一边；并且，数据主义对人类的威胁，正如人类对其他动物的威胁；数据不在乎我们的主观需求； 最重要的三个事项和问题 正在发展的三个事项 科学正聚合于一个无所不包的教条，也就是认为所有生物都是算法，而生命则是进行数据的处理。 智能正与意识脱钩 无意识但具备高智能的算法，可能很快比我们更了解我们 对应的三个问题 问题1：生物真的只算是算法，而生命也真的只是数据处理吗？ 问题2：智能和意识，究竟哪一个才更有价值？ 问题3：等到无意识但具备高度智能的算法比我们更了解我们自己时，社会、政治和日常生活会发生什么变化？ 其他知识 对于汽车与交通工具的新的认识：即使对于私人汽车，我们真正想要的并不是车辆本身，而是移动的便利；如果有一个智能系统，我能让计算机知道我需要在08:04准时上车，计算机把无人汽车调过来，把我送到公司之后就离去，它能够去服务于其他人；（如果我有自己的车辆，这个时候它应该就停在某个地方，消耗时光）到了18:11分，我走出公司门口，就会有另外一辆全民共享的无人汽车停在我的旁边，带我回家；如有能这样，我为何又需要自己拥有一辆车呢？但如果想要达到这样的目的，你就必须放弃隐私，允许算法永远知道我身在何处，想去何方；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[晨间日志_2017年]]></title>
      <url>%2F2017%2F04%2F13%2F%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97_2017%E5%B9%B4%2F</url>
      <content type="text"><![CDATA[var pwd = window.prompt("please input password","");var txt = document.getElementById("enc_content").innerHTML;var bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);document.getElementById("enc_content").innerHTML = plaintext]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一些影响你的生活细节]]></title>
      <url>%2F2017%2F03%2F28%2F2_%E4%B8%80%E4%BA%9B%E5%BD%B1%E5%93%8D%E4%BD%A0%E7%9A%84%E7%94%9F%E6%B4%BB%E7%BB%86%E8%8A%82%2F</url>
      <content type="text"><![CDATA[有一些优秀的习惯，能让你的生活往好的地方变化。 生活 任何一件2分钟可以完成的事情，立刻去做。 喝水少，试着在你的办公桌上放一个足够大的杯子，并每天早上接满水，这会让你多喝水。 双手接物。 工作 当你打开一封邮件后，请给出自己立即处理它的空间。阅读、回复、采取行动，或将其存档。不要读完就完了 每天都做计划，早上花上5分钟，写下首先要完成的三件要事 在写邮件时，尽量把 ” 我 “ 改成 ” 你 “ 沟通时，说话先说概念与目标，然后再说细节。 永远不要说这些话：我觉得…我认为…应该是这样…我不知道… 拿不准的事情请说概率！ 不知道的事情请说思路和困难！ ​ 交际 把 “ 谢谢 ” 换成 “ 谢谢你 ” 把 “ 随便 ” 换成 “ 听你的 ” 面对陌生人，应该是先报自己的名字，这既是礼貌也是好的开场。 对于别人的观点或演讲，可以这样回答：听了你的讲解，我说说我的感受。 关键词在“感受。” 我的发言仅仅是我当下的感受，并不是我经过深思熟虑之后的观点与看法？这就为今后留下了很大的余地。 出去吃饭，点菜尽量每个人都点一些，如果你一定要你点，一定要记住问几个问题，有没有人对什么过敏，有没有人什么不能吃，有没有什么特别爱吃/不能接受的。 约别人出来吃饭，就你付钱，不要让别人掏腰包。别人叫你出去先问好是什么情况，千万不要有抢着买单或者让对方问你这餐饭算谁的。 ​​ ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R语言_ggplot2]]></title>
      <url>%2F2017%2F03%2F27%2FR%E8%AF%AD%E8%A8%80_ggplot2%2F</url>
      <content type="text"><![CDATA[关于ggplot2包的应用。 数据结构、绘图对象、图层、标度变换、分面、坐标系、主题； 数据结构一个图形对象，由5部分组成 数据(数据框格式) + 图形属性映射 封箱：将数据分为子集的形式；默认为bins=30 一个/多个图层；图层：一个图层必须由4部分组成 一种位置调整方式 数据和图形属性映射 一种统计变换 一种几何对象 标度；每个图形属性映射都对应一个标度 一个坐标系统 分面设定 1. 绘图对象(数据+图形属性[aes])12# 数据+图形属性ggplot(data, aes()) why ：将数据变量映射到图形中；即指定每个变量扮演的角色 可以使用变量的函数值作为参数；eg: aes(sqtr(age)) aes - aesthetics 数据 必须是数据框（data.frame) ggplot2从给定的数据框中提取所需的变量，并生成一个新的数据集，而不是直接在原数据集上进行数据表换； 数据是以副本而不是引用的形式存储到图形对象的 如果你的数据改变了，绘图不会改变 可以被存储save()到磁盘上，并可被直接加载运行load() 替换数据集（ %+% ）； 用相同的代码，对不同的数据集绘图 1234567p &lt;- ggplot(mtcars aes(mpg,wt)) + geom_point() # 绘制散点图mt &lt;- transform(mtcars, mmpg=mpg^2)# 设置新的数据集p %+% mtcars## 对新的数据集绘制相同的图形 图形属性-aes what ：大小、颜色、形状、透明度； 每个图形属性还可以映射为一个变量或设定为一个常数 每一个图形属性都对应一个称为标度的函数，作用是将数据的取值映射到该图形属性的有效取值 属性 描述 shape 点的形状 fill 填充区域 color 区域的边界；点、线的颜色 linetype 线条类型 size 点的大小；线的宽度 alpha 颜色透明度； label 标签；rowname(data) group 分组 alpha 若想采用同一色度，则加上alpha=var 分组 分组变量必须是因子变量； 离散型变量的交互作用被设为分组的默认值 group=factor(var) / fill=factor(col) 多个分组 + 单个图形属性 - ggplot()函数 [what] - 将数据分成若干组，并用相同的方式对每个组进行渲染 1p &lt;- ggplot(Oxboys, aes(age, height, gruop=Subject)) + geom_line() 不同图层 + 不同分组 - geom(aes())函数 [what] - 不同水平下的数据整合来对统计汇总信息进行绘图； 不同的图层可能有不同的分组图形属性 group=1 ,表示选择所有数据 1p + geom_smooth(aes(gruop=1), method="lm", size=2, se=F) 修改默认分组 - geom(aes())函数 [what] - 自定义离散型变量中的默认分组 [how] - 在几何对象中进行修改 1234567# Occasion为离散型变量，默认分组变量即Occasionboysbox &lt;- ggplot(Oxboys, aes(Occasion, height)) + geom_boxplot() # 在原基础上添加个体轨迹（此处分组变量因为每个个体Subject)boysbox + geom_line(aes(group=Subject), colour="darkblue") --若直接在ggplot()函数中添加分组变量，则表示对之后所有图层都适用 2. 图层(几何对象) what： 每一个几何对象都对应着一个默认的统计变换和位置参数 （geometric object） 具体形式为点、线、条； why ：决定了图形的类型 how ：个体/群组几何对象； / 分组group 设定与映射 设定：p + geom_point(colour=”darkblue”) (其中p &lt;- ggplot(mtcars, aes(x=mpg, y=wt))） 行为：图层里colour参数设定了点的颜色 映射：p + geom_point(aes(colour=”darkblue”)) 行为：先创建一个只含有”darkblue”的变量，然后将colour映射到这个新变量；因为这个变量是离散型的，默认的颜色标度用色轮上等间距的颜色，并且此处只有一个值，因此这个颜色就是桃红色 设定【设定】图形属性为一个单一值 - 几何对象中的参数 what：用于设定图层的图形； 设定：几何对象中的参数 how ：具体组成 属性 描述 shape 点的形状 fill 填充区域 color 区域的边界；点、线的颜色 linetype 线条类型 size 点的大小；线的宽度 alpha 颜色透明度；[0~1] position 位置 binwidth 直方图宽度geom_histogram [0,1] width 箱线图宽度geom_boxplot [0,1] side 地毯图geom_rug的位置； notch=T/F 方块图是否为缺口 position 对图层中元素的位置进行微调； 常用于离散型数据；[连续型数据很少出现完全重叠的现象] 映射【映射】到一个变量：修改绘图对象的图形属性 why ：因为图绘图对象可以单独保存，所以才有修改的这个作用 how ：在几何对象中进行修改 绘图对象 - ggplot(mtcars, aes(mpg, wt)) 12345geom_point(aes(colour=cly) -&gt; aes(mpg, wt, colour=cyl))) # 添加geom_point(aes(y=disp) -&gt; aes(mpg, disp) # 修改 geom_point(aes(y-NULL)) -&gt; aes(mpg) # 删除 3. 图层(统计变换+位置调整)统计变化 - stat_xx what：以某种方式对数据进行统计汇总；必须是一个位置尺度不变的量 任何一个ggplot2图层都包括stat和geom两部分，或者说两个步骤 “每一个几何对象都有一个默认的统计变换，并且每一个统计变换也都有一个默认的几何对象”。 1234x &lt;- c(rnorm(100,14,5),rep(20,20)) y &lt;- c(rnorm(100,14,5) + rnorm(100,0,1),rep(20,20))ggplot(data= NULL, aes(x = x, y = y)) + geom_point(color = "darkred",stat = "sum") 等同于ggplot(data= NULL, aes(x = x, y = y)) + stat_sum(color = "darkred",geom = "point") 可在几何对象中修改统计变换； 1+ geom_histogram(aes(y=..density..)) 可在统计变换中修改集合对象； 12d &lt;- ggplot(diamonds,aes(carat,price))d +stat_density2d(geom="point", aes(size=..density..), contour=F) why ：将返回的数据集作为输出，并可在图形中展现；故可向原数据集中插入新的变量 当我们需要展示出某个变量的某种统计特征的时候，需要用到统计变换 how ：生成变量的名字必须用点号围起来 （..xx..） ​ 4. 标度变换(scale) what：控制数据到图形属性的映射；将数据单位（升、英里加仑数）转换为电脑可以识别的物理单位（像素和颜色）的过程 定义域（数据空间） 值域（图形属性空间） 将定义域映射的值域； 变换-训练-映射 why ：将数据转化为视觉可以感知的东西：大小、颜色、位置；提供读图时使用的工具：坐标轴+图例 how ：用法 - scale_图形属性名称_标度名称 ( scale_x_discrete() ) 可修改的标度，以适应变量类型与标度类型；（当修改底层数据或图形属性映射后） 12p &lt;- ggplot(mpg, aes(cty,hwy)) p + geom_point(aes(x=drv)) + scale_x_discrete() 图形属性：scale_colour / fill / x / y / shape / linetype / size scale_xxx_yyy的具体形式 xxx Description colour Color of lines and points fill Color of area fills (e.g. bar graph) linetype Solid/dashed/dotted lines shape Shape of points size Size of points alpha Opacity/transparency yyy Description hue Equally-spaced colors from the color wheel manual Manually-specified values (e.g., colors, point shapes, line types) gradient Color gradient grey Shades of grey discrete Discrete values (e.g., colors, point shapes, line types, point sizes) continuous Continuous values (e.g., alpha, colors, point sizes) 位置标度 - 坐标轴坐标轴标签名称123+ xlab("xx") / ylab("xx")+ labs(x="",y="",title="",subtitle="") 坐标轴刻度范围 固定标度的定义域 12345678910+ xlim() /ylim()xlim(n,n) / ylim(n,n) / ylim(0, max(data$var)) # 连续型xlim("a","b","c") # 离散型xlim(as.Date(c("2008-05-01","2008-08-01")) # 日期型控制数据出现的个数和顺序+ scale_x_ (limits=()) # + scale_x_discrete(limits=c("trt2", "ctrl")) # 本应该有3个离散变量 对条形图、直方图不可用xlim()，因为会删除其不再范围内的变量；应改用coord_cartesion(xlim=c(,) ) 刻度值的分段与显示123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869+ scale_x_continuous() # 连续型+ scale_x_discrete() # 离散型limits=c( ) # 固定标度的定义域；连续型-数值型，离散型-字符； limits影响显示在图形上的元素## 要显示的范围； #控制标签的个数和顺序breaks=c( ) # 指定坐标轴上应显示哪些刻度线的值或一个连续型标度在一个图例中将被如何分段## breaks影响显示在坐标轴和图例上的元素## scale_x_continuous(breaks=c(0.1,0.2)) # 设置显示的x轴标签刻度值=c(seq(0,200,20))labels=c() # 指定了应在断点处显示的标签## 若设置了labels，则必须同时指定breaks----------------------------------------------------------------------------------改变变量的显示顺序scale_x_discrete/continuous自定义# +scale_x_discrete(limits=c("trt1","ctrl","trt2"))只显示x1和x2两项## p &lt;- ggplot(diamonds,aes(x=carat,y=price))## p + geom_point(colour = "green") + scale_x/y_discrete(limits=c('x1','x2'))转置 - 反转坐标轴# 左右反转 - x轴scale_x_reverse()# 上下反转 - y轴scale_y_reverse()# 逆时针旋转coord_flip()# 顺时针旋转scale_x_reverse() + coord_flip() 转置 -离散变量# + scale_x_discrete(limits=rev(levels(PlantGrowth$group))) + scale_x_discete(breaks=rev(levels(PlantGrowth$group)))## 必须跟在ggplot()之后，不可用 last_plot() + scale_x_ 否则会报错;但可用 p + scale_x_discrete转置 - 连续变量+ scale_y_reverse()+ scale_x_reverse()----------------------------------------------------------------------------------设置x/y轴显示的相对比例# 1:1+ scale_y_continuous(breaks=seq(0, 420, 30)) + scale_x_continuous(breaks=seq(0, 420, 30))# 1:2+ scale_y_continuous(breaks=seq(0, 420, 30)) + scale_x_continuous(breaks=seq(0, 420, 15))----------------------------------------------------------------------------------使图形从原点(0,0)出发 -expandscale_x_continuous(expand=c(0,0)) # 这个参数使得数据与坐标轴有一定的距离；默认情况下，连续型变量距离为c(0.05, 0)，离散型变量距离为c(0, 0.6) ----------------------------------------------------------------------------------示例：ggplot(data=Salaries, aes(x=rank, y=salary, fill=sex)) + geom_boxplot() + scale_x_discrete(breaks=c("AsstProf", "AssocProf", "Prof"), labels=c("Assistant\nProfessor", "Associate\nProfessor", "Full\nProfessor")) + scale_y_continuous(breaks=c(50000, 100000, 150000, 200000), labels=c("$50K", "$100K", "$150K", "$200K")) + labs(title="Faculty Salary by Rank and Sex",x="", y="") 刻度值的变换 在统计计量之前，不会改变几何形状 12345678910111213141516171819202122232425刻度值变化+ scale_x_continous(trans="")+ scale_x_continuous(trans="log(10)") "sqtr"# 变换在计算统计摘要之前，虽然数值变换了，但坐标轴的刻度不会改变# 若直接在aes(x=log10(x))，变换也在计算统计摘要之前，但坐标轴刻度会改变日期与时间as.Date()+ scale_x_date(labels=date_format("%m%d"), breaks=date_breaks("2 weeks"))+ scale_x_datetime()------------------------------------------------------------------可能已失效# major / minor 指定主要和次要断点的位置，并允许以这些单位的倍数出现日期与时间-主刻度线 majorbreaks=，可为数值型向量date_breaks=""，只能是字符串向量，"2 weeks" / "10 years"# majOir="2 weeks"日期与时间-次刻度线 minorminor_breaks=，date_minor_breaks=""，只能是字符串向量，"1 day"日期与时间- 格式输出 formatlables=format(" ") # 若失效，改为 data_format() 颜色标度 显示的颜色，前提是已经设置的颜色属性；scalecolor / scalefill 12345678910111213141516171819scale_color_ / scale_fill_离散型颜色梯度+ scale_color/fill_hue() # 默认+ scale_color/fill_brewer(palette="")## 对象为点 - "Set1" / "Dark2"## 对象为面积 - "Set2" / "Pastel1" / "Pastel2" / "Accent"## 得到所有颜色的展示 library(RColorBrewer) display.brewer.all()手动离散型颜色标度+ scale_color/fill_manual(values=c("xx","xx")) 手动设定颜色的值col=rgb(1,1,1) ; col=hsv(0,0,1); col="white"; col="#FFFFFF"----------------------------------------------------------------------------------连续型颜色梯度（渐变色）scale_color/fill_gradient(low="", high="") # 双色 low,high，分别控制梯度两端的颜色scale_color/fill_gradient2(low="",high="", midpoint=) # 三色 low,high,midpoint(默认为0)scale_color/fill_gradientn() , color=xx # 自定义n色 一个颜色向量 .png) 离散型的手动标度123+ scale_shape_manual(values=c())+ scale_size_manual(valuse=c())+ scale_linetype_mannule(values=c()) 图例标度 - guides guides为每一个scale_by_scale的函数来设置参数 12345678910111213141516171819图例-guide_legend()guides(fill= guide_legend(title=, title.position="top", title.hjust=, title.vjust=, label=T, label.position="top", label.hjust=, label.vjust=, direction="vertical"/"horizonttal", nrow=2, ncol=2, reverse=F, byrow=F)图例 - 删除# bp &lt;- ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot()guides(fill=FALSE) 替换fill为所需的美学+ guides(fill=FALSE)+ scale_fill_discrete(guide=FALSE)+ theme(legend.position="none") # 删除所有图例----------------------------------------------------------------------------------图例 - 位置 - 整个区域内 # 下面的数字位置是相对于整个区域，包括标题和标签，而不仅仅是绘图区域bp + theme(legend.position="top") # 该表示方法在绘图区之外； bottom;left;right;bp + theme(legend=c(0,0)) # 见下图位置 - 绘图区域内 # 添加legend.justification=c(0,0) 表示在绘图区的c(0,0)的方位，而不是在整个区域bp + theme(legend.justification=c(0,0), legend.position=c(0,0)) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061图例 - 项目顺序更改图例中项目的顺序 - breaks+ scale_fill_discrete(breaks=c("ctr1","ctrl","ctr2")) # fill是ggplot(aes(fill=group)) 详见bp的构造反转图例中项目的顺序+ guide(fill=guide_legend(reverse=T))+ scale_fill_discrete(guide=guide_legend(reverse=T)) # 注意这里的fill参照bp的构成+ scale_fill_discrete(breaks=rev(levles(PlantGrowth$group)))+ guides(color = guide_legend(reverse=TRUE)) # 内部顺序 # 条形图时，且用fill来分组时# 当分组用alpha时，guide(alpha=guide_legend(reverse=T))----------------------------------------------------------------------------------图例-标题# 用fill来填充颜色,那么我们去掉图例就需要用fill, 去掉标题third &lt;- ggplot(mpg, aes(cyl, hwy, fill = factor(cyl))) + geom_boxplot()third + guides(fill=guide_legend(title=NULL))third + guides(fill = guide_legend(title = "how"))third + guides(fill = guide_legend(title.position = "top"))# 通过theme来调整+ theme(legend.title=element_blank())----------------------------------------------------------------------------------图例 - 标题和标签的文本第一种方式：guide可以被fill,colour, linetype, shape所引导+ scale_fill_discrete(values=c("#999999","#E69F00","#56B4E9"), name="Experiment\nCondition", breaks=c("ctrl", "trt1", "trt2"), labels=c("Control", "Treatment 1", "Treatment 2")) # 更改图例标题必须使用 scale_xx_discrete的方式图例-标签third + guides(fill = guide_legend(label = TRUE)) # 标签与否third + guides(fill = guide_legend(label.position = "top")) # 标签位置third + guides(fill = guide_legend(label.theme = element_text(size = 15, face = "italic", colour = "red", angle = 30)))第二种方式：改变数据框pg &lt;- PlantGrowth levels(pg$group)[levels(pg$group)=="ctrl"] &lt;- "Control"levels(pg$group)[levels(pg$group)=="trt1"] &lt;- "Treatment 1"levels(pg$group)[levels(pg$group)=="trt2"] &lt;- "Treatment 2"names(pg)[names(pg)=="group"] &lt;- "Experimental Condition" # 更改单个列的列名----------------------------------------------------------------------------------图例 - 标题和标签的外观# 默认情况下，图例不会有一个框。要添加一个框并修改其属性：bp + theme(legend.background = element_rect())bp + theme(legend.background = element_rect(fill="gray90", size=.5, linetype="dotted"))图例-图表third + guides(fill = guide_legend(keywidth = 5)) # 图表宽度third + guides(fill = guide_legend(direction = "horizontal")) / "vertical"third + guides(fill = guide_legend(nrow = 2)) # 图表的列数图例 - 斜杠如果使用轮廓制作条形图（通过设置color =“black”），它将通过图例中的颜色绘制斜杠。 5. 分面(facet) what： 将数据划分为多个子集，并依次绘图 适用于离散型变量（若对连续型变量则需要先将其转换） 1234连续型变量转换为离散型cut_interval(x, n=10) # 将数据划分为n个长度相同的部分cut_number(x, n=10) # 将数据划分为n个有相同数目点的部分 why ：用于比较不同分组之间的情况；（理解为aes中gruop的不同变体；） 分组：容易发现各组之间细微的差别 分面：对于各组之间重叠问题严重时，可很好地解决该问题 how ： + facet_grid / wrap 网格型 what ：二维面板，由行和列通过变量来定义； why ：用于两个或多个变量来生成一个2维网格 how ：需要设定哪些变量作为分面绘图的行与列； ​ 多种形式 - facet_grid() 12345678910. ~ a # 一行多列，根据变量a进行分面为n列a ~. # 一列多行，根据变量a进行分面n行a~b # 多行多列.~a+b / a+b~. # 多个变量的多个水平在行/列上(或同时)--------------------------边际图----------------------------------------margins=T # 展示所有分面的边际图margins=c("col","col") # 列出需展示边际图的变量名称grand_row / grand_col # 分别生成所有行/列的边际图 网格型 - 分面位置占比 - space=”fixed”/ “free”（随标度范围变化而变化） 封装型 what：一维面板条，再封装到二维中 why ：处理单个多水平变量 多种形式 - facet_wrap() 12~ a, ncol=n~a, nrow=n 封装型 - 标度控制12345678scales=""scales="fixed" # 所有面板中x/y标度相同（默认）## 在相同的基准上进行比较，观察各子集相似的模式; ## 对于 facet_grid 必须是x/y都相同scales="free" # x/y每个面板的标度都可以变化; 自由标度，用于发现更多的细节scales="free_x" / "free_y" # x的标度可变，y 的尺度固定 分面的标签控制12data %&gt;% mutate(left = factor(left, labels = c("Remain", "Left"))) %&gt;% # 需先将变量设置为需显示的标签 6. 坐标系(coord) what：将两种位置标度结合在一起组成的二维定位系统 how ：笛卡尔坐标系、非笛卡尔坐标系 笛卡尔坐标 - cartesian() 1234567891011121314151617181920范围设置 - 放大coord_cartesian(xlim=c(n,n), ylim=c())## 与 +xlim() &amp; scale_x_continuous(limits=c()) 区别：## coord - 使用的仍是所有数据，只是展示的仅该部分数据；如同用放大镜看数据## xlim() &amp; scale_x_ - 是将超出此范围的数据都删除，仅对在该范围内的数据做图x/y轴翻转 + coord_flip(xlim=c(), ylim=c())# 或者 直接在图形属性aes()中将变量先后顺序调换坐标轴变换 - 在统计量计算之后，会改变几何形状+ coord_trans(x="sqrt", y=, xlim, ylim) + coord_trans(xtrans="sqrt", ytrans="", xlim, ylim)x/y轴标度比例+ coord_equal() # 默认为1:1+ coord_equla(ratio=1.5, xlim, ylim) # ratio=y/x的值 非笛卡尔坐标1234567极坐标+ coord_polar(theta="x", direction=1, start=0 ) # 绘制饼图/雷达图# direction= 1，顺时针，-1，逆时针 start=0 12点钟弧度的起点偏移量地图投影library(mapproj)coord_map 7. 主题(theme) what：对数据之外的图形外观进行控制； how ：设置与使用 使用方式：+theme(主题元素 = 主题性质) + theme(plot.title=element_text(size=20)) 主题与设置123456整体风格变动 - 四种种内置主题+ theme_gray() # 灰色背景，白色网格线+ theme_bw() # 白色背景，灰色网格线+ theme_classic() # 白色背景，无网格线+ theme_minimal() # 无坐标线 – 1234567891011121314设置 -theme_set() # 返回先前的主题theme_get() # 获得当前主题设置全局设置theme_set(theme_gray())局部设置 直接在ggplot()之后 + theme_gray() / bw()----------------------------------------------------------------------------------为之后的图形设置主题 theme_update()theme_update(plot.title=element_text(hjust=0.5, face="bold")) # 标题水平居中或者赋值为theme1 &lt;- theme_update() ,之后是 theme_set(theme1) – 12345678永久性存储主题theme1 &lt;- theme_minimal() + theme(plot.title=element_text(hjust=0.5, face="bold"), axis.line =element_line(linetype=1)) # 无坐标线theme2 &lt;- theme_classic() +theme(plot.title=element_text(hjust=0.5, face="bold")) # 白色背景，无坐标线theme3 &lt;- theme_gray() + theme(plot.title=element_text(hjust=0.5, face="bold")) # gray为默认theme4 &lt;- theme_bw() + theme(plot.title=element_text(hjust=0.5, face="bold"))ggplot() + theme_bw 边界 12# 图形边界plot.margin = unit(c(1,1,1,1),"lines") 主题元素+元素函数主题元素123456坐标系 - axis. axis.line # 直线和坐标轴axis.text.x # x/y轴标签axis.ticks # 轴须标签axis.title.x # x/y轴标题xis.ticks.margin # 坐标系边界 axis.ticks.margin = unit(0.8,"lines") – 12345678图例 - legend.legend.bakgroud # 图例背景legend.key # 图例符号legend.text # 图例标签legend.title # 图例标题legend.margin # 每个图例之间的边界# 独立运作+ theme(legend.position="none" / "left" /"right"/"bottom"/"top"/=c(n,n) ) # n为[0,1] – 123456面板 - panel.panel.backgound # 面板背景panel.border # 面板边界panel.grid.major # 主网格线panel.grid.minor # 次网格线panel.margin # 分面绘图区之间的边距 – 1234567整个图形 - plot.plot.background # 整个图形背景plot.title # 图形标题plot.margin # 图形边距 top, right, bottom, leftplot.margin = unit(c(1,1,1,1),"lines") # 等价于 = unit(rep(1,4),"lines") – 123其他 - strip.strip.backgroud # 分面标签背景strip.text.x # 水平/竖直条状文本 元素函数1234567891011121314151617181920文本 - element_text()# 处理标签axis.text.x/axis.ticks、标题plot.titleface="" # 字体格式## "bold.italic" # 粗斜体## "bold" # 加粗## "italic" # 斜体## "plain" # 无格式的color=""size=num # 文本大小hjust / vjust =[0,1] # 水平/竖直对齐## hjust=0 # 左对齐## hjust=1 # 右对齐## hjust=0.5 # 居中对齐lineheight=num # 行高angle=[0,360] # 旋转角度family="" # 字族 – 123456线条 - element_line() #处理线条axis.line 或线段panel.grid.major/minorsize=numcolor=""linetype=[0,6] – 1234567背景 - element_rect() # 处理背景 .background 使用的矩阵linetype=nsize=numcolor=""fill="" – 1234element_blank() # 空主题，表示删除的绘图元素主题元素=element_blank() 一页多图组图12library(gridExtra)grid.arrange(p1,p2,...pn, nrow=n, ncol=n) 子图 - viewport()+print1234567891011121314151617181920212223library(grid)viewport(x=n,y=n,width=n,height=n) # 设置图形的位置## x,y - 控制图形的中心位置，范围[0,1] ，左下角为(0,0)## width/height - 控制图形的大小，默认为比例大小[0,1]；### width=0.5, height=0.5 - 占1/4大小### width=1,height=1 - 占整个图形## 也可用绝对单位；eg: width = unit(1, "cm") / unit(1, "inch")print(p, vp=)# print(要增加子图的图形对象, vp=设置的图形位置对象) b &lt;- ggplot(economics, aes(uempmed,unemploy)) + geom_point() + geom_smooth(se=F)c &lt;- ggplot(economics, aes(uempmed,unemploy)) + geom_path()library(grid)subvp &lt;- viewport(x=0.75,y=0.35, width=0.4, height=0.4)b # 显示当前要增加子图的图print(c, vp=subvp)## 若要调整子图的属性，要先在外面调整好，再放入主图中； eg: c1 &lt;- c + theme() 属性参考几何对象 - 点 - geom_xx12345678plot# 点 # + stat_smooth() # 添加平滑曲线 dotplot# 点直方图(用点来表示观测值的个数)jitter# 给点添加扰动(减轻重叠问题) point - 散点图几何对象 - 线12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849ablineabline(..., slope, intercept, show.legend=NA)# 线(由斜率和截距决定) 指定的斜率和截距geom_abline(slope=1, intercept=0, linetyep=2)hline# 水平线 ; yintercept=n / n1:n2vline# 竖直线 ; xintercept=----------------------------------------------------------------lineline(x,y, alpha, color, fill, linetype, size, arrow)# 按照x坐标的大小顺序依次连接各个观测值path# 路径图(按数据的原始顺序连接各个观测值)step# 以阶梯形式联接各个观测值----------------------------------------------------------------quantile# 添加分位数回归线segment# 添加线段/箭头 ## geom_segment(aes(x=, xend=, y=, yend= ))smooth# 添加光滑的条件均值线## method=smooth(默认) lm-线性; loess-非参数光滑曲线; gam-广义相加模型; glm-广义线性; rlm-健壮线性; ## formula= y~x （默认） y~log(x); y~poly(x,n) -n次多项式拟合; y~ns(x,n) -具有n个自由度的样条拟合## se=T/F 绘制置信区间；默认为T## level=num 默认为95%## fullrange=F/T ,拟合覆盖全图(T)，仅覆盖数据(F) 默认为Fdensity# 光滑密度曲线图density2d# 二维密度等高线图----------------------------------------------------------------lineranglinerang(x,ymin,ymaxn,alpha,color, lineype,size, show.legend=T/F)# 一条代表一个区间的竖直线pointrang# 用一条中间带点的竖直线代表一个区间 几何对象 - 面bar - 条形图 先做出x/y轴，再作图，运用stat ggplot(temp3, aes(content_rating, M)) last_plot() + geom_bar(stat=”identity”) 1234567891011121314151617181920212223242526272829303132333435363738# 条形图(以x轴为底的矩形)图形/位置调整# geom_bar(position="dodge") -分组条形图; (position="fill") -百分比条形图;水平条形图# + coord_flip()堆砌分组条形图（两个类别型变量）# ggplot(hr_good,aes(left,number_project,fill=factor(number_project))) + geom_bar(stat="sum") 调整距离宽度与间距; # width=0.5 -也可以看做x坐标轴之间的分割大小; position=position_dodge(0.7)----------------------------------------------------------------------项目排序 -reorder# 按z值的大小，重新排列条形图的顺序，只需将aes()中x的属性用reorder()函数更改即可; ## ggplot(df, aes(x = reorder(x, z), y = z, fill = y)) +geom_bar(stat = 'identity') + xlab('x')项目排序 -降序排序# 1. arrange(data, M) 升序排列# 2. data$M &lt;- factor(data$M, order=T, levels=data$M)) # 因子化 / data$M &lt;- with(data, factor(var, order=T, levels=var))项目排序 -如果x是因子，我们可以对其用带参数limits=rev(levels(…))的函数scale_x_discrete()进行修正。## + coord_flip() + scale_x_discrete(limits=rev(levels(PlantGrowth$group)))项目排序 -直接修正# 直接用scale_x_discrete(limits=c()) 来修正顺序-----------------------------------------------------------------------添加标签# geom_text(aes(label=var))## hjust/vjust=-0.2 -表示显示在外面; hjust/vjust=1.5 -表示显示在里面添加标签 -对于分组条形图# geom_text(position = position_dodge(0.9))添加标签 -对于堆积条形图# geom_text(position = position_stack()) histogram - 直方图123456789101112调整组距：# 1)binwidth=n # 组距宽度；也可以看做x坐标轴之间的分割大小# 2)bins=n # 组的数量# 3)breaks=c(n, n, n) # 具体的x轴坐标尺度来划分调整分组直方图两者之间重叠程度# position=position_dodge(0.5)密度直方图# histogram(aes(y=..density))在密度直方图基础上，添加核密度曲线## stat_density(geom="line") 其他面图12345678boxplot# 箱线图area# 面积图freqplot# 频率多边形图 几何对象 - 非常规图形漏斗图12345## 漏斗图 # 涉及概念 # 1.占位数 = （上阶段人数 - 当前人数）/2# 2.环节转化率 =当前人数/上阶段人数；# 3.整体转化率 = 当前人数 / 总人数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152## 思路1，利用占位符；条形图---------------------------test----------------------------------------------------library(reshape2)scope&lt;-c(0.9,0.8,0.6,0.4,0.2)Part&lt;-paste("part",1:5,sep="")Order&lt;-1:5 help&lt;-(1-scope)/2 # 表示该值为 两边留空的二分之一mydata&lt;-data.frame(Order,Part,help,scope) Order Part help scope1 1 part1 0.05 0.92 2 part2 0.10 0.83 3 part3 0.20 0.64 4 part4 0.30 0.45 5 part5 0.40 0.2# 重构为长格式mydata1&lt;-melt(mydata,id.vars=c("Order","Part"),variable.name="perform",value.name="scope") Order Part perform scope1 1 part1 help 0.052 2 part2 help 0.103 3 part3 help 0.204 4 part4 help 0.305 5 part5 help 0.406 1 part1 scope 0.907 2 part2 scope 0.808 3 part3 scope 0.609 4 part4 scope 0.4010 5 part5 scope 0.20# 构造有序因子变量，两个因子水平，分别是实际指标值和辅助值# 【关键1】在构造有序因子变量时，注意辅助值因子水平要高于实际值数据。柱形图堆叠时，【关键2】按照因子水平由高到低堆叠（底层因子水平高，顶层因子水平低，这样才能将指标值的数据条撑起，其实水平均居中）。mydata1$perform&lt;-factor(mydata1$perform,level=c("scope","help"),order=T) -----------------------------绘制图形--------------------------ggplot(mydata1,aes(Order,scope,order=desc(scope),fill=perform))+geom_bar(stat="identity",position="stack") # 即先堆叠高水平help，然后再堆叠低水平scope；# 制作色盘：（其实使用了一个白色色值隐藏掉了辅助列，理念跟在excel里面制作漏斗图一致，但是色盘颜色顺序白色要在第一个，这样将来颜色映射的时候颜色顺序与因子水平由大到小进行匹配的。）这一点非常重要，也是ggplot临摹漏斗图的核心技巧。Color&lt;-c("#FFFFFF","#088158")ggplot()+geom_bar(data=mydata1,aes(x=Order,y=scope,fill=perform),stat="identity",position="stack")+scale_fill_manual(values=sort(Color))+ # sort表示重新排序；因为颜色的填充是低水平(scope)，在高水平(help)进行填充geom_text(data=mydata,aes(x=Order,y=help+scope/2-.025,label=Part),col="white",size=4)+geom_text(data=mydata,aes(x=Order,y=help+scope/2+.035,label=paste(100*mydata$scope,"%",sep="")),col="white",size=5.5)+theme_nothing()ggplot()+geom_bar(data=mydata1,aes(x=Order,y=scope,fill=perform),stat="identity",position="stack")+scale_fill_manual(values=sort(Color))+ coord_flip()+ scale_x_reverse() + # 顺时针旋转geom_text(data=mydata,aes(x=Order,y=help+scope/2-.05,label=Part),col="white",size=4)+ # 标签位置设定geom_text(data=mydata,aes(x=Order,y=help+scope/2+.05,label=paste(100*mydata$scope,"%",sep="")),col="white",size=5.5)+theme_nothing() –1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859## 思路2，利用箱线图set.seed(123) #设定随机种子，保证做的图和这里的一样df &lt;- data.frame( var=LETTERS[1:10], #字母A-J id=1:10, #数字1-10 a=runif(10), #10个随机数 b=runif(10), #10个随机数 c=runif(10), #10个随机数 stringsAsFactors = F #不转换为因子) var id a b c1 A 1 0.2875775 0.95683335 0.88953932 B 2 0.7883051 0.45333416 0.69280343 C 3 0.4089769 0.67757064 0.64050684 D 4 0.8830174 0.57263340 0.99426985 E 5 0.9404673 0.10292468 0.65570586 F 6 0.0455565 0.89982497 0.70853057 G 7 0.5281055 0.24608773 0.54406608 H 8 0.8924190 0.04205953 0.59414209 I 9 0.5514350 0.32792072 0.289159710 J 10 0.4566147 0.95450365 0.1471136df_tmp4&lt;-df %&gt;% select(1:3) %&gt;% arrange(a) %&gt;% mutate(new_id=1:10, # 创建新变量，以此为排序 ymin = (1-a)/2, # 最小值，左边留空的值 ymax = a+(1-a)/2, # 最大值，右边留空的值 mid = 0.5) var id a new_id ymin ymax mid1 F 6 0.0455565 1 0.47722175 0.5227782 0.52 A 1 0.2875775 2 0.35621124 0.6437888 0.53 C 3 0.4089769 3 0.29551154 0.7044885 0.54 J 10 0.4566147 4 0.27169263 0.7283074 0.55 G 7 0.5281055 5 0.23594726 0.7640527 0.56 I 9 0.5514350 6 0.22428249 0.7757175 0.57 B 2 0.7883051 7 0.10584743 0.8941526 0.58 D 4 0.8830174 8 0.05849130 0.9415087 0.59 H 8 0.8924190 9 0.05379048 0.9462095 0.510 E 5 0.9404673 10 0.02976636 0.9702336 0.5---------------------------------------------ggplot(df_tmp4,aes(new_id,mid)) + # x轴为对应的各个指标 geom_linerange(aes(ymin=ymin,ymax=ymax, colour=factor(new_id)), size=15, alpha=0.5,show.legend = F)+ scale_x_continuous(breaks = 1:10, labels = df_tmp4$var)+ coord_flip() ------------------------------------------- ggplot(df_tmp4,aes(new_id,mid))+ # geom_step(colour="grey50")+ geom_crossbar(aes(ymin=ymin,ymax=ymax), size=0, fill="skyblue", colour="grey50", width=1)+ scale_x_continuous(breaks = 1:10, labels = df_tmp4$var)+ coord_flip() 其他图形1234567errorbar# 误差棒errorbarh# 水平误差棒rug# 边际地毯图(轴须图) – 1234567891011121314151617181920212223242526272829303132blank# 空白contor# 等高线图crossbar# 带水平中心线的盒子图hex# 六边形二维热点图map# 基准地图里多边形ploygon# 多边型(相当于一个有填充的路径)raster# 高效的矩形瓦片图rect# 二维矩阵图ribbon# 色带图(连续的x值所对应y的范围)violin# 小提琴图tile# 瓦片图 text - 文本注释123456789101112131415161718192021222324252627282930313233343536373839404142geom_text()geom_text(aes(label=var)) / geom_text(aes(label=rownames(var))) (x,y, alpha=, color=, size=, hjust=, vjust=,,nudge_x=0,nugde_y=0, angle=, fontface=, family=, lineheight=, show.legend=NA/F/T, check_overlap=F, na.rm=F )# hjust=0(右侧)，=1(左侧)，=0.5(居中，默认)；若小于0，则继续向右# vjust=0(向上)，=1(向下), =0.5(居中，默认); 若小于0，则继续向上；## vjust/yjust ，可以是 0(right/bottom) 和 1(left/top)，或者是字符串("left","right","middle","bottom","center","top"); 或者是 字符串 ("inward","outward")## nudge_x=2.5 ，x轴方向，向右微调2.5# 常用字体大小 size=4 ; 5.5; ## 标签显示为百分比ggplot() + geom_text(data=mydata,aes(x=Order,y=help+scope/2+.035,label=paste(100*mydata$scope,"%",sep="")),col="white",size=5.5)p &lt;- ggplot(mtcars, aes(x=wt, y=mpg, label=rownames(mtcars)))p + geom_text()p + geom_text(size=10) # Change size of the label[变更标签的大小]p &lt;- p + geom_point()# Set aesthetics to fixed value[设置为固定值的美学]p + geom_text()p + geom_point() + geom_text(hjust=0, vjust=0)p + geom_point() + geom_text(angle = 45)# Add aesthetic mappings[审美映射]p + geom_text(aes(colour=factor(cyl)))p + geom_text(aes(colour=factor(cyl))) + scale_colour_discrete(l=40)p + geom_text(aes(size=wt))p + geom_text(aes(size=wt)) + scale_size(range=c(3,6))# Add an annotation not from a variable source[添加注释，而不是从一个变量源]c &lt;- ggplot(mtcars, aes(wt, mpg)) + geom_point()c + geom_text(data = NULL, x = 5, y = 30, label = "plot mpg vs. wt")# Or, you can use annotate[或者，您可以使用注释]c + annotate("text", label = "plot mpg vs. wt", x = 2, y = 15, size = 8, colour = "red")---------------------------------------------------------------------------------------geom_label() # draws a rectangle behind the text, making it easier to read. aes(label=rownames(var)) 可在任何几何对象中出现 geom_point(aes(laber=rownames(var))) 图形属性linetype 符号 描述 1 solid - 实线 2 dashed - 虚线 3 dotted - 点 4 dotdash - 破折号 5 longdash - 长破折号 6 twodash - 双破折号 position 符号 描述 示例 stack 堆叠 堆砌条形图 fill 堆叠并高度标准化为1 百分比堆砌条形图 dodge 并列 分组条形图 jitter 给点添加扰动，避免重叠 identity 不做任何调整 identity ，不适合条形图，因为后面画的条形会挡住先画的 side地毯图geom_rug的位置； 符号 描述 b 底部 l 左侧 r 右侧 t 顶部 bl 左下 “tl” 、 “tr”、”br” 左上、右上、右下 shape fontface1fontface= "plain", "italic", "bold", "bold.italic" 统计变换常用统计变换 统计变换 描述 stat_identity 不做任何统计变换 stat_boxplot 计算组成箱线图的各种元素值 stat_density 一维密度估计 stat_density2d 二维密度估计 stat_smooth 添加拟合曲线 stat_summary 对每个x所对应的y值做统计描述 stat_unique 删除重复值 stat_bin count - 直方图 density - 频率多边形图 1234567密度直方图# ggplot(diamonds, aes(carat)) + geom_histogram(aes(y=..density..), binwidth=0.1) 添加拟合曲线# p &lt;- ggplot(diamonds, aes(x=carat,y=price,color=cut))# p + geom_point(color='green',alpha=0.2)+ stat_smooth() 统计变换 stat_xx 统计变换 描述 stat_bin 计算封箱(bin)数据 bin2d 计算封箱内的观测值个数 bindot 计算“点直方图”封箱数据 binhex 计算“六边形热图”封箱数据 boxplot 计算组成箱线图的各种元素值 contour 三维数据的等高线 density 一维密度估计 density2d 二维密度估计 function 添加新的函数 identity 不对数据进行统计变换 qq 计算qq图的相关值 quantile 计算连续的分位数 smooth 添加光滑曲线 spoke 将角度和半径转换成xend和yend sum 计算每个单一值的频数[有助于解决散点图的图形重叠问题] summary 对每个x对应的y值做统计描述 summary2d 对二维矩形封箱设定函数 summaryhex 对二维六边形封箱设定函数 unique 删除重复值 ydensity 小提琴图，计算一维y轴方向的核密度函数的估计值 作图规范标准作图规范 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758ggplot(mtcars, aes(disp,hp)) # 绘制对象(数据，图形属性aes) + geom_point(aes(color=factor(cyl))) # 图层(几何对象)-设定;若要分组，必须为因子factor变量 # geom_point(color="blue") # 图层(几何对象)-映射 # stat_(） # 统计变化 + goem_text(aes(label=cyl, color=cyl), size=, vjust=0.5,hjust=0.5,nudge_x=0.5, nudge_y=0.5, show.length=F) # 标签; hjust=0(向右),vjust=0(向上); nudge_x=0.5 向x轴方向微调0.5+ annotate("text", x = 4, y = 25, label = "Some text")+ xlim(0,10) # x轴的定义域，表示只选取该范围内的数值进行作图；超出部分则删除; # xlim(0,max(mtcars$disp)) # 必须有data$var # xlim("a","b","c") # 离散型 # xlim(as.Date(c("2008-05-01","2008-08-01")) # 日期型 + sacle_y_continuous( limits=c(min(mtcars$hp),300), breaks=c(100,150,400), # =c(seq(0,200,20)) 指定坐标轴上应显示哪些刻度线的值 或一个连续型标度在一个图例中将被如何分段（即显示哪些刻度的值） labels=c("100k","150k","400k") # 指定了应在断点处显示的标签 + labs(x="", y="", title="", subtitle="") # 坐标轴的标签名称 + scale_x_discrete(breaks=rev(levels(mtcars$hp))) # 转置 # scale_x_reverse() # 转置-连续型变量 + scale_y_continuous(breaks=seq(0, 420, 30)) + scale_x_continuous(breaks=seq(0, 420, 15))# 设置x/y轴显示的相对比例; 同 coord_equal(ratio=) + sacle_color_brewer(palette="") + scale_fill_hue() # 离散型标度的颜色设置 # scale_color_manual(values=c()) 手动自定义设置颜色 # scale_color_gradient（low="", high="") 连续型标度的颜色设置； 双色； + guides(fill=guide_legend((title=, title.position="top",label.position="top", nrow=2,reverse=F) # 设置图例 # guides(fill=FALSE) 删除图例 + facet_grid(.~ y, margins=T, space="fixed") # 网格型分面 margins=c("col","col") 所需展示的边界图的变量 # facet_wrap(~y, ncol=2, scales="free_x") # 封装型分面+ coord_flip() # 坐标轴翻转+ coord_equal(ratio=2, xlim, ylim) y/x轴的比例 + theme1 # theme1 &lt;- theme_minimal() + theme(plot.title=element_text(hjust=0.5, face="bold"), axis.line =element_line(linetype=1))+ theme(axis.line=element_line(linetype=1,size=1), axis.title.x=element_text(), panel.grid.minor=element_blank(), plot.title=element_text(face="bold",size=, hjust=0.5), plot.background=element_rect(fill=,color=)) # theme(主题元素= 主题性质) axis/legend/panel/plot/strip+ plot.margin = unit(c(1,1,1,1),"lines") # 图形边界 top/right/bottom/left grid.arrange(p1,p2,...pn, nrow=2) # library(gridExtra) 组图--------------------------------------------------------------------ggplot(data=, aes(x=, y= )) + geom_xx(...) + stat_xx(...) + annotate(...) + scale_xx(...) + coord_xx(...) + guides(...) + theme(...)# mtcars，R中自带的数据集 可对图形分别进行设定与修改 - 基础图形可被保存 123456创建绘图对象# p &lt;- ggplot(mtcars, aes(x=mpg, y=wt))设定与修改p + geom_point(aes(colour=factor(cyl))p + geom_point(aes(y=disp)) – 1234做不同运算的图形# ggplot(huron, aes(year))+ geom_line(aes(y=level-5), color="blue")+ geom_line(aes(y=level-5), color="red") 作图问题图形基本处理 矢量图形(PDF, PostScript, SVG，AI,) 位图(PNG, JPEG, TIFF，bmp，jpg) 123456789101112summary() # 查看结构print() # 呈现-----------------------------------------------------------------------------------保存ggsave() # 保存到磁盘--ggsave("name.png", [plot=plot_name] width=, height=) # plot_name为创建图像的名称；若忽略，则对最佳的图像保存save() # 缓存保存到磁盘; 可保存一个图形对象的完整副本，并可用load()来重现该函数 图片保存21.5寸显示频：1920px $\times$ 1080px （比值 = 1.7777） 电脑显示频 -16:9 （比值 = 1.777） 电脑显示频 - 4:3 （比值 = 1.333） savePlot 的妙用（在R中的使用，非Rstudio 1234567savePlot(filename = "Rplot", type = c("wmf", "emf", "png", "jpg", "jpeg", "bmp", "tif", "tiff", "ps", "eps", "pdf"), device = dev.cur(), restoreConsole = TRUE)# JPEG quality is 75% ; TIFF 无压缩。# 所以这个命令在Rstudio上没法运行，在在R编辑器下运行成功 粘贴复制（rstudio） 1234export - copy to clipboard生成图片以后，点击copy to clipboard,调整合适的大小，然后选择copy as的类型（bitmap,metafile）, 确认后，然后就可以将图片粘贴到你想要他到的地方了，得到的是矢量图(metafile)# 点击 export默认的单位是像素 导出高清的图 1234567891011121314151617181920212223242526272829303132333435tiff(filename = "test.tif",width = 15,height = 18,units ="cm",compression="none",bg="white",res=600)# res设置图片分辨率; units指定长宽的单位，px(oixeis,默认的)，in(inches),cm或者mm。compression为压缩方式，lzw压缩之后图片较小。可选的方式为none,rle,zlw,jpeg,zip。dev.new()pdf(file="example.pdf", width=12, height=8) #矢量图，pdf格式svg(file="example.svg", width=12, height=8) #矢量图，svg格式tiff(file="example.tiff", width=12, height=8， units="in", compression="lzw", res=150) #位图，tiff格式，常用于文章投稿。dev.off()# 默认的单位unit是英寸ggsave("myplot.png", width=8, height=8, unit="cm", dpi=300)------------------------------------------------------------------------------改变字体 install.packages("extrafont")library(extrafont) # Find and save information about fonts installed on your systemfont_import() # List the fontsfonts()After the one-time setup is done, there are tasks you need to do in each R session:library(extrafont) # Register the fonts with Rloadfonts() # On Windows, you may need to tell it where Ghostscript is installed# (adjust the path to match your installation of Ghostscript)Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.05/bin/gswin32c.exe") # Finally, you can create a PDF file and embed fonts into it, as in Figure 14-4:library(ggplot2)ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() + ggtitle("Title text goes here") + theme(text = element_text(size = 16, family="Impact"))ggsave("myplot.pdf", width=4, height=4)embed_fonts("myplot.pdf") 图片不清晰R中生成的图片，保存为.tiff格式，有3M，在word里还是模糊 一般情况下，如果需要在word中插入图片，分为两种方法：复制黏贴与插入图片菜单。同时，由于word文档往往为表述性质使用，因此并不需要分辨率很高的图片，像我个人使用都是800*600的jpg格式,单张图片尺寸保持在100k~200k之间刚好。然后如果插入图片较多，往往会造成word文档尺寸较大，不便于使用MMS工具传输，所以会使用wrod中的图片处理工具压缩文档中的所有图片。 关于图片模糊，事实上在给定显示设备参数不变的状态下会有两种情况，一种是图片分辨率太低，还有一种是图片分辨率太高。解决方法是根据你最终输出的需求（出版物，电子文档等）来调整相应输出设备分辨率参数，并把其作为模版保存下来即可 为图形添加注释 - annotate1234567891011# 一次只添加一个位置上的图形当x/y轴均为连续型的数值变量时，当annotate中的x/y引用对象时，必须是数值，可用as.numeric()来转换# peak &lt;- filter(data, var==max(var))# peak_x &lt;- as.numeric(peak[1,1])# peak_y &lt;- as.numeric(peak[1,2])p + annotate("text", x = 4, y = 25, label = "Some text")p + annotate("rect", xmin = 3, xmax = 4.2, ymin = 12, ymax = 21, alpha = .2)p + annotate("segment", x = 2.5, xend = 4, y = 15, yend = 25, colour = "blue")p + annotate("pointrange", x = 3.5, y = 20, ymin = 12, ymax = 28,colour = "red", size = 1.5) 项目排序顺序12345678910111213先设置好顺序 - factor按当前排序来指定顺序# data$col &lt;- factor(data$col, levles=data$col, order=TRUE)## arrange(data, col) 升序排列自定义顺序# data$col &lt;- factor(data$col, levels=c("col1","col2"),order=TRUE)----------------------------------------------------------------------------------标度变换# scale_x_discrete(limits=c("col","col")# scale_x_discrete(limits=data$col) 遮盖问题 图形相互覆盖无法看清 12345678910111213141516171819点的大小与形状 # geom_xxx(shape=)## shape=1(中空的点)## shape="." (像素大小的点)透明度；最小透明度为1/256# geom_xxx( alpha = [1/256 ,1] )添加随机扰动 - jitter ；[当数据存在一定离散性]# td &lt;- ggplot(diamonds, aes(table,depth)) + xlim(50,70) + ylim(50,70)## 直接添加 - td +geom_point ; td + geom_jitter() # 默认扰动量为40%## 调整后变更扰动率 - jit &lt;- positon_jitter(width=0.5); td +geom_jitter(position=jit)将点分箱，并统计每个箱中点的数量，在可视化这个数量# d &lt;- ggplot(diamonds, aes(carat,price)) + xlim(1,3) # 此时并无图形显示# d + stat_binhex() # 默认分箱数 # 即使没有几何对象也能做出图形# d + stat_binhex(bins=10) # 共10个封箱 # 默认为30个用stat_density2d做二维密度估计，并将等高线添加到散点图中 含权重数据 点/线 - size = 权重变量 复杂情况 - weight = 权重变量 ​ 交互式作图 - ggplotly12library(plotly)ggplotly(object) 统计摘要：为统计量绘图12345单独的摘要计算函数# fun.y / fun.ymin / fun.ymax统一的摘要统计函数# fun.data]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[数据分析_思考逻辑]]></title>
      <url>%2F2017%2F03%2F27%2F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E6%80%9D%E8%80%83%E9%80%BB%E8%BE%91%2F</url>
      <content type="text"><![CDATA[数据分析思考逻辑的指引。 总览数据分析的思路 逻辑链：梳理与呈现 细分逻辑链：各个过程中涉及的对象（5W2H + MECE） 确定所需对象：明确字段 + 罗列字段的所有组合（该阶段不要做评价） 提取字段：SQL （该步骤只需提取即可，不要做统计汇总方面的分析） 明确唯一标识至关重要。（数据提取的唯一标识 + 分析时的唯一标识） 数据提取的唯一标识：观测值是以哪个字段为唯一标识；不同观测值之间具体值是不同的； 数去分析的唯一标识：确定你要分析对象的最小单位；渠道？每时段的渠道？每个客户？ 分析所有组合：对已经罗列的字段逐一进行分析，提取主次维度，并尝试增加多维度分析 数据分析：Excel + R 结果可视化 项目 能力 数据的获取与流转 业务&amp;逻辑 数据提取的目的与内容 业务&amp;逻辑 分析维度的细分与组合 业务&amp;逻辑 分析方法的选择与工具应用 工具使用 分析结果的呈现 工具使用&amp;逻辑 ==建立全局的概念；分析前，必须要去了解各个环节与数据整体、以及平均的情况== 1. 数据的获取与流转数据获取 what：理解获取数据的具体情境与方式 why ：通过情境的还原，理解数据源的特性【非常重要】 维度 描述 what 什么情境 where 获取的地点；线上：什么平台；线下：什么活动 when 获取的具体时间 who 目标对象、特征 how 获取的方式：微信、短信、电话 why 为什么要举行这次活动 统计口径：以什么为单位 数据流转 what：数据从获取到进入信息系统，如何流转，如何标记，如何呈现 位置 描述 入口 以什么方式进入 标记 如何对其进行标记；标记的方式与类别 流转 标记之后，数据流转到哪里 输出 最后以何种形式，呈现在哪里 2. 数据提取的目的与内容数据目的 what ：希望通过这个数据去解决什么样的具体问题 ； why ：通过引导性追问理解对方真正的意图； 即去思考对方想通过这个信息，下一步准备采取什么行动 或者 做什么决定 数据内容 what ：通过对目的的理解，有针对性地提供需要的数据 原则：以提供尽可能少的数据，去解决对方的问题； 3. 分析维度的细分与组合细分 what ：对内容如何进行划分；在细分之前，要明确自己的目标 划分的目的 划分的类别、规则、范围 why ： 维度组合 what ：通过将哪几个维度进行组合对比来进行分析 4. 分析方法的选择与工具应用分析方法 what ：对不同目标，采取适合的分析方法 how ：需要理解不同分析方法的产出、适用条件、优劣势情况 工具的应用 what ：针对不同的分析方法，掌握不同的工具使用 项目 工具 数据提取 SQL Server / MySQL 数据分析 Excel、R、Python 数据挖掘 R、Python 5. 分析结果的呈现 what ：对信息的概括与呈现 图形化 文字化 项目 工具 核心 图形化 Excel 图形本质与作图逻辑 R - ggplot2 图形本质与作图逻辑 PPT 幻灯片逻辑连接]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[罗辑思维_德国为什么会崛起]]></title>
      <url>%2F2017%2F03%2F26%2F%E7%BD%97%E8%BE%91%E6%80%9D%E7%BB%B4_%E5%BE%B7%E5%9B%BD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%B4%9B%E8%B5%B7%2F</url>
      <content type="text"><![CDATA[城市。是先有人的聚集。人为什么要聚集，因为分工越来越细，人们需要相互协作。人口密度越来越大，所以才有了大楼。为了加上协作，所以才有了公路，车辆，火车。德国能够快速崛起，很重要的一点是人，但不仅仅是人，他们的能力，而是他们的思维，或者说他们整体的思维意识。 ​ 好的精细的社会结构。判断标准是不是促进人的主观能动性。 ​ 社会经济的发展，最底层的保障是组装力量。它保障了最后的社会底线。使得商人对未来报有希望，对契约与信任有认同，所以才会有投资的出站。 ​ 一个国家的开放主要是两点。 第一，对外开放。把自己的东西出口，把好的东西引进来。这个基本大家都知道。 第二，对内开放。就是国内人们可以在不同的社会阶层之间流动。比如说，我们看到现在的高层富人，几十年前都是屌丝，他们通过自己努力进去到了新的阶层。如果你不好好努力，你就会变成屌丝。这就极大促发了人的主观能动性。如果存在严重的阶级分层，且无法流动。那想一想会是如何。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[罗辑思维_创新是怎么发生的？]]></title>
      <url>%2F2017%2F03%2F25%2F%E7%BD%97%E8%BE%91%E6%80%9D%E7%BB%B4_%E5%88%9B%E6%96%B0%E6%98%AF%E6%80%8E%E4%B9%88%E5%8F%91%E7%94%9F%E7%9A%84%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[《创新是树也是网》创新。人的特性。不是单一性的，而是多纬度的。如果想要知道一个点的意义，你必须要把它放到整个网状中去评判。 《创新是怎么发生的？》阅读是自己与自己交流的过程。我们读书，肯定是先有一个问题，然后通过读书去解答这个问题。 创新，它不是一个目的性的活动。不是通过理性设立一个目标，你通过资源去匹配它，就冷达到的。 世界也不是一个纯理性的世界，不是都由因果关系组成的。因果关系，是人类理性发展出来的。比如大雁南飞，这不是一个因果性的行为，对它来说而是一个程序性的本能活动。对于孩子，很爱问为什么。为什么太阳从东边升起来，地球为什么会转，为什么是这样转的？等等。 西方有一个研究，说孩子的理性促发，可能就是对按开关灯会亮这个现象所最早促发的。 过去永远都不会死，甚至从未过去。 一夫一妻:人类文明伟大的结果。其他物种会出现2种情况:第一，群居。母的是抵御天敌。但对孩子的父亲归属是模糊的。第二，独居。虽然明确了孩子的归属，但缺失了群居的优势。以上这两点都会使得繁衍后代的速度变慢。因为母亲长年承担了抚育孩子的任务。唯独人类，既是独居一夫一妻，又获得了群居的协作。当两个结合在一起得时候，就能使得繁衍的速度大大加快。因为孩子的父亲能从外面找食物，大大缩短了母亲的哺乳期。理论上可以二年，甚至一年一胎。15万年-2万人6万年前-100万人1万年前，600万人。公元1世纪，2.5亿人核心有两个: 农业+一夫一妻制 在长达过去的所有历史中，是没有恋爱，是没有爱情的。婚姻，是为了繁衍后代，是为了绑定财产。目的论包装过后就被称为了进化论。认为，我们的一夫一妻制是进化而来的，认为我们发展了，道德高尚了。但现在生物学研究发现，在4000多种哺乳动物，，天然有120多种，就是一夫一妻制。在灵长类动物中，比较上升到18%。二态性，雄性比雌性大。二态性高，倾向于群居。二态性高，倾向于独居。人类，这两个方面都有一定的倾向。最后定格在一夫一妻。由一种假说: 因为狩猎。1.狩猎一定需要合作。而合作需要公平，对性资源的分配上是公平的。2.只要开始狩猎，人类就开始发明武器，那就拉平了体格方面的差距。比如发明一个棍子。人类创新创造是一个偶然获得了一个动因，然后发展了一个制度（副产品）。对于乱伦与近亲结婚，现在医学解释是体质的关系。但在历史上，两个假说:1.两个孩子从小在一起长大的人，对彼此没有兴趣。2.保护现有的社会关系的确定性。比如一个父亲跟他的女儿生下的孩子，那个男人是这个孩子的父亲？外公？一旦开始外婚制，产生了第二个社会关系，从而产生相互协作（副产品） 农业把人类从其他物种隔离开来。 1.要定居。2.要存储，要提高产量，发明工具。要交换。一个复杂社会的产生。私有财产制度的产生。 但农业是怎么来的？原始社会的生活水平不低。劳动时间也就6个小时。摄入的能量也是2000大卡路里。 这是现在医学研究出来，多了就变成胖子。而且他们几乎没有饿死。 大面积的饥荒，饿死是农业发明以后才发生的。 农业，是上天的恩赐。就是突然有一片地方，长出了食物，没有人劳动。这部分人，想要一直享受这样的食物，就要定居。然后因为有了食物的保障，就更方便繁衍，然后人口激增，食物短缺。这就需要有人出来进行劳动。农业。一种互驯。人以为改变了环境，而环境由于约束了人类。 郑也夫 《文明是副产品》 《信任论》 《代价论》]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R语言_统计分析]]></title>
      <url>%2F2017%2F03%2F20%2FR%E8%AF%AD%E8%A8%80_%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[运用R语言完成数据的统计分析。 包括统计函数、交叉表、相关性等。 统计函数基本统计量 名称 含义 示例 mean(x) 均值 median(x) 中位数 sd(x) 标准差 var(x) 方差 mad(x) 绝对中位差 quantile(x,) 分位数，probs是0-1之间的数值向量 quantile(x,probs) quantile(x,c(.3,.7)) range(x) 求值域 rang(c(1,2,3,4))，返回(1,4) sum(x) diff(x,) 滞后分差； diff(x,lag=n) 1)diff(c(1,5,23,29),lag=2) min(x) max(x) scale(x,) 为数据对象x按列进行中心化或标准化 scale(x,center=TRUE,scale=TRUE) scale 默认情况下，scale对矩阵或数据框的指定列进行均值=0，标准差=1的标准化； 中心化 center=T 标准化 center=T,scale=T 若对任意均值，SD为标准差，M为均值 newdata &lt;- scale(mydata)*SD+M mad( ) - 绝对中位差 1.求原样本S1中位数，记为m12.原样本S1各元素减去m1，得到的值去绝对值，得到新的样本S23.求新样本S2的中位数m24.返回的值=1.4826*m2 概率函数 名称 作用 全称 示例 说明 d 概率函数 density p 分布函数 distribution function pnorm(x,mean=a,sd=b) 生成mean=a,sd=b的x【左侧的面积值】；pnorm(1.96)=0.975 q 分位数函数 quantile function qnorm(0.x,mean=a,sd=b) 生成0.x分位数，mean=a，sd=b的情况下；默认为标准正态 r 生成随机数 random rnorm(x,mean=a,sd=b) 生成x个mean=a,sd=b的随机数；默认情况下a=0,b=1，且mean/sd可省略 概率函数 含义 beta Beta分布 binom 二项分布 nbinom 负二项分布 multinom 多项分布 norm 正态分布 lnorm 对数正态分布 unif 均匀分布 t t分布 f F分布 logis Logistic分布 exp 指数分布 chisq （非中心）卡方分布 pois 泊松分布 geom 几何分布 hyper 超几何分布 cauchy 柯西分布 signrank Wilcoxon符号秩分布 wilcox Wilcoxon秩和分布 weibull Weibull分布 通用函数123## 截尾trim=0.n # 在统计函数中加入trim表示截去最高和最低各n%，计算中间(1-n)%的值c&lt;-matrix(rnorm(12),1,mean,trim=0.2) 交叉表 what ：一种分类汇总的表格 Cross Tabulations why ：用于查看变量的频数、占比 多结果列联表1234567891011121314library(gmodels)CrossTable(x,y, digtis=3, max.width=5, expected=F, prop.r=T, prop.c=T, prop.t=T, prop.chisq=TRUE, chisq=F, fisher=F, mcnemar=F, missing.include=F, format=c("SAS","SPSS"), dnn=NULL,...) # x，一个矩阵或向量。如果出现y，则x必须是一个向量# max.width= ，如果想要一个单柱立式表，可设为1# expected=F/T, 如果为T，chisq将被设置为TRUE和Chi-Square单元计数将被纳入# prop.r - 行比例 ; prop.c - 列比例; prop.t - 表比例; # prop.chisq - 卡方贡献的每个单元格# format="SAS" / "SPSS" ,默认输出格式为"SAS"# 独立性检验 chisq=F / fisher=F / mcnemar= FCrossTable(data$col, data$col); / with(data, CrossTable(col1, col2))CrossTable(HR_data$sales, HR_data$salary, prop.r=T,prop.c=F, prop.t=F, prop.chisq=F) # 只有prop.r=T ,表示对每一行求比例 单结果列联表 表格紧凑化 - ftable(table) 1234567891011121314151617181920212223242526272829303132计算频数table(object1, object2, object3, [useNA=ifany])# 若出现useNA=ifany，则将NA视为一个有效类别# x &lt;- with(data, table(col))xtabs(formula, data=matrix/df ) # 从矩阵/数据框中提取xtabs(~col1+col2, data=frame_name)-----------------------------------------------------------------------------------计算占比prop.table(table, margins) # 一般都需指定所求变量的比例（默认为表比例）## prop.table(table) --对所有变量求比例## prop.table(table, 1) --对第一个变量求比例## porp.table(table, 2） --对第二个变量求比例## prop.table(table, c(1,2)) -对第一、第二个变量求比例；当维度大于2时## prop.table(table)*100 -- 得到百分比形式-----------------------------------------------------------------------------------计算边际和margin.table(table, margins)添加新的结果addmargins(table, margins)# addmargins(table) -对所有变量创建边际和# addmargins(prop.table(table, 1), 2) -对table表中第一个变量求比例，并对第二个变量创建边际和 相关性 what ： 描述定量变量之间的关系；衡量两个样本之间的相关性；若为0，则表示两者不相关，即独立 相关系数 线性相关程度-Pearson积差相关系数 分级定序变量的相关程度-Spearman等级相关系数 非参数等级相关程度-Kendall’s Tau相关系数 协方差：一个变量的偏离程度，会对另一个变量的偏离程度产生多大的影响； 如果其中一个大于自身的期望值，另外一个也大于自身的期望值，那么两个变量之间的协方差就是正值。 如果X 与Y 是统计独立的，那么二者之间的协方差就是0 但是反过来并不成立，即如果X 与Y 的协方差为0，二者并不一定是统计独立的。取决于协方差的相关性η 方差：当两个变量是相关的特殊情况 偏相关：控制一个变量或多个定量变量时，另外两个变量之间的关系 why ：确定变量之间的影响程度的强弱，以得出变量的重要性[为后续分析提供变量选择] 相关系数123456789101112131415161718192021222324252627cor(matrix/df, use="everything", method="pearson")# 先选择定量变量的数据集 data&lt;- select(data, )# use= ，表示对缺失值NULL的处理方式## use="everything"(默认) , 结果为missing;## use="all.obs",结果报错; ## use="complete.obs"--行删除; ## use="pairwise.complete.obs"--成对删除# method=， 表示选择的相关系数种类## method="pearson"（默认）## method-"spearman"## method="kendall"cor(matr/df) - 得到一个两两计算相关性的方阵cor(HR_comma[ , 1:8]) # 只可对定量变量做相关性# 求一组变量与另一组（非两两）的相关矩阵x &lt;- states[ , c("col", "col")]y &lt;- states[ , c("col", "col", "col"]cor(x, y) ----------------------------------------------------------------------------------- cov(matrix/df, use="everything", method="pearson") – 12345678偏相关library(ggm)pcor(vector, S)# vector，一个数值型向量, 数值代表变量的序数；前两个数值表示要计算的变量下标，其余为要排除的变量# S，变量的协方差阵colnames(data)pcor(c(1,2,4,5), cov(data)) 相关图 - 可视化1234567891011121314151617181920212223242526272829303132333435363738394041424344library(corrgram)corrgram(dataX, order=TRUE, lower.panel=, upper.panel=, text.panel=, diag.panel=, main="")# dataX，是一行一个观测值的数据框，即长格式 或者是一个 相关性矩阵## [reshape2包] - melt(data, [id="" / c("", "")] # order=TRUE, 相关矩阵使用【主成分分析法】对变量进行重排序# lower/upper.panel=,控制非对角线的设置## NULL - 不显示## panel.shade - 用阴影深度表示相关性大小## panel.pie - 用饼图填充比例表示相关性大小（顺时针，正相关）## panel.pts - 画一个散点图## panel.ellipse - 画一个置信椭圆+平滑曲线## panel.conf - 画出相关性+置信区间（用数值表示，而非图片）# text.panel=panel.txt - 输出变量名# cex.labels=num，变量名的大小# diag.panel=，控制主对角线的设置## panel.minmax - 输出变量的最大最小值和变量名## panel.ednsty - 输出核密度曲面和变量名corrgram(mtcars /cor(data), order=TRUE, lower.panel=panel.pei, upper.panel=panel.conf, text.panel=panel.txt, main="")----------------------------------------------------------------------------------- library(corrplot)corrplot(corr, method="number", order="FPC" tl.col="black", title="",tl.srt=45，mar=c(1,1,3,1)...)# corr，是一个相关性矩阵，且必须是方形；# method="", 可视化的图形，circle（默认），square, ellipse, number, shade, color, pie# type=""，图形矩阵的位置，full（默认，全部完整矩阵），lower/upper,显示下三角/上三角# order=""，相关矩阵的排序方法，original(默认,原来的顺序), FPC(第一主成分), hclust(层次聚类次序), AOE(特征向量角的顺序)# add=FALSE(默认)，不添加到现有的图形中（即创建一个新的图形），若为TRUE，则添加到现有的图形# mar=c(1,1,3,1) # 用来调节边界大小，以放下标题# tl. 文本标签## tl.cex= # 文本标签的大小## tl.col= 文本标签的颜色corrplot(corr,method="circle") 类别变量 总体均值对比 回归 what ：建立因变数Y与自变数 X之间关系的模型 why ： 了解变量之间是否相关？相关的方向与强度？ 并建立数学模型以观察特定变量来预测因变量；（可以给出自变量来估计因变量的条件期望） how ：分析步骤 确定因变量与自变量，选择回归方程 1234因变量 - 二值型数值/类别型变量# Logistic回归因变量 整理数据格式 12345678Logistic回归赋值 - 二分法 # data$col[data$col cond] &lt;- 1# data$col[data$col cond] &lt;- 0因子化# data$col &lt;- as.factor(data$col) 拟合模型 12Logistic回归 # fit &lt;- glm(formula, data=, family=binomail) 查看统计量，并重新选择自变量 1summary(fit) 重新拟合模型，并查看统计量 123Logistic回归 - # fit2 &lt;- glm(formula, data=, family=binomal)# summary(fit2) 模型选择 - 嵌套对比 12Logistic回归 - 卡方检验(若p值&lt;0.05，说明多余的变量对方程有显著影响，不能舍去)# anova(fit, fit2, test="Chisq") 解释模型 12Logisctic回归# 指数化 - exp(coef(fit)) 深层次分析 交叉验证：- 评价回归方程的泛化能力；即，回归方程对新观测样本的预测能力 模型评价：评价预测变量对结果概率的影响【在选择最佳模型之后】 过度离势 [ Logistic回归 ] [what] - 过度离势：观测到的响应变量的方差 &gt; 期望的二项分布的方差(σ²=npq)； [why] - 过度离势会导致标准误检验和不精确的显著性检验；若出现过度离势，可用类二项分布来代替，即glm(,,family=quasibinomial) [how] - 比较模型的残差偏差与残差自由度的比值；若比值非常接近1，则没有过度离势；若比1大很多，则存在过度离势；deviance(fit) / df.residual(fit) 预测模型 12Logistic回归# predict(fit, newdata=, type="response") 确定统计量 参考 表达式 常见表达式 表达式 作用 示例 解释 ～ 分隔符号 y～x+z+w 左边-因变量/响应变量 右边-自变量/解释变量 + 分隔预测变量 ： 预测变量的交互项 y～x+z+x:z * 所有可能交互项的表达方式 y～xzw—y～x+z+w+x:z+x:w+z:w ^ 交互项的某个次数 y～(x+z+w)^2—y～x+z+w+x:z+x:w+z:w 交互项最高次为2次 . 包含除因变量之外的所有变量 y～.—y～x+z+w 当一个数据框包含y,x,z,w这四个变量时 - 减号，从等式中移除某个变量 y～(x+z+w)^2-x:w— y～x+z+w+x:z+z:w -1 删除截距项 y～x-1 拟合y在x上的回归，并强制直线通过原点 I() [大写i ] 从算术（而非表示式）的角度来解释括号中的元素 y～x+I((z+w)^2) 表示的是x+(z+w)²，而非x+z+w+z:w function 可以在表达式中运用的数学函数 log(y)～x+z+w mpg ~ wt \ cyl 表示按条件（cyl）绘图； 即按cyl的水平为【分组条件】分别绘制mpg和wt的关系图 研究设计表达式 表达式 作用 示例 y～A 单因素ANOVA y～x+A 含单个协变量的单因素ANCOVA y～A * B 双因素ANOVA 展开为 ~A+B+A:B y～x1+x2+A*B 含两个协变量的双因素ANCOVA y～B+A（B是区组因子） 随机化区组 y～A + Error(Subject/A) 单因素组内ANOVA y～B*W+Error(Subject/W) 含单个组内因子(W)和单个组间因子(B)的重复测量ANOVA 展开为 ~B+W+B:W 1.小写字母，定量变量 2.大写字母，组别因子（若不转换为factor，则默认为定量协变量） 3.Subject，被试者独有的标志变量 4.Error(Subject/A)，表示组内因子]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R语言_数据处理]]></title>
      <url>%2F2017%2F03%2F19%2FR%E8%AF%AD%E8%A8%80_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%2F</url>
      <content type="text"><![CDATA[运用R语言进行数据处理。 数据导入、数据结构、数据格式、数值处理、表格处理、日期处理、数字处理、缺失值与唯一值； 数据导入与导出导入 要导入的数据必须存放在getwd()目录下 Windows下路径要用斜杠/或者双反斜杠\\ 1234567891011121314151617181920212223read_csv("filename.csv", col_names=c(), col_types=col( colname=col_ ))## read_csv导入 读取分隔符为逗号 ## read_tsv导入 读取分隔符为制表符 ## read_csv2导入 读取分隔符为分号library(readr)data &lt;- read_csv("filename.csv", col_names =c("",""), col_types=col( cost=col_numeric(), ))library(dplyr)data &lt;- tbl_df(data) # 将表格转化为tbl_df的格式View(data) # 视图形式查看# 设置列名 col_names = TRUE/FASLE/c("name1","name2") # 第一行作为列名/不作为列名/重命名[数量必须相同]# 排除某个列、变更列的格式 col_types = cols( X6=col_skip(),X1=col_character() ) # 不选中X6列 （X6为列名）# 设置编码 locale = locale(encoding = "UTF-8")## read.table导入data &lt;- read.table("filename.csv", header=TRUE,sep="",na.strings=c("x")) # header=T,即将第一行作为列名；默认为FASLE;# sep=""，分隔符；默认为（空格、换行、回车、制表符），可设置为逗号(,)、制表符(\t)# na.strings=c("x","y") 将等号之后的内容会被转换成NA；即该表中x/y的值会被转化为NA## 直接用RStudio导入分别设置第一行为列名、更改列名、列格式、跳过列 – 12345## 加载包中的数据data(filename, package="") # 装在包中的特定数据## 列出当前已加载包中所含的所有可用示例数据集data() / data(package="") 导出12345setwd("D:\\")write.table(y,"sample.csv",sep=",")# y是R中的数据，sample.csv是存到本地的文件名write.csv(data, file="D:/bearf2.csv") # 若保存至其他位置，需要完整路径------------------------------------------------------------------------------------ 数据结构数据整体结构1234567891011121314## 返回数据结构str(object)## 返回数据结构/统计摘要summary() # 区别对待不同类型的数据变量- (1)数值型：相关极值等信息；(2)名义型/有序型：显示的是各水平的【频数值】## 返回对象格式/类型class() # 返回 numeric / character / factor / ts …## 返回对象维度dim()## 返回对象模式mode() 行列名称&amp;重命名12345678## 返回所有列的名称names(object) colnames(object)## 返回所有行的名称row.names(object) rownames(object) --二维以上的任何对象 – 12345678910## 直接修改fix(object) # 可以改变格式 numeric / character## 重命名列名library(dplyr)rename(data, newname=oldname) # 新的列名在前## 选择变量时进行重命名select(data, oldname = newname) # 新的列名在后 长宽格式转换12345678910111213## 转为长格式形式library(reshape2)new &lt;- melt(data, id="var", measure="var")# id="var"/ c("var1","var2") 以该变量为基准进行重构# measure="var"/ c("var1","var2") 需要将哪些变量组合进id列的变量；若measure缺失，表示所有字段`new &lt;- melt(economics, id="data", measure=c("unemploy","uempmed")` ## 重铸为宽格式[excel统计表单的形式]new &lt;- dcast(data, formula, FUN)# formula，rowvar1+rowvar2 ~ colvar1+colvar2的格式； rowvar-以此为基准的id列；colvar-需要重构的变量列# FUN，按照任意函数来重构`dcast(data, ID~variable, mean)` 数据行数、唯一值数1234567891011## 返回总行数/列数ncol() / nrow()length - 计算元素的长度## 返回对象的个数 或者 某个列的的观测值行数length(object/data$col)# 返回对象的唯一值的行数length(unique(data$col/object))# 返回非空置的行数length(na.omit(object/data$col)) 数据格式因子化12345678910111213## 简单因子化data$col &lt;- factor(data$col)## 有序因子化：按当前顺序来指定顺序data$col &lt;- factor(data$col, order=TRUE, levels=data$col)## 有序因子化：自定义顺序data$col &lt;- factor(data$col, order=TRUE, levels=c("col1","col2"))## 简单无序data$col &lt;- factor(data$col, order=FALSE)## 无序因子化/名义变量data$col &lt;- factor(data$col, levels=c("col1","col2"), labels=levels / c("new_col1","new_col2")) factor与as.factor的区别 as.factor(x) – 只能对整个数据/列进行转换，其中无法插入其他语法 1234## 根据第二列的值，重新对第一列的值进行排序data$col &lt;- reorder(data$col,data$col2,[FUN],[order=T/F])# FUN，表示对第二列进行的变换，以此为排序依据# order= T/F ,逻辑值，返回一个有序因子 or 一个因素 数据格式索引 格式判断 格式转换 含义 is.numeric( ) as.numeric( ) 数值格式 is.integer( ) as.integer( ) 整数 is.character( ) as.character( ) 字符串格式 is.factor( ) as.factor( ) 因子化 is.logical( ) as.logical( ) 逻辑值 as.Date(object, “format”) 日期格式 is.list( ) as.list( ) 列表 is.data.frame( ) as.data.frame 数据框格式 is.matrix( ) as.matrix( ) 矩阵格式 is.array( ) as.array( ) 数据组 is.vector( ) as.vector( ) 向量格式 double：数值型格式（双精度向量：保存更多的有效位数） 1234567data$col &lt;- as.numeric(data$col)------------------------------------------------------------------------------------多列变更gb[,c("net_activation","total_income")] &lt;- lapply(gb[,c("net_activation","total_income")], as.numeric)data[,col:col] &lt;- lappy(gb[,col:col], as.numeric) 有效位数&amp;小数位数1234## options(digigs=7) # 默认值 有效位数options(digits=n) # 限定最小值的有效位数，并使其他数字舍入后与其小数点后的位数相同；--xx&lt;-c(98,263.5, 2.43, 1.5531)--options(digits=2) [1]98 263.6 2.4 1.6 数据处理绑定数据框123456789101112## with绑定数据框&lt;- with(data, &#123; stats &lt;- summary(mpg) &#125;)# 花括号&#123;&#125;之间的语句都对数据框table执行，赋值仅在此函数的括号内生效；若使用&lt;&lt;则为全局变量# 若在with符号左侧（new&lt;-with()）出现赋值的对象，则在with符号内产生的赋值依然在其外有效# attach() / detach() # 必须成对出现attach(data)...detach(...) 基础函数funs12345678910111213141516171819202122funs(...)funs_(dots, args = list(), env = baseenv())# dots, ... ## A list of functions specified by:## Their name, "mean"## The function itself, mean## 调用的函数 点号(.) 作为一个虚拟参数 mean(., na.rm = TRUE)# args 指定要添加到所有函数调用的附加参数的列表。(A named list of additional arguments to be added to all function calls.)# env The environment in which functions should be evaluated.-----------------------------------------------------------------------------------Examples# funs(mean, "mean", mean(., na.rm = TRUE))# Overide default namesfuns(m1 = mean, m2 = "mean", m3 = mean(., na.rm = TRUE))# If you have function names in a vector, use funs_fs &lt;- c("min", "max")funs_(fs) plyr包 what ：用来切割、计算、合并数据的包 why ：在一个函数内同时解决spilt-apply-combine的三个步骤 Spilt：把要处理的数据分割成小的片段 Apply：对每个小片段进行操作 Combine:把片段重新组合 how ： 1234567891011121. a*ply(.data, .margins, .fun, ..., .progress = "none") 2. d*ply(.data, .variables, .fun, ..., .progress = "none") 3. l*ply(.data, .fun, ..., .progress = "none")# ddply(.data, .variables, .fun = NULL, ..., .progress = "none", .inform = FALSE, .drop = TRUE, .parallel = FALSE, .paropts = NULL)# 第一个参数是要操作的原始数据集，比如baby_name# 第二个参数是按照某个（也可以几个）变量，对数据集分割，比如按照year对数据集分割，可以写成.(year)的形式# 第三个参数是具体执行操作的函数，对分割后的每一个子数据集，调用该函数# 第四个参数可选，表示第三个参数对应函数所需的额外参数## 其他参数，可以暂时不用考虑。ddply()函数会自动的将分割后的每一小部分的计算结果汇总，以data.frame的格式保存。&lt;span style="color:red"&gt;分割后的数据，是fun的第一个参数。&lt;/span&gt; – 12345678910111213141516# 对原始数据集做一些操作，并把结果存储在原始数据中transform()ddply(baby_names, .(year, sex), transform, rank = rank(-percent, ties.method = "first"))# 第二个参数有点变化，除了year，还有sex，这表示对baby_name数据集，对year和sex分类（类似于SQL中的group by year, sex）。第四个参数是transform的额外参数，如果查看transform的帮助文档，其函数调用方式如下：# 不追加结果到原始数据，而是产生新的数据集summarize()summarize(baby_names_2008_boy, trend = max(percent) - min(percent))# 0.010266 数值相关创建123456## 创建序列 - seq()seq(from_num, to_num, by_num) ## 创建重复值 - rep()rep(x, n) 替换与返回123456789101112131415根据值来替换## object[object condition] &lt;- XX &lt;- "" # 前后变量名必须一致leadership$age[leadership$age&gt;75]&lt;-"Elder"## ifelse(test, yes, no)temp6$budget &lt;- with(temp6,&#123; ifelse(budget&lt;(qnt[1]-h),NA,budget) ifelse(budget&gt;(qnt[2]+h),NA,budget)&#125;)temp6 &lt;- na.omit(temp6)## sub()sub(patter, replacement, object, ignore.case=FALSE, fixed=FALSE) --# patter表达式/文本字符串， replacement要替换的值，在object中搜索pattern；fixed=F(默认),pattern为正则表达式；fixed=T,pattern为字符串文本 (相似于vlookup函数) – 12345根据位置来替换## substr() - 返回中间的部分；即替换substr(object,star_num,stop_num) substr(object,star_num,stop_num) &lt;- "xx" #用xx替换其之间的值；若数量少于则循环，若大于则不会覆盖超出部分 复杂替换：正则表达式 拆分1234## strspiltx &lt;- strspilt(object, "sep", fixed=FALSE) -- # 对object按照”sep"进行分割，若fixed=F(默认),sep为正则表达式；否则为文本字符串； strspilt("abc", "") --返回含1个成分，3个元素的列表"a" "b" "c" 合并123456## cat合并；将所有的对象合并为一个单元格的值object &lt;- "name"x &lt;- cat("x1","x2",object, num, [sep=""] )## paste合并；若对象为不同“列”，则一一对应合并；若对象有3列，合并后仍为3列paste("x1","x2",4\n, …, [sep=""]) cat( ) 与 paste( ) 相同与区别 区别： paste( ) 对应的列单独合并 cat( ) 合并为一个单元格 123456&gt; paste(c("X","Y"),1:10,sep="")&gt; # [1] "X1" "Y2" "X3" "Y4" "X5" "Y6" "X7" "Y8" "X9" "Y10"&gt;&gt; cat(c("X","Y"),1:10,sep="")&gt; # XY12345678910&gt; &gt; 长度123456## 计算字符数量 - nchar## 计算元素数量 - lengthx1&lt;-c("ab","cde","fghij")nchar(x1)----2,3,5length(x1)----3 字符规则 引用符 字符 含义 Quotes \n newline；换行 Quotes \r carriage return Quotes \t tab；制表符 Quotes \b backspace；空格 Quotes \a alert (bell) Quotes \f form feed Quotes \v vertical tab Quotes \ backslash \ Quotes \’ ASCII apostrophe ‘（单引号） Quotes \” ASCII quotation mark “（双引号） Quotes ` ASCII grave accent (backtick) ` Quotes \nnn character with given octal code (1, 2 or 3 digits) Quotes \xnn character with given hex code (1 or 2 hex digits) Quotes \unnnn Unicode character with given code (1–4 hex digits) Quotes \Unnnnnnnn Unicode character with given code (1–8 hex digits) 表格相关返回指定子集 - 行12345678910111213141516171819202122232425262728293031323334353637383940library(dplyr)filter()## 根据条件选取 filter(tbl_df, cond)filter(hflights_df, Month == 1, DayofMonth == 1)&lt;- filter(tbl_df, x %in% c("a","b")) # 集合运算：并且(&amp;)，或者(|)# 条件判断1： %in% - 表示x中含"a"或者"b"的值，返回为逻辑为真# 条件判断2：否定(!=)、大于(&gt;)、大于等于(&gt;=)、恒等于(==)## 排除多条件的观测值 / 或者用 &amp; 联接&lt;- filter(iris,!Species %in% c("setosa"))&lt;- filter(iris,Species !="setosa" &amp; Species != "kaggle")## 选中子集中的特定列filter() %&gt;% select(., var)## 通过行数的位置进行选取filter(tbl_df, n:n) # 等价于data[n:n, ]--------------------------------------------------------------------------------------## 前/后/任意选取head(data, n) 等价于 first(data, n)tail(data, n) 等价于 last(data, n) nth(x) # 返回第x个观测 (dplyr包)## 随机选取sample_frac(iris, 0.5, replace=TRUE) # 按比例sample_n(iris, 10, replace=TRUE) # 按数量## 选取并排列前n个数top_n(tbl_df, n)top_n(tbl_df,-n) # 从底部开始选择n个数据## 删除重复值distinct(hflights_df, Month, .keep_all = TRUE)#.keep_all = TRUE指保留除Month以外的其它列的内容。默认的情况是不保存其他列的。 vector-向量 123&gt; x &lt;- x[num:num] &gt; x &lt;- x[c(num1,num2,num3)]&gt; &gt; 矩阵/数组/数据框 123456789&gt; ## 一般选取&gt; z &lt;- z[i,j] / z[i, ] / z[, j]&gt;&gt; ## 连续选取&gt; z[i:j, ] / z[ ,i:j] / z[i:j] # []方括号中无逗号出现，表示选取列&gt; z[c("row","row") , ] &gt; z[, c("col","col")] &gt; z[c("col", "col")]&gt; &gt; 列表 12&gt; x &lt;- mylist[[ ]] # 其中规则与数据框中相同&gt; – 12## subset选取subset(data, condition, select=c(col1,col2) / col1:col2 ) 返回指定子集 - 列1234567891011121314151617181920212223242526272829303132333435363738library(dplyr)select()## 通过列名(无需引号)来选取 select(tbl_df, var1,var2)#连续多变量 select(tbl_df, var1:var4)#排除某变量 select(tbl_df, -var) / select(tbl_df, -(var1:var4))select(hflights_df, -(Year:DayOfWeek))## 不同条件列选择 - select_if()hflights %&gt;% select_if(is.factor)hflights %&gt;% select_if(function(col) is.numeric(col) &amp;&amp; mean(col) &gt; 3.5)-------------------------------------------------------------------------------------------## 通过选项函数进行选择#列名中以元素x为首的列 - starts_with("x")select(iris_df, starts_with("Petal")) #列名中以元素x结尾的列 - ends_with("x")select(iris, ends_with("Width")) #列名中包含元素x的列 - contains("x")select(iris_df, contains("etal"))#排除对应的列，函数前加负号 -select(iris_df, - starts_with("Petal")) #所有变量 - everything() 一般调整数据集中变量顺序时使用select(df2tbl,y,everything()) #将变量y放到最前 #选择包含在声明变量中的 - one_of("")select(iris_df, one_of("Species","Petal.Width")) # 等价于 select(tbl_df, var,var) #选择名称符合指定匹配正则表达式的列 - matches("")select(iris, matches(".t.")) #选择x01到x05的变量 num_range('x', 1:5, width = 2) – 1234567891. vector-向量x &lt;- x[num:num] / &lt;- x[c(num1,num2,num3)]2.矩阵/数组/数据框--[]方括号中无逗号出现，表示选取列(1)z &lt;- z[i,j] / z[i, ] / z[, j] / z[i:j, ] / z[ ,i:j] / z[i:j] (2)z &lt;- z[c("row","row") , ] 有逗号/ z[, c("col","col")] / [c("col", "col")] 3.列表x &lt;- mylist[[ ]] --其中规则与2中相同 更改数据/创建新变量123456789101112131415161718192021222324252627## 在原始数据上做修改library(dplyr)transfrom()transform(df, var3=var1+var2) # 此时将创建新列； 若为 var2 = var2 * 1.5 则将替换为2倍的var2的值transform(gb, round(select(gb, 消费金额,激活净值,总收入_含点差),2)) # 因为在源数据上做修改，所以无需赋值 ## 创建新列data$new_col &lt;- c( , )----------------------------------------------------mutate(tbl_df, var3=var1+var2, var4=var3+..)# 优势在于可对刚添加的列进行变换`mutate(hflights_df, gain = ArrDelay - DepDelay, gain_per_hour = gain / (AirTime / 60)）` ## 对每一列运行窗口函数 - mutate_each()mutate_each(iris, funs(min_rank), [var1,var2])# 窗口函数--between() # 数据在a、b之间--lag # 把除最后一位以外的所有数据延后，第一个元素为NA--ntile # 把数据分为n分--lead # 把除第一个值以外的所有元素提前，最后一位为NA--percent_rank # 把数据在[0,1]中重组，并排序--row_number # 排序。并列时将并列数在前的序号在前--dense_rank #无缝排序--min_rank # 排序，并列时，其他序号延号 概述函数123456789101112131415161718192021222324252627282930313233# 创建新的对象library(dplry)summarize()## 对数据进行概述，并创建新的子集summarize(tbl_df,FUN,na.rm=T) # 常伴有na.rm=T`summarize(hflights_df, delay = mean(DepDelay, na.rm = TRUE))`# 概述函数--first() / last() / nth()--n() / n_distinct()--min() / max() / mean() / sd() / median() / IQR() / sum() ## 分组后求数据聚合summarize(group_by(df2tbl,x), sum(y))group_by(tbl_df,var) %&gt;% summarize(., sum(Y))## 对每一列运行概述函数summarise_each_(tbl, funs(mean(., na.rm=T)), vars)# vars, 与Select用法相同。如果确实，则选择所有未分组的变量.# funs(sum(., na.rm=T))--------------------------------------------------------------------------------------count()## 计算变量中每一个特定值的行数count(tbl_df, var, [wt=])# wt="" 若缺失，则统计数量；分类统计观测值行数count(iris, Species) # 分组计算Species列中各类别的频量；类似于基本函数包中的table函数# wt="",若指定某一列，则会通过计算非缺失值的总和来比对权重(weighted)；# wt = var2 ， 表示按var中的类别来分组计算var2中未缺失值的对应的求和count(iris, Species, wt=Sepal.Length) # 即按Species分组后，求对应Sepal.Length中的值的总和--等价于 iris %&gt;% group_by(., Species) %&gt;% summarize(., sum(Sepal.Length)) 分组与排序123456789101112131415library(dplyr)gropu_by## 分组groub_by(tbl_df, var) # var为分组变量iris %&gt;% group_by(., Species) %&gt;% summarize(., sum(Sepal.Length))# 为每一个分组分别进行概述iris %&gt;% group_by(., Species) %&gt;% mutate(., ...))# 按组计算新变量ungroup(iris) ## 移出数据框的分组信息 – 123456789101112131415161718library(dplyr)排序 - arrange()arrange(tbl_df,var,desc(var))# 默认为升序排序；降序为descarrange(flights, desc(dep_delay - arr_delay))# 可以在排序里面使用计算 --------------------------------------------------------------------------------------## 排序 reorder# 以对col2列进行函数FUN处理后为排序标准，对col1进行排序；默认为升序，且默认转为有序因子order=T reorder(data$col1, data$col2,FUN,[order=T]) with(InsectSprays, reorder(spray, count, median) # 以count列的中位数为排序标准对spray进行升序排列 --------------------------------------------------------------------------------------## 排序 - orderdata[order(data$col1, -data$col2)， ] # 负号，表示降序； 管道函数12%&gt;% # 将对象传递给下一个函数的第一个参数 数据合并12## 合并行rbind(object1, object2) – 12345678910## 合并列cbind(object1, object2) # object1在前；但每个对象必须有相同的行数，且有相同的顺序；cbind(object1,object[,-1]) / cbind(object1, data$col)#1.当合并的对象中有要丢弃的向量时，可一步完成；#2.若不是对于丢弃的向量，data[,j]表示的是跟data的第j列合并## merge合并merge(object1, object2, by="col_name"/=c("x1","x2")) # 按照by的内容来合并列 数据拆分123456对整个表格数据作用## 将连续型变量x分给为n个区间；用于创建美观的分割点pretty(x, n) ## 将连续型变量x分割成有n个水平的因子cut(x, n,[order_result=TRUE]) 数据划分1234567891011121314## 划分训练集、测试集library(caret)set.seed(1234) # 必须要有，因为划分是随机划分的；createDataPartition(y, p=0.x , time=1, list=TRUE)# time=num, (默认为1），要创建的分区的数目# p=0.x , 划分为p%的训练数据的百分比，故(1-p)为检验样本量的百分比# list=FALSE/TRUE，逻辑值； 一般为FALSE# y, target variable，目标变量inTraining &lt;- createDataPartition(hr_model$left, p = .75, list = FALSE) # 将数据进行划分成75%的训练样本和25%检验样本training &lt;- hr_model[ inTraining,] -将75%的训练样本数据添加到hr_modeltesting &lt;- hr_model[-inTraining,] -将余下25%的检验样本数据添加到hr_modelprint(table(hr_model$left)) - 输出分割后的数据行数 日期处理12345678910111213141516171819## 当前日期Sys.Date() / date()## 日期间隔 - difftmedifftime(object1, object2, units="") --"auto”,"secs”,"mins”,"hours”,"days”,"weeks”其中的一个，默认为天## 日期格式as.Data(object, "input_format")as.Date(x, "01/02/1956")## 输出指定格式的日期值，并可以提取日期中的某些部分format(x, format="output_foramt")format(today, format="%B %d %Y")# [1] "November 27 2014"format(today, format="%A")# [1] "Thursday" 数字处理1234567891011121314151617181920212223options(digigs=7) # 默认值## 指定小数位数（舍入） - roundround(x, [digits=num]) # 将x舍入为指定位数n的小数（默认值为0）## 指定有效位数（舍入） - sigif()sigif(x, [digits=num]) # 指定最小值的有效位数--sigif(3.531,digits=2) # 返回 3.5## 取整 - trunc()trunc(3.531) # 返回3## 取整 - 向上/向下floor() # 向下取整；等同于Intceiling() # 向上取整(大于等于x最小整数)-------------------------------------abs(x) # 绝对值x %% y # 余数 exp(x) # 指数ln(x) / log(x,[y]) # 对数sqrt(x) # 平方根x^n # 幂次方 – 12345678910111213## 列/行求和colSums(x)rowSums(x)## 行/列均值colMeans(x) rowMeans(x)range(object) # 值域quantile(x,c(0.n,0.n)) # 分位数sd(x) # 标准差var(x) # 方差 缺失值与唯一值1234567891011121314151617缺失值与不可能值## 检查缺失值is.na(x) # 缺失值colSums(is.na(x)) # 求该列缺失值的数量mean(is.na(x)) # 若比例小，可直接移除 na.omit(x)is.nan(x) # 不可能值is.infinite(x) # 无穷值---------------------------------------------## 移除缺失值na.rm = T # 在计算之前将缺失值移除，可用在函数内部## 整行删除na.omit(x) # 移除所有含缺失值所在的行【删除整行】newdata &lt;- na.omit(mydata) # 用来存储没有缺失值的数据 – 12345678910111213141516171819唯一值## 只对向量可用；或对 各行中各变量完全相同的行取一行unique(x) ## 可对数据框使用!duplicated(x) # 返回逻辑值；若完全相同则为TRUE逻辑：返回data中所有不相同的值，然后在进行行选取data[x, ]# 删除各行中变量完全相同的值 = unique(x)data &lt;- data[!duplicated(data), ] --# 返回各列所有相同的值 data[duplicated(test),]# 删除某变量中相同的值data &lt;- data[!duplicated(test[, "var"]), ] -- # 返回单列所有相同的值 data[duplicate(test[,var]),]# 删除某两个变量完全相同的行 data &lt;- data[!duplicated(test[, c("var1","var2")], ] -- # 返回多列相同的值 data[dulpicated(test[,c("var1","var2")],] 逻辑判断1which() # 返回为真的逻辑对象，允许对数组array使用 R符号 名称 作用 示例 &lt;- 赋值符号 / 转义符 [ ] 给定元素所处位置的数值 a[c(2,4)] ： 用于表示一个数值序列 a[2:6] [i,j] 选择指定的行与列 [i,] [,j] [i,j] [,] “” 用于目录名、文件名、包 ‘ ‘ 引用双引号的文字为文本时出现 labs(title=’ positon=”fill” ‘) # 用于注释。#之后出现的任何文本都会被R解释器忽视； 并且R只能对单行进行注释，故当出现多条命令符，需在每行前面加上# $ 选取一个给定数据框中的某个特定变量 patientIDdata$age &lt;&lt;- 特殊赋值符 [[ ]] 用于列表中选取对象 mylist[[“ages”]] mylist[[2]] ^或** 求幂 x% %y 求余数（x mod y) 5%%2=1 x% / %y 整数除法。5%/2%=2 == 严格等于（在浮点型数值时慎用==） 2+2==4 != 不等于 !x 非x x∣y x或y x&amp;y x和y isTRUE(x) 测试x是否为TRUE [,-1] [-1,] [,c(-2,-3)]/[,-c(2,3)] 删除第一列 删除第一行 删除多列，两种表达方式均可 mydata&lt;-mydata[,-1] mydata&lt;-mydata[,-c(2,3)] “[“ 提取谋而对象一部分的函数，后跟序列数n；1表示该对象的第一部分； 2表示该对象的第二部分；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R语言_安装与配置]]></title>
      <url>%2F2017%2F03%2F16%2FR%E8%AF%AD%E8%A8%80_%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[R语言安装、卸载与基本配置； 获得与修改当前存储路径123456# 返回当前目录getwd()# 指定存储路径setwd("D:/Downloads/R")--同时在RStudio — Tools — Global Options — General 中设置默认路径 数据库相关1234567891011121314151617# 列出当前工作空间中的对象ls()# 读取一个工作空间到当前会话中（默认值为.Rdata）load("myfile")# 保存指定对象到一个文件中save(objectlist,file="myfile")# 移除一个/多个对象rm(objectlist)# 在当面会话从执行一个脚本source("filename")# 退出Rq() 帮助文档1234567891011121314# 打开帮助文档首页help.start()# 查看函数foo的帮助?foo / help(foo) # 函数foo的使用示例example("foo")# 以foo为关键词搜索本地帮助文档??foo / help.serach(foo) # 列出名称中含有foo的所有可用函数apropos("foo",mode="function") 包的使用1234567891011121314151617181920# 安装包install.packages("ggplot2")--# 安装多个包install.packages(c("name1","name2"))# 加载包library(ggplots)# 更新包update.packages("ggplot2")# 包-帮助help(package="ggplot2")# 包-调用函数package::fun(x) - Hmisc::describe(myvars) # 调用Hmisc中的describe函数来对myvars得出统计量# 查看已安装的包installed.packages() ### 数据导入与导出1install.packages(c("readr","readxl","xlsx")) 数据处理1install.packages(c("dplyr") 作图1install.packages(c("ggplot2")) 代码格式 内容 注意 示例 缩进 1.两个空格，不要使用制表符，永远不要混用 2.例外: 当括号内发生折行时, 所折行与括号内的第一个字符对齐 二元操作符（+,&lt;-,-等） 1.两侧加上空格 2.在函数调用中传递参数时 = 两边的空格可加可不加. 逗号（，） 逗号后须加空格，逗号前不加空格 括号( ) 在前括号前加一个空格, 函数调用时除外. 正例: if (debug) 反例: if(debug)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SQL-Server_系统结构]]></title>
      <url>%2F2017%2F03%2F08%2FSQL-Server_%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%2F</url>
      <content type="text"><![CDATA[SQL Server 的特殊结构：表变量、临时表 表变量与临时表表变量 what：微软在BOL (Declare @local_variable)中定义其为一个类型为表的变量；定义表变量的语句是和正常使用Create table定义表语句的子集。只是表变量通过DECLARE @local_variable 语句进行定义。 它的具体定义包括列定义，列名，数据类型和约束。 表变量中可以使用的约束：主键约束，唯一约束，Null约束和Check约束 (外键约束不能在表变量中使用) why ： how ： 表变量只能在一个批处理中生成，超出了这个边界表变量就不存在了； 以@或者@@为前缀 一个@为前缀的表变量（@aa）是本地的，因此只有当前用户会话才可以访问 两个@为前缀即@@的表变量（@@aa）是全局的，通常都是系统变量 表变量只能在一个批处理中生成，超出了这个边界表变量就不存在了 存放在内存中，因此用户访问表变量的时候SQL Server是不需要生成日志的。同时变量是不需要考虑其他会话访问的问题，因此也不需要考虑锁机制，对于非常繁忙的系统来说，避免锁的使用可以减少一部分系统负载。 临时表 what：以#或者##为前缀； 一个 # 为前缀的临时表(#a)是本地的，只有当前用户会话才可以访问 ## 为前缀的临时表(##a)是全局的，所有用户会话都可以访问该临时表 why ：临时表以会话为边界，会话结束则临时表移除；如果需要提前销毁临时表，可以使用DROP TABLE命令 how ：因为存放在tempdb，所以可能造成物理IO，在修改时也需要生成日志来确保一致性，同时锁机制也是不可缺少的 ​ ​ 表变量 vs. 临时表 临时表是利用了硬盘(tempdb数据库) ，表名变量是占用内存，因此小数据量当然是内存中的表变量更快。当大数据量时，就不能用表变量了，太耗内存了。大数据量时适合用临时表。 一般对于大的数据集推荐使用临时表，同时创建索引，或者通过SQL Server的统计数据自动创建和维护功能来提供访问SQL语句的优化； 如果需要在多个用户会话间数据交换，临时表就是唯一的选择了。在SQL Server临时表的定义中，我们知道临时表是存放在tempdb中的，因此需要注意tempdb的调优 特性 表变量 临时表 作用域 当前批处理 当前会话，嵌套存储过程，全局：所有会话 析构方式 批处理结束后自动析构 显式调用 DROP TABLE 语句. 当前会话结束自动析构 (全局临时表: 还包括当其它会话语句不在引用表.) 使用场景 自定义函数，存储过程，批处理 自定义函数，存储过程，批处理 索引 不可创建（索引必须在表定义时建立） 可以创建索引 约束 PRIMARY KEY, UNIQUE, NULL, CHECK约束可以使用，但必须在表建立时声明 PRIMARY KEY, UNIQUE, NULL, CHECK. 约束可以使用，可以在任何时后添加，但不能有外键约束 统计数据 不创建统计数据，所以所有的估计行数都为1,所以生成执行计划会不精准 创建统计数据，通过实际的行数生成执行计划。 数据插入方式 INSERT 语句 (SQL 2000: 不能使用INSERT/EXEC). INSERT 语句, 包括 INSERT/EXEC. SELECT INTO 语句. 回滚 不会被回滚影响 会被回滚影响 事务 只会在更新表的时候有事务，持续时间比临时表短 正常的事务长度，比表变量长 创建方式 DECLARE statement only.只能通过DECLEARE语句创建 CREATE TABLE 语句 SELECT INTO 语句. 列类型 可以使用自定义数据类型；可以使用XML集合 自定义数据类型和XML集合必须在TempDb内定义 表名长度 最多128字节 最多116字节 Collation 字符串排序规则继承自当前数据库 字符串排序规则继承自TempDb数据库 表建立后使用DDL (索引，列) 不允许 允许. Insert explicit values into identity columns (SET IDENTITY_INSERT). 不支持SET IDENTITY_INSERT语句 支持SET IDENTITY_INSERT语句 Truncate table 不允许 允许 存储过程重编译 否 会导致重编译 作为参数传入存储过程 仅仅在SQL Server2008, 并且必须预定义 user-defined table type. 不允许 显式命名对象 (索引, 约束). 不允许 允许，但是要注意多用户的问题 动态SQL 必须在动态SQL中定义表变量 可以在调用动态SQL之前定义临时表 CTE what：通用表表达式 why ：在同一个语句中，一次定义，可以多次引用。 专业词汇及缩写 字段名 全程 含义 dbo Database Owner 每个数据库的默认用户 db database 数据库 dt datetime 数据库数据类型（日期） etl Extract-Transform-Load 数据仓库技术; 抽取-转化-加载 ext Extended file system 延伸文件系统/ 扩展文件系统 DDL Database Definition Language 数据库定义语言 DML Database Manipulation Language 数据库操作语言 DCL 数据控制语言 TCL 事务控制语言 dbo： 每个数据库的默认用户，具有所有者权限，即DbOwner；Database Owner 通过用DBO作为所有者来定义对象，能够使数据库中的任何用户引用而不必提供所有者名称 比如：你以User1登录进去并建表Table，而未指定DBO，当用户User2登进去想访问Table时就得知道这个Table是你User1建立的，要写上User1.Table，如果他不知道是你建的，则访问会有问题。如果你建表时把所有者指给了Dbo，则别的用户进来时写上Dbo.Table就行了，不必知道User1。 DML 查询(Select)、插入(Insert)、修改(Update)、删除(Delete) OLE DB what ：对象链接嵌入数据库（Object Linking and Embedding Database），是微软为以统一方式访问不同类型的数据存储设计的一种应用程序接口。 是一组用组件对象模型（COM）实现的接口，而与对象连接与嵌入（OLE）无关。 why ：它被设计成为ODBC的一种高级替代者和继承者，把它的功能扩展到支持更多种类的非关系型数据库，例如可能不支持SQL的对象数据库和电子表格（如Excel）。 how ：一组抽象概念（包括数据源、会话、命令和行集）将数据的存储从需要访问数据的应用中分离出来。 这是因为不同的应用需要访问不同数据类型和数据源，但是并不需要了解具体如何使用特定技术的方法访问这些数据。 OLE DB 在概念上分为两种： 消费者 ：是那些需要访问数据的应用程序 提供者 ：是实现了那些接口并将数据提供给消费者的软件组件。 OLE DB是微软数据访问组件（MDAC）的一部分。 MDAC是一组微软技术，以框架的方式相互作用，为程序员开发访问几乎任何数据存储提供了一个统一并全面的方法。 OLE DB的提供者可以用于提供像文本文件和电子表格一样简单的数据存储的访问，也可以提供像Oracle、SQL Server和Sybase ASE一样复杂的数据库的访问。 OLE DB同样可以提供对层次类型的数据存储（如电子邮件系统）的访问。 组件对象模型 what ：微软的一套软件组件的二进制接口标准。（Component Object Model，COM） why ：使得跨编程语言的进程间通信、动态对象创建成为可能。 how ： 数据库名、表明、字段名12345678910# 获取数据库所有类型select name from systypes -----------------------------------------------------# 获取所有用户名SELECT name FROM Sysusers where status=&apos;2&apos; and islogin=&apos;1&apos;islogin=&apos;1&apos;表示帐户islogin=&apos;0&apos;表示角色status=&apos;2&apos;表示用户帐户status=&apos;0&apos;表示糸统帐户 1234567891011121314# 获取所有数据库名Select Name FROM Master..SysDatabases order by Name；-----------------------------------------------------# 获取所有表名Select Name FROM SysObjects Where XType=&apos;U&apos; ORDER BY Name XType=&apos;U&apos;:表示所有用户表; XType=&apos;S&apos;:表示所有系统表;SELECT name FROM sysobjects WHERE type = &apos;U&apos; AND sysstat = &apos;83&apos;注意：一般情况只需要type = &apos;U&apos;，但有时候会有系统表混在其中（不知道什么原因），加上后面一句后就能删除这些系统表了# 获取指定数据库名下的所有表名select Name from 数据库名..sysobjects where xtype=&apos;u&apos; and status&gt;=0 12345678910# 获取所有字段名Select Name FROM SysColumns Where id=Object_Id(&apos;TableName&apos;)；或者select name from syscolumns where id =(select id from sysobjects where type = &apos;u&apos; and name= &apos;TableName&apos;) -----------------------------------------------------# 获取主键字段SELECT name FROM SysColumns WHERE id=Object_Id(&apos;表名&apos;) and colid=(select top 1 keyno from sysindexkeys where id=Object_Id(&apos;表名&apos;))；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SQL-Server_常用查询]]></title>
      <url>%2F2017%2F03%2F07%2FSQL-Server_%E6%9F%A5%E8%AF%A2%E6%95%B4%E7%90%86%2F</url>
      <content type="text"><![CDATA[SQL 逻辑流Select 语法 Select语句的From部分将所有数据源组装进一个结果集，然后由Select语句的剩余部分对结果集执行操作。 Where子句作用于From组装的记录集，根据条件筛选某些行。 聚合函数对数据集执行求和操作。 Group by 子句根据在该子句中指定的列将大量数据集分组成较小的数据集。 Having 对较小的数据组执行聚合函数。 Order by 子句确定结果子的排列顺序。默认为升序； 12345678Select [Distinct] [Top(n)] *, columns, or expressions [From data source(s)] [Join data source ON condition] (may include multiple joins) [Where conditions] [Group by columns] [Having conditions] [Order by columns]; 查询语句的逻辑流数据源(From) —— 条件(Where) —— 列/表达式 (col/exp) —— Order by — 谓词 From，查询首先组装初始数据集。 Where，筛选；筛选过程实际上是选择符合标准的行的where子句。 Group by，组合数据的子集 [若要分组，先对数据排序，然后根据排序后的数据进行聚合] 聚合，Aggregations，选择性地对数据进行聚合；如求平均值，按列中的值对数据分组以及筛选组； Having，筛选数据的子集 列表达式：处理Select列，并计算任何表达式 [ 这个时候才涉及到列 ] Order by，排序 Over，窗口函数和排名函数通过与其他聚合函数一起提供结果的单独排序的视图 Distinct，从结果集中删除任何重复的行 Top，选定行后，执行计算，并按所需的顺序排序 Insert,Update,Delete，最后一个逻辑步骤是将数据修改操作应用到查询结果。 Output，选择插入和删除的虚拟表，并返回给客户端 Union，堆叠或合并多个查询的结果 SQL编写标准 若需要多个表合成一个表，必须确定【唯一标识符】或者说是联接的表，从联接表中去寻找联接的字段 最后合并的中都必须要有这个字段 若出现多个主条件，先将主条件的区分变量统一到一个表中 其他表与这个表进行联接 先把各个字段单独用Select写出来 再合并为一个Select语句 运算符介绍优先级Not &gt; 算术运算符(+-) &gt; 条件运算符(where) &gt; And &gt; Or 电脑中字符优先级： 数字&gt;字母 1a &gt; a1 &gt; a11 &gt; aa1 通配符 运算符 含义 示例 % 任意长度的字符串 Email Like ‘%@%.com’ ‘_’ 任意一个字符 AuthorName Like ‘张_’ [ ] 在指定范围内的任意一个字符 A Like ‘A6C8[1-5]’ [^] 不在指定范围内的任意一个字符 A Like ‘A6C8[^1-6]’ 查找含通配符的表达式： 必须使用Like字符 把通配符放入方括号[ ] 内 在其之前放一个转义符 注意事项与通用规则方括号 [ ] why ：表名或字段名如果引用了sql server中的关键字，数据库会不识别这到底是关键字还是表名（还是字段名）时就必须要加； 查询语句的表中加上方括号[ ] ， 目的是以声明其不是保留字 ； 如果表名不是关键字，不用加方括号 12345# 一个表名叫user，user在sqlserver中属于关键字，那么查询的时候必须要这样select * from [user] ;# 若表名user中没有user的列，则无需加方括号select * from user ; 合并：字段+表格12345# 字段合并 +SELECT 机构+客户名称 FROM allzjb where 结算日期&gt;&apos;2015-11-15&apos;SELECT RTRIM(LastName) + &apos;,&apos; + SPACE(2) + LTRIM(FirstName) FROM Person.Person--剪裁姓氏，并将逗号、两个空格和 Person 中的 AdventureWorks2012 表列出的人员名字串联起来 使用“ + ”连接多个字段，合并成一列 前后类型应兼容； 如果+连接数值类型，结果是数值之和 如果+连接字符串类型，结果是字符串的连接 123456# 表格合并 - insert into A1 select ... INSERT INTO table2 SELECT * FROM table1; -- 把table1的数值插入到table2中# 只插入某一列的值INSERT INTO table2 (column_name) SELECT column_name FROM table1 ; 123# 合并为一个字符串 - concat()Select Concat(Null, &apos;Patrick &apos;, 1, &apos; LeBlacn&apos;)--隐式地将所有值转换为字符串，将空值转为空字符串 Where条件 最佳实践：找到事物的最好办法就是查找，而不是先排除不是该事物的所有东西。即where条件，声明肯定的限制条件优于否定的限制条件； 1where col &gt;= 10 ; 优于 where col !&lt; 9 惊叹号! ，不是ANSI标准的SQL； 布尔逻辑运算的优先次序： NOT &gt; AND &gt; OR 12345678910Where name Like &apos;Chain%&apos; or ProductID Between 320 And 324 And name Like &apos;%s%&apos; --1. 先执行And，即找出name中 带有 s 的名字；--2. 再在其中寻找 name中有Chain 或者 ProduceID在[320,324]------------------Where (name Like &apos;Chain%&apos; or ProductID Between 320 And 324 ) And name Like &apos;%s%&apos;--1. 先执行括号，即先找出name中有Chain 或者 ProduceID在[320,324]--2. 再在其中找出name中 带有 s 的名字； 不能在Where 子句中使用聚合函数。此时应用子查询来进行限定 先进行联合，再进行where条件的执行 123Select * From A Left Join B On A.name = B.name ----因为先进行联合，再进行where条件选择，若在表B中存在不满足where条件的观测值，最后不会被选中 Where B.col = &apos;x&apos; Between and12345678910111213# 使用带有日期时间值的 BETWEEN WHERE RateChangeDate BETWEEN &apos;2001-12-12&apos; AND &apos;2002-01-05&apos;; # 特别注意，若涉及到最小单位为小时的情况，则必须考虑多加一天；BETWEEN &apos;2001-12-12&apos; AND &apos;2002-01-05&apos;; 表示选择的范围为 2001-12-12 00:00:00 ~ 2002-01-05 00:00:00 ; 1月5日的 08:00:00是不包含在内的----上面的示例检索所在的行【datetime值】可以介于&apos;20011212&apos;和&apos;20020105&apos;(含） 之间;因为在查询中的日期值和datetime值存储在RateChangeDate而无需在日期的时间部分中指定了列。-- 下面是结果集：BusinessEntityID RateChangeDate3 2001-12-12 00:00:00.0004 2002-01-05 00:00:00.000----未指定时间部分时，将默认使用 12:00 A.M。 --请注意，若某行的时间部分晚于 2002-01-05 12:00 A.M.， 则由于它处于范围之外，因此此查询不返回该行。 ALL、SOME、ANY ALL，相当于And；如果子查询可能返回一个空值，那么使用ALL会判断为fasle，使用时要小心； 循环 一个if，一个命令的执行；并且没有Then和End来终止if命令； 123456789If condition Statement;----------------------------------If 1=0Print &apos;Line one&apos;;Print &apos;Line two&apos;;--结果返回Line two； if语句之后没有分号； if语句实际上是后面语句的提前； 使用Begin / End 有条件地执行多条语句 1234If condition Begin; Multipie Line; End; --每个都有分号 使用If Exists()作为基于存在性的条件 If Exists() 结构使用从SQL Select语句返回的每一行作为条件。 因为If Exists() 结构会查找每一行，所以Select语句应当选择所有的列。一旦一个单行满足了If Exists()，查询就会继续执行 12345If Exists (Select * From production.product Where quantity = 0) Begin; Print &apos;Relpenish Inventory&apos;; End; 使用If / Else 执行替换语句 可选的Else定义了if条件为False时的执行代码；Else可控制下一个单个命令，后者Begin/End块 1234If condition Single line or Begin/End block of code; Else Single line or Begin/End block of code; while,break,continue的使用 设置重复执行 SQL 语句或语句块的条件。只要指定的条件为真，就重复执行语句。可以使用 BREAK 和 CONTINUE 关键字在循环内部控制 WHILE 循环中语句的执行。 1234567891011121314151617181920212223242526272829303132333435363738while 当条件为ture时循环代码；----WHILE Boolean_expression &#123; sql_statement | statement_block &#125; --若有Select语句，必须用圆括号（） --若要定义语句块，请使用控制流关键字 BEGIN 和 END。 [ BREAK ] --导致从最内层的WHILE循环中退出。将执行出现在END关键字后面的任何语句，END 关键字为循环结束标记。 --如果嵌套了两个或多个 WHILE 循环，内层的 BREAK 将导致退出到下一个外层循环。首先运行内层循环结束之后的所有语句，然后下一个外层循环重新开始执行。 &#123; sql_statement | statement_block &#125; [ CONTINUE ] -- 使 WHILE 循环重新开始执行，忽略 CONTINUE 关键字后的任何语句。 -----------------------------------------------------------------------------A. 在嵌套的 IF...ELSE 和 WHILE 中使用 BREAK 和 CONTINUE 如果平均价格少于 $30，WHILE 循环就将价格加倍，然后选择最高价。如果最高价少于或等于 $50，WHILE 循环重新启动并再次将价格加倍。该循环不断地将价格加倍直到最高价格超过 $50，然后退出 WHILE 循环并打印一条消息。USE pubs GO while (select avg(price) from titles) &lt;$30 begin update titles set price=price*2 select max(price) from titles if(select max(price) from titles) &gt;$50break elsecontinueendprint &apos;too much for the marker to bear&apos; B. 在带有游标的过程中使用 WHILE declare @i int set @i=1 while @i&lt;30 begin insert into test (userid) values(@i) set @i=@i+1 end 插入、更新、删除、合并数据创建数据12345Create Table table.name(col_name1 [Int] Identity(1,1) Not Null, col_name2 datetime,Constraint PK_table.name_col_name1 Primary Key CLUSTERED (col_name1)) --IDENTITY [ (seed , increment) ] --在表中创建一个标识列。 --seed,第一行所用的值； increment,增量值 若要重新定义主键，则必须首先删除与现有主键之间的任何关系，然后才能创建新主键。 此时，将显示一条消息警告您：作为该过程的一部分，将自动删除现有关系。 12--创建新列ALTER TABLE dbo.doc_exa ADD column_b VARCHAR(20) NULL, column_c INT NULL ; 插入数据12345678910111213141516171819202122232425# 插入简单的值行Insert [Into] schema.table [ (colums, ...) ] Values (value,...), (value,...);# 在标识列中插入数据，要使用Set Identity_insert on / off关键字Set Identity_insert dbo.address On Insert Into dbo.address (AddreddID, Addressl, city, state, county) Valuse(999, )Set Identity_insert dbo.address Off------------------------------------------------------------------------------------# 从Select语句中插入结果集Insert [Into] schema.table [ (colums,...)] Select columns From data [Where conditions];--1. schema.table 必须存在--2. into schema.table中的列必须与之后Select中的列相同--3. 若schema.table中有5列，只选取其中3列插入，则其他2列的观测值对NULL------------------------------------------------------------------------------------# 从存储过程插入结果集Insert [Into] schema.table [ (colums,...)] Execute storedprocedure; – 123# 在插入数据时创建表Select colums Into newtable From data [where conditions]; SQL中合并列，只要选择对应的列即可 Select a.*, b.* From a Full Join b 更新数据1234567891011121314# 更新单个表Update schema.table Set column = expression, column = value [From data] [Where conditions];----------------------------------------------------------------------------------# 执行全局搜索与替代# replace(data, &apos;aaa&apos;, &apos;bbb&apos;)Update address Set county = Replace(county, &apos;sun&apos;, &apos;dark&apos;) -- 将county列中所有的sun替换为dark Where county Like &apos;%shine&apos; ; 删除数据12345678910111213141516# deleteDelete [From] schema.table /*[From data] SQL Server 特有的T-SQL扩展，用来进行联接；正常情况下应在where子句中创建子查询*/ [Where conditions];# 删除所有行Delete From schema.table--不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：---------------------------------------------------------------------------------# 删除表中所有行 - truncateTruncate Table dbo.address---------------------------------------------------------------------------------# 删除整个表Drop table schema.table truncate 、delete与drop区别 相同点 truncate和不带where子句的delete、以及drop都会删除表内的数据drop、truncate都是DDL语句(数据定义语言)，执行后会自动提交。Delete是DML语句(数据库操作语言) 不同点 truncate 和 delete 只删除数据不删除表的结构(定义)；drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index)；依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。 delete 语句是数据库操作语言(dml)，这个操作会放到 rollback segement 中，事务提交之后才生效；如果有相应的 trigger，执行的时候将被触发。truncate、drop 是数据库定义语言(ddl)，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。 delete 语句不影响表所占用的 extent，高水线(high watermark)保持原位置不动。drop 语句将表所占用的空间全部释放。truncate 语句缺省情况下见空间释放到 minextents个 extent，除非使用reuse storage；truncate 会将高水线复位(回到最开始)。 速度：drop&gt; truncate &gt; delete TRUNCATE TABLE在功能上与不带WHERE子句的DELETE语句相同：二者均删除表中的全部行。但TRUNCATE TABLE 比DELETE速度快，且使用的系统和事务日志资源少。DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。 安全性： 想保留表而将所有数据删除，如果和事务无关，用truncate即可。如果和事务有关,或者想触发trigger,还是用delete。 小心使用 drop 和 truncate，尤其没有备份的时候 使用上，想删除部分数据行用 delete，注意带上where子句. 回滚段要足够大 想删除表,当然用 drop 对于由FOREIGN KEY 约束引用的表，不能使用TRUNCATE TABLE，而应使用不带WHER 子句的DELETE语句。由于 TRUNCATE TABLE不记录在日志中，所以它不能激活触发器。 TRUNCATE TABLE不能用于参与了索引视图的表。 合并数据 Meger语句。使用 MERGE 语句在一条语句中执行插入、更新或删除操作。 有条件地在目标表中插入或更新行。 如果目标表中存在相应行，则更新一个或多个列；否则，会将数据插入新行。 同步两个表。根据与源数据的差别在目标表中插入、更新或删除行。 12345678910111213141516171819Meger flightpassengers As f -- MERGE 子句用于指定作为插入、更新或删除操作目标的表或视图 Using checkin as c --USING 子句用于指定要与目标联接的数据源 On c.lastname = f.lastname --ON 子句用于指定决定目标与源的匹配位置的联接条件 And c.firstname = f.firstname And c.flightcode = f.flightcode And c.flightdate = f.flightdate When Matched Then Update Set f.seat = c.seat When Not Matched By Target --当Soucre表与Target表（基准表）不匹配时，对Target表进行操作 Then Insert (Firsrname, Lastname, Flightcode, flightdate, seat) When Not Matched By Source --当Target表与Soucre表（基准表）不匹配时，对Target表进行操作【相同】 Then Delete;--WHEN 子句（WHEN MATCHED、WHEN NOT MATCHED BY TARGET 和 WHEN NOT MATCHED BY SOURCE）基于 ON 子句的结果和在 WHEN 子句中指定的任何其他搜索条件指定所要采取的操作。--OUTPUT 子句针对插入、更新或删除的目标中的每一行返回一行。--必须由分号进行终止--必须是一对一匹配；一对多匹配是不允许的--联接条件必须是确定性的，也就是可重复的 返回修改后的数据 Output子句可以访问插入的和删除的虚拟表，以及任何在From自引用的数据源来选择要返回的数据。 Output子句有一个较为高级的应用，可以把输出数据传输到外查询。 1234567891011121314151617181920212223242526272829303132333435363738# 从插入返回数据Insert Into personlist Output Inserted.* -- Inserted. Valuse(7777, &apos;Jane&apos;, &apos;Doe&apos;);# 从更新返回数据 -- 可同时返回更新前、更新后的数据Update personlist Set firstname = &apos;Jane&apos;, Lastname = &quot;Doe&quot; Output Deleted.firstname oldfirstname, Deleted.lastname oldflastname, --Deleted.column oldcolumn Inserted.firstname newfirstname, Inserted.lastname newlastname Where businessentityID = 7777# 从删除返回数据Delete From personlist Output Deleted.* Where ...# 从合并返回数据... Output deleted.column, deleted.column, $action, -- 显示数据库操作的行为（为Insert、Delete、Update) inserted.column, inserted.column ;# 把数据库返回到表中Declare @Deletedperson Table( businessentityID Int Not Null Primary Key, lastname Varchar(50) Not Null, firstname Varchar(50) Not Null)Delete dbo.personlist Output Deleted.colunm, Deleted.column Into @Deletedperson Where bussinessentityID = 2; 1. 查询：字符串 函数名 功能描述 举例 LEN 返回指定字符串的字符个数(而不是字节)，其中不包含尾随空格 SELECT LEN(‘李丽然作者’) 返回:5 DATALENGTH 返回指定字符串的字节数 SELECT DATALENGTH(‘中国人’) 返回：6 UPPER 将小写字符转换成大写字符 SELECT UPPER(‘book图书表’) 返回:BOOK图书表 LTRIM 返回去掉左侧空格的字符串 SELECT LTRIM(‘ Authors’) 返回: Authors CHARINDEX 查找一个指定的字符串在另一个字符串中的起始位置 SELECT CHARINDEX(‘L’, ‘HELLO’, 1) 返回:3 LEFT 返回字符串中从左边开指定个数的字符 SELECT LEFT(‘zhangsan’, 2) 返回:zh Substring 返回字符串的一部分：从字符串串的起始位置连续取指定个数的子串 SELECT SUBSTRING(‘我爱我的家乡’,3, 2) 返回：我的 Replace 替换一个字符串中的字符 SELECT REPLACE(‘我爱我的家乡家乡’, ‘家乡’, ‘学校’) 返回: 我爱我的学校学校 Stuff 将一个字符中删除指定数量的字符，并插入另一个字符 Concat 将多个字符串组合为单个字符串 使用字符串字面量时，通过输入两个单引号转化为一个单引号 Replace(name, ‘’’’, ‘’) ; Life’’s Great! 被解释为 Life’s Great! 行数&amp;字符数12345678# 返回观测值的行数 - count [非空值的个数]SELECT COUNT(name) FROM my_contacts;# 返回字符串的字符个数 - lenSELECT LEN(&apos;中国人&apos;) ; # 返回:3# 返回字符串的字节数 - datalengthSELECT DATALENGTH(&apos;中国人&apos;); # 返回：6 去空格12# 去空格 - ltrim / rtrimselect ltrim(rtrim(&apos; &quot;左右都没有空格&quot; &apos;)); # 左右去空格 12345# 生成空格 - spaceselect space(2); # 生成2个空格SELECT RTRIM(LastName) + &apos;,&apos; + SPACE(2) + LTRIM(FirstName) FROM Person.Person# 剪裁姓氏，并将逗号、两个空格和 Person 中的 AdventureWorks2012 表列出的人员名字串联起来 取子串12345# 取子串：特定位置 - substringselect substring(name,1,2); # 返回na;# 取子串：左/右 - left /rightselect left(ltrim( name), 3); # 返回nam; 返回特定位置1234567# 返回位置：起始位置 - charindexselect charindex(&apos;L&apos;, &apos;HELLO&apos;, 1); # 返回:3; 1表示第一次出现--charindex(serach string, string ,starting position) ；第三个参数默认为1，可不写# 返回位置：表达式中某模式第一次出现的起始位置 - patindexpatindex(&apos;%123%&apos;,&apos;abc123def&apos;); # 返回4--允许通配符的使用 替换1234567891011# 替换 - replaceselect replace(&apos;abcdef&apos;,&apos;cde&apos;,&apos;xxx&apos;); 返回 abxxxfUpdate address Set country = replace(County, &apos;sun&apos;, &apos;dark&apos;) --colname列中每个单元格的aaa值替换为bbb值，并返回colname列# 删除&amp;替换 - stuff()Select stuff(&apos;abcdef&apos;, 3, 2, &apos;123&apos;) -- 返回ab123ef；从第三个位置开始删除2个字符，并插入123--stuff(string, insertion position, delete count, string inserted); 合并123# 合并为一个字符串 - concat()Select Concat(Null, &apos;Patrick &apos;, 1, &apos; LeBlacn&apos;)--隐式地将所有值转换为字符串，将空值转为空字符串 格式转换123456789101112131415# 转换：大小写 - upper/lowerselect upper(&apos;abc&apos;); # 返回 ABC# 转换：反转 - reverseselect reverse(&apos;abc&apos;); # 返回&apos;cba&apos;# 转换：字符形式 - charselect char(213);# 转换：字符串形式 - strselect str(123.45, 6,1); # 把数值转换成字符串格式--返回123.5； 将123.45转为6个位置的字符串，数字的小数部分舍入为1为小数；# 转换：ascii码 - asciiselect ascii(123) as &apos;123&apos; 1234567891011121314151617# 格式的转换、显示 - convert : 将第2个参数转换为第1个参数所指定的类型 / 用不同的格式显示日期/时间数据。-- CONVERT (data_type[(length)], expression [, style]) ;-- [,style] 日期格式样式SELECT CONVERT(DateTime, &apos;2020-09-09&apos;); # 返回: 2020-09-09 00:00:00.000SELECT CONVERT(varchar(5), 92.89); # 返回：92.89SELECT CONVERT(varchar(11), GETDATE(), 121); # 返回：2010-03-24常用日期格式： - 23 ：日期格式 yy-mm-dd - 111：日期格式 yy/mm/dd - 120：日期格式 yyyy-mm-dd hh:mi:ss(24h) - 121：日期格式 yyyy-mm-dd hh:mi:ss.mmm(24h) - 105：日期格式 dd-mm-yy - 110：日期格式 mm-dd-yy Data_type : INT / DECIMAL(10,2) / CHAR() / VARCHAR() / 2. 查询：数字相关 函数名 功能描述 举例 ABS 返回表达式绝对值 SELECT ABS(-90) 返回：90 ROUND 按指定的精度进行四舍五入 SELECT ROUND(56.629, 2) 返回：56.630 SQRT 返回指定表达式的平方根 SELECT SQRT(9) 返回：3 FLOOR 返回小于或等于指定数值表达式的最大整数 $\le$ SELECT FLOOR(23.9) 返回: 23 CEILING 返回大于或等于指定数值表达式的最小整数 $\ge$ SELECT CEILING(23.9) 返回：24 POWER 次方；返回x的y次方 SELECT POWER(2,3) ; 返回8 EXP 指数；e的x次方 SELECT EXP(2) 返回e$^2$ LN /LOG(x,y) 对数； SELECT LN(e) ；返回1 MOD 返回x除以y的余数 SELECT MOD(9,2); 返回1 SIGN 判断正负；若x为正返回1；若x为负 返回-1 ; 若x为0 返回0 SELECT SIGN(2); 返回1 3. 查询：聚合函数 聚合是在对From和Where子句筛选后的数据集进行聚合计算；即运营逻辑是在其之后执行 聚合函数，它的对象是多个观测值，但只返回一个值；若要出现多个观测值的聚合值，需要用到Group by 函数 一旦查询包含了聚合函数，那么每一列必须参与到聚合函数中。 SELECT语句中除聚合函数外，所有列应写在Group By语句后面。否则将出现错误 函数名 功能描述 AVG 平均值 SUM 求和 MAX/MIN 求最大值/最小值 COUNT 计算非空单元格（ 返回 int 数据类型值） count_big 计算非空单元格（返回 bigint 数据类型值） VAR 方差 # 平方 varp 总体方差 STDEV 标准差 stdevp 总体标准差 除Count(*)外，所有聚合函数均忽略空值NULL； avg( ) $\ge$ $sum( ) \over count(*)$ Count(*)，计数时也将NULL计入；Count(Null) 返回0；所有与NULL的计算，都返NULL 其他所有聚合函数，包括Count(col_name)的形式，计算时均已排除了NULL 表a，观测值10行，其中2个NULL；Count(*) # 返回10； Count(列名) # 返回8 除非，可用 isnull() 函数进行转换，来计算； 例如，对表a求平均值，若直接用avg() ，其分母为8； 若想使得其分母变成10，应添加 case when isnull(col_name,0) then col_name else end 4. 查询：日期相关 函数名 描述 Getdate 返回当前服务器的日期和时间 Current_timestamp 除了ANSI标准，等同于Getdate Getutcdate 返回当前服务器的日期和时间，并转化为格林威治标准时间 Sysdatetime 返回当前服务器的日期和时间 Sysutcdatetime 返回当前服务器日期，并转化为格林威治标准时间 Sysdatetimeoffset 返回Datetimeoffset值 日期处理函数 函数名 描述 Dateadd 在指定的日期上累加数值得到新的日期；dateadd(datepart,number,date) SELECT DATEADD(yyyy, 4, ‘01/09/2003’) 返回：2007-01-09 datepar是参数的格式：datepart=yy(年)，mm(月)，qq(季度)；date 参数是合法的日期表达式。number 是您希望添加的间隔数；对于未来的时间，此数是正数，对于过去的时间，此数是负数。 DATEDIFF 返回两个日期的差值 ； datediff(datepart,startdate,endate) SELECT DATEDIFF(dd, ‘02/05/2003’, ‘02/09/2005’) 返回：735 DATEPART 返回指定日期部分的整数（整数形式） SELECT DATEPART(dd, ‘01/09/2003’) 返回：9 DATENAME 返回指定日期部分的字符串（字符串形式）；工作日(dw)、周(wk)、日(dd)、月(mm) SELECT DATENAME(dw, ‘02/02/2009’) 返回: 星期一 Eomonth 返回针对指定开始日期的月份的最后一天 YEAR 返回指定日期“年”部分整数 SELECT YEAR(GETDATE()) 返回：当前年份整数 MONTH 返回指定日期“月”部分整数 SELECT MONTH(GETDATE()) 返回：当前月份整数 DAY 返回指定日期“日”部分整数 SELECT DAY(GETDATE()) 返回：当前日期整数 查询：日期的应用1234567891011121314151617181920212223242526272829# 获取当前时间 - getdateselect getdate();# 返回指定的时间 - dateaddselect dateadd(mm, -1, &apos;2017-03-31&apos;); ----返回 2017-02-31 # datepart：yy/qq/mm/ww/dd/hh/mi/ss/ms ; # num为正或为负；--dateadd()仅接受提取日期部分# 计算两个时间差 - datediffselect datediff(dd,&apos;2016-06-01&apos;, &apos;2017-01-31&apos;); # yy/qq/mm/ww/dd/hh/mi/ss/ms--datediff(date_type,startdate , enddate)# 取出时间的某一部分 - datename/datepart --只能取出 年 或者 月 或者 日 select datename(dd, &apos;2017-01-31&apos;); # datename 字符串形式select datepart(dd, &apos;2017-01-31&apos;); # datepart 整数形式Select Convert(varchar(),,120) ---- 可以取出前面的所有部分--返回上一个月 Select Convert(varchar(7), dateadd(mm,-1,getdate()),120)# 获取日期的年份/季度/月度/日期等 select year(getdate()); quarter/month/day# 返回针对指定开始日期的月份的最后一天 - EomonthSelect Eomonth(&apos;2016-02-32&apos;,1) # 返回 2016-03-31Select EOmonth(getdate(),-1)--Eomonth(start_date, month_to_add) 参考：日期缩写参考 datediff / datename / datepart /dateadd 日期部分 缩写 year yy, yyyy quarter qq, q month mm, m dayofyear dy, y # 查询date在当年是第多少天. 一年中的第几天； day dd, d week wk, ww # 查询date在当年中是第几周 / 以周为单位的间隔数 weekday dw # 一周中的第几天(星期几) Hour hh minute mi, n second ss, s millisecond ms convert - style的参考值 一位或两位数字样式提供两位数的年份；3位数字样式提供4位数字的年份； 代码 Style 格式 100 或者 0 mon dd yyyy hh:miAM （或者 PM） 101 mm/dd/yy 102 yy.mm.dd 103 dd/mm/yy 104 dd.mm.yy 105 dd-mm-yy 106 dd mon yy 107 Mon dd, yy 108 hh:mm:ss 109 或者 9 mon dd yyyy hh:mi:ss:mmmAM（或者 PM） 110 mm-dd-yy 111 yy/mm/dd 112 yymmdd 113 或者 13 dd mon yyyy hh:mm:ss:mmm(24h) 114 hh:mi:ss:mmm(24h) 120 或者 20 yyyy-mm-dd hh:mi:ss(24h) 121 或者 21 yyyy-mm-dd hh:mi:ss.mmm(24h) 126 yyyy-mm-ddThh:mm:ss.mmm（没有空格） 130 dd mon yyyy hh:mi:ss:mmmAM 5. 查询：表格相关限定行数 - TOP123456# TOP n( 前n行 )SELECT TOP 5 * FROM allzjb; # 查询所有数据的中前5个------------------------TOP n PERCENT ( 按百分比取数据 )SELECT Top 30 PERCENT * FROM allzjb ; With Ties 允许最后的位置包含多行，但这多行是完全相同的 1Select top (10) With Ties listprice From ... 随机行选择 使用Top(1) 返回单行，且用Newid()随机排序结果；每次将返回一个随机值 涉及到较大的表时，可用Tablesample( n Percent/Rows)选项 由于是随机选择，可通过Repeatable()来指定 [效果同R语言中的set.seed()] 123Select top(1) Lastname From person.person Tablesample(10 Percent) -- 随机选择10%的 Repeatable(1234) Order by Newid(); --随机排序结果集 分组&amp;排序分组 Group by 会根据某一列的值将数据集自动分成子集。 对分组集来说，汇总行是每个子集中的每个唯一值组成的行 数据集被分成子组之后，聚合函数在每一个子组上执行。 对于Group by子句，空值NULL被认为是相等的，并被分组到单个结果行 Group by不局限于对列分组，也可以对表达式执行分组（但该表达式必须与Select中的相同） 分组后筛选HAVING what ：指定组或聚合的搜索条件；HAVING 通常在 GROUP BY 子句中使用，对Group by 之后的表单进行条件筛选；但针对的是所有group by 的字段，而非第一个 1234Select 交易账号,建平仓,[交易间隔(s)] From #b11 where [交易间隔(s)] &lt; &apos;60&apos; group by 交易账号,建平仓,[交易间隔(s)] having count([交易间隔(s)]) &gt;= 2 --指的是对满足所有group by字段的观测值进行计数统计；因为每个观测值都已经按照分组划分为不完全相同的观测值（每行中必定有一个不相等），所以结果为0 如果不使用 GROUP BY 子句，则 HAVING 的行为与 WHERE 子句一样。 123456--HAVING 子句从 SalesOrderID 表中检索超过 SalesOrderDetail 的每个 $100000.00 的总计SELECT SalesOrderID, SUM(LineTotal) AS SubTotal FROM Sales.SalesOrderDetail GROUP BY SalesOrderID HAVING SUM(LineTotal) &gt; 100000.00 ORDER BY SalesOrderID ; 排序 Select 指定的每一列都应该出现在Group By子句中，除非对这一列使用了聚合函数； 排序：Order by 可以使用表达式来指定顺序 可以使用列别名指定顺序 可以使用列的顺序位置来进行排序 1234567# 按某个组分组并排序group by nameorder by name;---------------------------------GROUP BY nameORDER BY first_name, last_name DESC, SUM(age); # 默认为升序排序（ASC） 窗口函数 - Select Over()聚合子句1234567891011Sum(cola) Over(partition by col1 order by col2)--其他聚合函数：avg/max/min /count # 根据分组求和Over(Partition by col) --根据col1的分组对cola进行求和； [若同一组别有多个维度，则求和的值是相同的]# 根据排名求累计和Over(Order by col2)--根据col2的顺序对cola列累计求和； [若同一组有多个维度，求和的值是累加的]# 根据分组后的排名，求累积和Over(Partition by col1 order by col2) --根据Col1的分组进行排名得出Col2的次序，并按col2的次序对cola进行分组求和 12# 移动平均CONVERT(varchar(20),AVG(SalesYTD) OVER (ORDER BY DATEPART(yy,ModifiedDate)),1) AS MovingAvg 在窗口内分区：Partition by 执行逻辑：先对查询结果进行排序，之后通过Partition by的列进行分区； 窗口函数只能在Select 或者 Group by 子句中 排名 - rank子句12345678910111213141516171819202122232425262728# 排名：无重复排名 - Row_number（组内连续的唯一的)row_number() over (order by col2); # 对所有进行排名row_number() over (partition by col1 order by col2); # 根据COL1分组，在分组内部根据 COL2排序-------------------------------------------------# 排名：有重复排名 - Rank （若出现字段值相同，序号一样，下一个跳过1位[排名是非连续的]）rank() over([partion by col1] order by col2); 对所有进行排名ProductID Name LocationID Quantity Rank 494 Paint - Silver 3 49 1 495 Paint - Blue 3 49 1 493 Paint - Red 3 41 3 -------------------------------------------------# 排名：有重复排名 - Dense_rank （若出现字段值相同，序号一样，后一个不跳过[排名是连续的]）dense_rank() over([partion by col1] order by col2)ProductID Name LocationID Quantity Rank 494 Paint - Silver 3 49 1 495 Paint - Blue 3 49 1 493 Paint - Red 3 41 2 -------------------------------------------------# 排名：对序号进行分组处理 - Ntilentile (4) over ([partion by col1] order by col2); # (4)表示分为4组 ntile函数的分组依据（约定）： 首先系统会去检查能不能对所有满足条件的记录进行平均分组，若能则直接平均分配就完成分组了；若不能，则会先分出一个组，这个组分多少条记录呢？就是 （总记录数/总组数）+1 条，之所以分配 （总记录数/总组数）+1 条是因为当不能进行平均分组时，总记录数%总组数肯定是有余的，又因为分组约定1，所以先分出去的组需要+1条。 分完之后系统会继续去比较余下的记录数和未分配的组数能不能进行平均分配，若能，则平均分配余下的记录；若不能，则再分出去一组，这个组的记录数也是（总记录数/总组数）+1条。 举个例子，将53条记录分配成5组，53%5 = 3不能平均分配，则将余数3平均分配到前3组 （余数 = 分配的组数），然后比较余下的 53-(11*3)=20 条记录能否平均分配给未分配的2组，能平均分配，则剩下的2组，每组各20/2=10 条记录，分配完成，分配结果为：11，11，11，10，10。 分页12345# Offset &amp; Fetch 必须结合使用Select ... From Order by Offset n rows # 表示跳过n行 Fetch Next 20 rows only # 表示返回之后的20行 条件查询 case when 最大的优点是可以与Select语句“内联” 若else缺失，表示其他值返回NULL Case函数只返回第一个符合条件的值，剩下的Case部分将会被自动忽略； 所以，如果根据金额大小来判定等级，必须要最高的金额写在最前面； 1234567891011121314151617 ## 两者区别1. 输入表达式，只能用于等同性(=)检查2. 布尔表达式，不局限于等同行(=)检查--用输入表达式，将与每个where子句中的值比较Case &lt;input expression&gt; --只能用于等同性检查，而不进行其他比较 when &lt;when exp&gt; then &lt;result exp&gt; [n...] [else &lt;result exp&gt;]End--给每个when子句提供一个布尔表达式，求值为TRUE或FALSE [布尔值是“真” True 或“假” False 中的一个] Case when &lt;Boolean exp&gt; then &lt;result exp&gt; [n...] [else &lt;result exp&gt;]End – 12345678910111213141516171819202122232425262728293031323334353637383940414243## 1.简单Case语句# 在SELECT语句中，CASE 简单表达式只能用于等同性检查，而不进行其他比较SELECT ProductNumber, Category = CASE ProductLine --表示如果 ProductLine = R 则返回 Road； Case之后的变量，为比较的变量 WHEN &apos;R&apos; THEN &apos;Road&apos; WHEN &apos;M&apos; THEN &apos;Mountain&apos; WHEN &apos;T&apos; THEN &apos;Touring&apos; WHEN &apos;S&apos; THEN &apos;Other sale items&apos; ELSE &apos;Not for sale&apos; END, Name FROM Production.Product ； --Select top 10 SalesOrderID % 10 As &apos;OrderLastDigit&apos;,ProductID % 10 As &apos;ProductLastDigit&apos;,&quot;How Colse ?&quot; = CASE SalesOrderID % 10 WHEN ProductID % 1 THEN &apos;Exact Match&apos; -- 可在When子句中引用第二个列来做判断 WHEN ProductID % 1-1 THEN &apos;Within 1&apos; WHEN ProductID % 1+1 THEN &apos;Within 1&apos; ELSE &apos;More Than One Apart&apos; END FROM Sales.SalesOrderDetail ；-- % 表示返回余数； 5%2 返回1-- 变量名在Case之前使用双引号（“”）说明，该变量是新创建的变量;但不建议如此；------------------------------------------------------## 2. 搜索Case语句-- 没有输入表达式（即Case关键字与第一个When之间的部分）-- When表达式必须求值为一个 布尔值；（Case简单语句中，When的表达式可以为1、3、Price+1[含运算]）Select top 10 SalesOrderID % 10 As &apos;OrderLastDigit&apos;,ProductID % 10 As &apos;ProductLastDigit&apos;,&quot;How Colse ?&quot; = CASE -- 没有输入表达式 WHEN (SalesOrderID % 10) &lt; 3 THEN &apos;Ends With Less Than Threes&apos; WHEN ProductID =6 THEN &apos;ProductID is 6&apos; -- 可在When子句中引用第二个列来做判断 WHEN ABS(SalesOrderID % 10 - ProductID) &lt;= 1 THEN &apos;Within 1&apos; ELSE &apos;More Than One Apart&apos; END FROM Sales.SalesOrderDetail ；# Case函数只返回第一个符合条件的值，剩下的Case部分将会被自动忽略# 可在条件表达式中混合搭配的字段# 可执行为任何表达式，只要最后的结果为布尔值 搭配其他函数用法 12345678910111213141516171819202122232425262728293031323334353637383940# SELECT CASE WHEN 用法select userID , count(CASE WHEN letterType=&apos;干部介绍信&apos; then &apos;1&apos; end)干部介绍信数, count(CASE WHEN letterType=&apos;转递档案通知单&apos; then &apos;1&apos; end)转递档案通知单数 from T_LettersRecord GROUP BY userID ------------------------------------------------------# WHERE CASE WHEN 用法SELECT l.letterType, u.realName FROM T_LettersRecord as l, T_User as u WHERE (CASE WHEN l.letterType = &apos;干部介绍信&apos; AND u.userID = &apos;1&apos; THEN 1 WHENl.letterType = &apos;干部介绍信&apos; AND u.userID &lt;&gt; &apos;1&apos; THEN 1 ELSE 0 END) = 1 ------------------------------------------------------# 在 ORDER BY 子句中使用 CASE --计算 SalariedFlag 表中 HumanResources.Employee 列的值。SalariedFlag 设置为 1 的员工将按 BusinessEntityID 以降序顺序返回。 SalariedFlag 设置为 0 的员工将按 BusinessEntityID 以升序顺序返回SELECT BusinessEntityID, SalariedFlag FROM HumanResources.Employee ORDER BY CASE SalariedFlag WHEN 1 THEN BusinessEntityID END DESC ,CASE WHEN SalariedFlag = 0 THEN BusinessEntityID END;------------------------------------------------------# GROUP BY CASE WHEN 用法SELECT CASE WHEN salary &lt;= 3000 THEN &apos;T1&apos; WHEN salary &gt; 3000 AND salary &lt;=8000 THEN&apos;T2&apos; WHEN salary &gt; 8000 AND salary &lt;=12000 THEN&apos;T3&apos; WHEN salary &gt; 12000 AND salary &lt;= 20000 THEN &apos;T4&apos; ELSE NULL END 级别名称, -- 别名命名 COUNT(*) FROM t_userSalary GROUP BY CASE WHEN salary &lt;= 3000 THEN &apos;T1&apos; WHEN salary &gt; 3000 AND salary &lt;=8000 THEN&apos;T2&apos; WHEN salary &gt; 8000 AND salary &lt;=12000 THEN&apos;T3&apos; WHEN salary &gt; 12000 AND salary &lt;= 20000 THEN &apos;T4&apos; ELSE NULL END; 联接与联合 what：将两个数据集相乘，并对结果进行限制。这样只返回两个数据集的交集。 why ：横向合并两个数据集，并通过匹配一个数据源的行与另一个数据源的行，从组合中产生新的数据集。 当涉及多个联接时 一定要用较小规模的数据对查询进行单元测试； 并坚持使用左外联接 关于 “A LEFT JOIN B ON 条件表达式” 的一点提醒 ON 条件（“A LEFT JOIN B ON 条件表达式”中的ON）用来决定如何从 B 表中检索数据行。 如果 B 表中没有任何一行数据匹配 ON 的条件,将会额外生成一行所有列为 NULL 的数据 在匹配阶段 WHERE 子句的条件都不会被使用。仅在匹配阶段完成以后，WHERE 子句条件才会被使用。它将从匹配阶段产生的数据中检索过滤。 内联接Inner Join 在连接条件中使用等于号（=）运算符，其查询结果中列出被连接表中的所有列，包括其中的重复列。 在连接条件中使用除等于号之外运算符（&gt;、&lt;、&lt;&gt;、&gt;=、&lt;=、!&gt;和!&lt;） 多个数据源的联接（顺序并不重要） 所要获得字段的表要写在最前面；即From之后； 可实现A联接B，B联接C，C联接D； 12345Select cst.companyname, prod.name From Customre As a Inner join salesorderhead As b On a.customerid = b.customerid Inner join salesorderdetail As c On b.salesorderid = c.salesorderid Inner join product As d On c.productid = d.productid SQL内在处理逻辑：(按照排列顺序进行联接) 先扫描a Inner Join 表a 和 表b 然后将 a和b 联合表单 与表c Inner Join 最后将上面联合表 与 表d Inner Join ​ 外联接 what：以一个表为基准表，进行联接； 若使用外联接，顺序非常重要 how ：无论是否匹配，外联接都包含所有数据 外联接中的条件设置（执行逻辑） 当条件位于Join子句中，先包括外表的所有行，然后用条件包括第二个表中的行 当条件位于Where子句中，先执行联接，然后将条件应用于联接行 123456789101112131415 # 条件位于Join子句 Select a.col, b.col From table As a Left join table2 As b On a.id = b.id And a.Lastname = &apos;Adams&apos; --该条件限制的是第二个表中的行 [And a.Lastname = b.name] --也可以再进行限制------------------------------------------# 条件位于Where子句中Select a.col, b.col From table As a Left join table2 As b On a.id = b.id Where a.Lastname = &apos;Adams&apos; --该where条件是对联接后的表进行限制 Left [Outer] Join 返回左表中的所有行，如果左表中行在右表中没有匹配行，则结果中右表中的列返回空值。 必须要表基准表放在左侧，非常重要！否则会产生大量NULL值。 Right [Outer] Join 恰与左连接相反，返回右表中的所有行，如果右表中行在左表中没有匹配行，则结果中左表中的列返回空值。 建议左/右外联接不要混合使用 Full [Outer] Join 返回左表和右表中的所有行。即返回两个数据集的所有数据。当某行在另一表中没有匹配行，则另一表中的列返回空值 交叉联接Cross Join 不带WHERE条件子句，它将会返回被连接的两个表的笛卡尔积，返回结果的行数等于两个表行数的乘积 （例如：T_student和T_class，返回4*4=16条记录） 如果带where，返回或显示的是匹配的行数。 差集查询 what：分析两个数据集之间相关性的查询； why ：用于查找不存在或不匹配的数据 how ：一般需分两步来执行 联接 设置第二个数据集的主键为NULL 12345678910111213141516# 左差集查询--不在右表中的左表数据集；【可用Inner Join 中不等号为条件进行联接 &lt;&gt;】Select c.customerid, so.ordernumber From customer As c Left join salesorder As so On c.customerid = so.customerid Where so.ordernumer Is Null; --设置第二个表的主键为NULL# 全差集查询Select c.customerid, so.ordernumber From customer As c Left join salesorder As so On c.customerid = so.customerid Where so.customerid Is Null or c.customerid Is Null --设置两个表的的主键为NULL 联合 - Union 返回每个结果集中的所有行 Union ，表示删除重复行 Union ALL ，表示不考虑是否存在重复行 每个Select必须具有相同的数量、类型； 列名或别名由第一个Select确定 Order by子句放在最后，并且对所有结果进行排序，且列名必须是第一个Select语句中存在的 可用Select Into，但Into必须放在第一个Select语句中 列的xml数据类型必须为等效。 所有的列必须类型化为 XML 架构或是非类型化的。 如果要类型化，这些列必须类型化为相同的 XML 架构集合。 子查询非相关子查询 what：子查询是独立运作的； how ：运行逻辑 非相关子查询被执行一次 结果传输到外查询 外查询被执行一次 1Select (Select 3) As subqueryvalue; ​ 公用表表达式- CTE what：CTE (Comman Table Expression ) why ：确定查询结果可当做临时视图来使用；即后续的查询可以引用公共表表达式中的表及字段； how ：CTE使用With子句，而With子句定义了CTE；在With子句内分别是名称、别名、AS、括号、Select查询语句 CTE自身只是一个不完整的SQL语句 一旦With子句中定义了CTE，查询的主要部分就可以使用其名称引用CTE；就像CTE是其他任何表源一样； 若将多个CTE包含在相同的查询中，在主查询之前确定CTE的顺序，并用逗号分隔；并且后面的CTE可以引用在它之前定义的任何CTE CTE不能嵌套 123456789101112# With子句的表达式格式With CTEname [Col Aliases] As (Select ...From ... )------------------------------------------------------With CTEname1 (col names) As (Select) , Ctename2 (col names) As (Select)Select ... From CTEname1 Inner join CTEname2 On 相关子查询 what：先执行外查询，相关子查询的运行要引用外查询中的列 why ：对于复杂的Where条件来说很有用 how ：执行逻辑 先执行一次外查询 在外查询中对每一行执行一次子查询，把外查询中的值取代为子查询的每一次执行 子查询的结果要整合到结果集中 子查询可出现在Select子句中，也可以出现在Where 子句中； 判断是否为相关子查询的标准为是否引用了外查询中的列； 没有引用外查询中的列，为非相关子查询；先于外查询运行 引用了外查询中的列，为相关子查询，后于外查询运行 ​ 数据清洗去重复值12--Distinct # 去除完全重复的值SELECT DISTINCT 机构 FROM allzjb ; 1234567--Row_number() over(partation by col1 order by col2) 某个字段有重复值--【先根据某相同字段分组，根据其他字段排序，创建临时表；在提取排序=1的信息】# 对于相同的交易账号，取激活时间最前面的那一个账户的相关信息；Select *, Row_number() Over(partition by 交易账号 order by 激活时间) as 排序 Into #11 From exchange.ytx.ext_激活客户归属表; Select * Into #2 From #11 where 排序 = &apos;1&apos;; NULL what：空值NULL表示不存在的值，是一个未知值；并不表示0； how ：包含空值的任何表达式结果均是一个未知值 Null + 1 = Null 聚合函数中SUM( ) 与AVG( ) 会自动排除NULL进行计算； Count( * ) 会计算空值；但Count( col )会排除空值 123456# 测试空值 - IS NULLSELECT * FROM allzjb where 机构 is null ;-------------------------------------------------------# ISNULL 将NULL替换为某个值SELECT AVG(ISNULL(Weight, 50)) FROM Production.Product; # 将Weight中的NULL替换为50 – 12345678910111213## 处理空值 # Isnull() --将NULL替换为某个值Select Isnull(col, 0) -- 对col列进行搜索，并将空值NULL转换为0；也可以是其他任意值/字符串--isnull(soucre_expression, prlacement_value) # isnull是T-SQL特有的函数-----------------------------------------------------------------------------# Coalesce()Select Coalesce(Null, Null+1, 1+2, &quot;abc&quot;) 返回3--Coalesce(expression, expression,... ) # 接受一系列表达式或列，返回第一个非空值-----------------------------------------------------------------------------# Nullif() NULL ：未定义的值 / 不存在NA ：缺失数据NaN ：无意义的数，比如sqrt(-2)， 0/0。Inf ：正无穷大-Inf ：负无穷大 表是否存在123456789101112# SQL SERVER中查询某个表或某个索引是否存在IF OBJECT_ID(N&apos;表名称&apos;, N&apos;U&apos;) IS NOT NULL DROP TABLE 表名称;--注意，普通表和临时表的使用差别：--若希望删除TEST库中的dbo.TestTable表，直接将dbo.TestTable作为表名即可。--若希望删除临时表dbo.#temp_table，需要以tempdb.dbo.#temp_table作为表名。# 查询表上的某个索引是否存在SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(@tname, N&apos;U&apos;) and NAME=@iname其中：@tname表示建索引的表名，@iname表示索引名。 在每一个数据库中都有sys.sysobjects用于包括在数据库中创建的每个对象（例如约束、默认值、日志、规则以及存储过程）。详细的说明信息参看MSDN上的帮助文档：sys.sysobjects OBJECT_ID的作用是返回架构范围内对象的数据库对象标识号。如果找不到数据库或对象的名称，例如相应名称不存在或拼写不正确，则会返回NULL。 sys.indexes用于保存每个表格对象（例如，表、视图或表值函数）的索引或堆，详细的说明信息参看MSDN上的帮助文档：sys.indexes 数据运算两行观测值相减123456# 根据某个字段先排序进行编号，创建为#a1；复制为另一个表#a2；通过联合，使得联合的条件为 #a1.rank+1 = #a2.rankSelect *, order by 成交时间 as rank into #a1 From [exchange].[YTX].[v_allcj] as cj;Select * into #a2 From #a1;Select a1.*, datediff(ss,#a1.成交时间,#a2.成交时间) s [交易间隔(s)] From #a1 Left join #a2 On #a1.rank = #a2.rank +1 12345678910111213# 根据某个字段【分组】后排序编号；再通过唯一列联接，再设置条件 a.rank+1=b.rank 进行相减 【理论上应该是 a.rank=b.rank+1】--若a.rank=b.rank+1, 表示a表的rank=1 与b表的rank=2比较； --若a.rank+1=b.rank,表示a表的rank=1 变更为rank=2 与表b进行比较Select *, Row_number() over(partition by 交易账号 order by 成交时间) as [rank] into #a1 From [exchange].[YTX].[v_allcj] as cj;Select * into #a2 From #a1;Select #a1.*, datediff(ss,#a1.成交时间,#a2.成交时间) as [交易间隔(s)] From #a1 Left join #a2 On #a1.交易账号 = #a2.交易账号 where #a1.rank+1 = #a2.rank and datediff(ss,#a1.成交时间,#a2.成交时间) &lt; &apos;60&apos; 已知交易日计算差值123456# 已知交易日，计算未交易的交易日间隔；Select Max(结算日期) As 最后交易日期 FromSelect Count(1) From -----------计数 Inner Join b On 最后交易日 &lt; 结算日期 判断表单存在并删除12If Object_id(N&apos;tempdb.dbo.#b1&apos;,N&apos;U&apos;) Is Not Null Drop table #b1--若非临时表，无需加 数据库名 注释 -- 双连字符；从开始到行尾均为注释；对于多行注释，必须在每一个开头多使用 /*……*/ 正斜杠 星号； 可在同一行，可另起一行；在这之间的全部内容均为注释（可跨行）； 可在代码内执行 参照文档 1234select * from #100pivot(sum(人数) for 资金等级 in ([100万以下])) as B 转置]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[罗辑思维_王阳明的心法]]></title>
      <url>%2F2017%2F03%2F05%2F%E7%BD%97%E8%BE%91%E6%80%9D%E7%BB%B4_%E7%8E%8B%E9%98%B3%E6%98%8E%E7%9A%84%E5%BF%83%E6%B3%95%2F</url>
      <content type="text"><![CDATA[社会本质是一个协作系统。当你发起一个项目，跟他人建立起联系之后，就不仅仅是个人的事。 创业，不是你有一套成功的商业方法。而是你有一个可能的目标，然后我们一群人去求证它，逼近它。 人活着，两个目的。 意义：我为什么要活着 规范：我怎么活着 儒学：做圣人，做君子（它的终极目标）向外求，通过外界的经历来不断雕刻自己 王阳明：向内求。每个人都是圣贤人，人人平等。 ​ 每个人都有圣贤的品质或种子，你要做的是把那些污染物给剔除。 知行合一。行才能真正体现你的知的水平。但认知的提升是一件极其困难的事。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL梳理_结构与关联]]></title>
      <url>%2F2017%2F02%2F19%2FMySQL_%E7%BB%93%E6%9E%84%E4%B8%8E%E5%85%B3%E8%81%94%2F</url>
      <content type="text"><![CDATA[1. 数据库设计1.1 外键 What：表中的某一列；但该列是引用到另一个表的主键列 Why ：用于确定一张表中的行与另一张表中的行相对应的值 How ：创建外键 1234567891011121314151617（1）创建带有外键的表CREATE TABLE intersts( int_id INT NOT NULL ATUO_INCREMENT PARIMARY KEY, interests VARCHAR(50) NOT NULL, cont_id INT NOT NULL, # 新建的列名 CONSTRAINT my_contacts_fk # 约束名_fk为父表中的列 FOREIGN KEY (cont_id) # 指定外键 REFREENCE my_contacts (contact_id) # 引用外键的 父表名 (列名) ON DELETE casecade ON UPDATEA casecade # 设参数casecade跟随父键改动);---（2）在已有表中建立外键ALTER TABLE interestsADD CONSTRAINT 约束名_fkFOREIGN KEY (外键名)REFERENCE 父表名 （列名） 1.2 联接表 What：储存两个相关表的主键的表 How : 用Select来创建 1234CREATE TABLE link AS SELECT var FROM table_name GROUP BY var ORDER BY var; 2. 联接2.1 内联接 What：通过查询的条件，移除某些结果数据行后的交叉联接； 2.1.1 交叉联接CROSS JOIN What：返回两张表每一行相乘的所有结果 可用逗号（，）来表示 12SELECT * FROM table1 , table2 WHERE table1.name = 'xiaoming'; 2.1.2 自然联接NATURAL JOIN What：自然识别出表中相同名称的列，并返回符合记录的值； 2.1.3 相等联接INNER JOIN…ON… What：利用条件判断中的比较运算符结合两张表，只有符合记录的值才会返回； 123SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.id WHERE table1.name = 'xiaoming'; 2.1.4 自联接 What：同一张表引用两次 12SELECT c1.name, c2.name AS boss FROM clown AS c1 INNER JOIN clown AS c2 ON c1.boss_id = c2.id; 2.2 外联接 What：返回某张表所有行 + 带有另一张表的条件相符的行 一定会提供数据行，若出现NULL则表示未发现匹配的行 顺序很重要 2.2.1 左外联接 What：以左表为基准，右表与之匹配 123SELECT g.girl, t.toy FROM girls AS g # girls为左表，即基准表 LEFT OUTER JOIN toys AS t # toys为右表，去匹配左表的值 ON g.toy_id = t.toy_id; 2.2.2 右外联接123SELECT g.girl, t.toy FROM girls AS g # girls为左表，去匹配右表的值 RIGHT OUTER JOIN toys AS t # toys为右表，即基准表 ON g.toy_id = t.toy_id; 3. 联合 What：将多个行合并都一张表中，并自动清除重复值 Why ：可以把从不同表中查询的内容，放到同一个表中 How：注意内容 每个select语句中列的数量、列的类型、统计函数必须相同 只接受一个ORDER BY语句，且位于最后 若使用UNION ALL则返回未清除重复值的所有行 123456SELECT title FROM job_currentUNIONSELECT title FROM job_desiredUNIONSELECT title FROM job_listingsORDER BY title; 4. 子查询4.1 内查询12SELECT name FROM job_current WHERE jc.title NOT IN (SELECT title FROM job_listings); IN 可以替换为其他符号；=, !=, &gt;, &gt;= 4.2 外查询 What：子查询在第一个SELECT语句中，表示某个欲选取的列； 1SELECT name, (SELECT state FROM zip_code WHERE mc.zip_code = zip_code) FROM my_contact AS mc; 5. 子查询 VS. 联接 联接比子查询更有效率，并且子查询只能返回当前表中的变量 12345查询“张旭“教师任课的学生成绩；对应教师表(teacher)，课程表(course)，成绩表(socre)---# 子查询SELECT DEGREE FROM score # WHERE CNO = (SELECT CNO FROM course WHERE TNO = (SELECT TNO FROM teacher WHERE TNAME = '张旭')); 【联接，并可返回不同表中的变量】 SELECT score.degree, teacher.tname FROM score ...12345678910# 联接 SELECT score.DEGREE FROM course # 自然联接 NATURAL JOIN score NATURAL JOIN teacher WHERE teacher.TNAME = '张旭'; --SELECT score.DEGREE FROM score,course,teacher # 交叉联接 WHERE course.CNO = score.CNO AND course.TNO = teacher.TNO AND teacher.TNAME = '张旭'; 当使用统计函数时，子查询更有效率 12345查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree,并按Degree从高到低次序排序SELECT * FROM score WHERE CNO = '3-105' AND DEGREE &gt; (SELECT MIN(DEGREE) FROM score WHERE CNO = '3-245') ORDER BY DEGREE DESC; 6.#]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[统计学_基本概念]]></title>
      <url>%2F2017%2F02%2F19%2F%E7%BB%9F%E8%AE%A1%E5%AD%A6_%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
      <content type="text"><![CDATA[1. 基本概念1.1 方差Varience what ： 各值与均值距离的平方和除以(n-1)； $s^2=\frac{\sum(X-u)^2}{(n-1)}$ why ： 说明数据的离散程度 1.2 贝叶斯定律Baye’s Rule what ： P(B|A)=P(A∩B)/P(A) why ： 将一个未知的条件概率转化为一个已知的条件概率 1.3 置信系数Confidence Coefficient what ： （1-α） why ： 一个随机选取的置信区间，它包含了所有总体参数的概率 置信区间CI：置信系数的百分比表达形式 how : 根据置信系数（1-α）来确定置信区间CI; 当（1-α）=0.90, α=0.1, α/2=0.05,表示对于分布右尾处面积为0.05是置信区间之外的面积； 求当[0,0.45]这一侧的Z值，得出Z=1.645 置信区间右侧 = X + 1.645*（标准差/sqrt(n)) 样本统计量 与 置信区间 what : 样本统计量，根据 误差范围(ME)和置信区间来确定 how : 误差范围 = 置信区间的一半/单侧 ME = α/2处的Z得分 *（标准差/sqrt(n)) 1.4 检验统计量 what ： 一个样本统计量；Ｚ＝（样本均值－给定的ｕ）／（标准差／sqrt(n)） why : 用来检验该拒绝还是接受假设的一个度量值 1.5 拒绝域 what : 检验统计量可能取值的一个集合；其对应的概率为 α ; 拒绝域可以自己选择；例如，拒绝域：Z&gt;1.645，对应的 α =0.05； why : 当检验统计量的值落入这个集合时，研究者会拒绝原假设而接受备择假设； 1.6 显著性水平p值 what ： 观测到检验统计量至少与原假设相矛盾，从而支持备择假设的概率；p值在[0,1]之间； p值 = P（Z&gt;z）；z为检验统计量；即p值为检验统计量右侧的尾部面积； why ： 用于判断是否拒绝原假设而支持备择假设；数值越低，说明否定原假设的证据越充分； 假设检验中，p值与给定的 α值进行比较； 当p值落入拒绝域对应的概率 α 中（p &lt; α），则拒绝原假设；【若为双侧检验，则应为p &lt; α/2 ） 从图形上去理解，α为右侧尾部的面积 1.7 相关系数 what : [-1, 1]之间的值 why ： 用于衡量两个定量变量之间线性关系的强弱； 1.8 协方差Covariance what : 一个样本的值的偏离程度，会对另一个样本的值的偏离程度产生多大的影响； why ： 衡量两个变量的总体误差；如果其中一个大于自身的期望值，另外一个也大于自身的期望值，那么两个变量之间的协方差就是正值。 若协方差为0，表示两者不相关，相互独立； 方差是一种特殊情况，表示两个变量相同； 1.9 离差/误差 what : 单个数值与平均值之间的差； $\sum(离差)$=0 why : 离差/误差平方和（SSE)，可以用来反映数据的离散程度； SSE = Sum of Squares for error 1.10 残差 what : 实际观测值 与 模型预测值 之间的差 $\sum(残差)$=0 why : 残差平方和，可以反映拟合直线的好坏；因为它反映了数据的离散程度； 1.11 均值的标准误 What：估计来自同一总体的多个样本所得到的样本均值之间的差异性；MSE = Mean Standard for error Why ：反映的是样本之间的变异性；而标准差反映的是单个样本内的变异性； 1.12 方差-协方差矩阵 What：计算不同变量之间协方差的一个对称矩阵； Why ：可以导出一个变换矩阵，这个矩阵能够使数据完全去相关化；也就是说，可以找出一组最佳的基于紧凑的方式来表达一组数据；在主成分分析中有很大的应用； 1.13 偏态与峰度偏态：Skewness What：指非对称分布的偏斜状态;指统计总体当中的变量值分别落在众数左右两边，呈非对称性分布。 Why ：衡量随机变量概率分布的不对称性。 How ： 偏态为负（负偏态/左偏态），说明概率密度函数左侧的尾部比右侧的长，绝大多数的值（包括中位数在内）位于均值的右侧。 偏态为正（正偏态/右偏态），说明概率密度函数右侧的尾部比左侧的长，绝大多数的值（但不一定包括中位数）位于均值的左侧； 偏态为零，表示数值均匀地分布在平均值的两侧，但并不一定意味着就是对称分布； 若分布对阵，平均值=中位数，偏度为零；（若为单峰分布，平均值=中位数=众数） 峰度 What：数据呈现的一种形状； Why ：表示分布的波峰与尾部**相对于正态分布的区别**； How ： 峰度值为正，说明相比于正态分布，该分布具有更重的尾部和更陡的峰值，即中间更窄且高； 峰度为负，说明相比于正态分布，该分布具有更轻的尾部和更平缓的峰值，即中间更宽且低； 2017/2/8]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL梳理_基本语法]]></title>
      <url>%2F2017%2F02%2F19%2FMySQL_%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[1. 数据库1.1 创建123456CREATE DATABASE gregs_list;USE gregs_list;CREATE TABLE my_contact;CREATE VIEW view_c; 1.2 删除123DROP DATABASE gregs_list;DROP TABLE my_contacts;DROP VIEW view_c 1.3 展示123SHOW DATABASE; # 显示所有数据库SHOW TABLES; # 显示当前数据库所有的表SHOW TABLES FROM geregs_list; # 显示该数据库中的所有表 1.4 创建过程1SHOW CREATE TALBE my_contacts; 展示表的结构 DESC my_contacts 2. 表的基本操作2.1 创建2.1.1 直接创建12345678910CREATE TABLE my_contacts( id INT NOT NULL AUTO_INCREMENT PRIMARY KEY # 非NULL,自动填充数字，并设为主键 name VARCHAR(10), # VARCHAR 可变动字符串，长度最大为10，若有abc，则只占用3个字符 sex CHAR(2)， # CHAR,固定字符串，长度为2；若只有a，则另一个用空格来表示 age INT, birthday DATA, # DATA,日期 pirce1 DEC(3,2), # Decimal数字，数字共3位，其中2为位是小数点后的 price2 DEC(3,2) DEFAULT 1.00, # DEFAULT 默认的格式 interests BOLG, # BOLG 大文本); 其他文本属性 12345678其他PRIMARY KEY (id) # 创建主键UNIQUE # 唯一值时间格式TIME # 时间DATETIME # 日期与时间TIMESTAMP # 当下时刻 2.1.2 AS SELECT 创建12CREATE TABLE table AS SELECT col_name FROM table GROUP BY col_name ORDER BY col_name; # 直接复制原表单的格式 2.2 新增2.2.1 值INSERT INTO 插入123456INSERT INTO my_contacts(name,sex)VALUES(&quot;小明&quot;,&quot;男&quot;), # 用逗号分隔(&quot;小红&quot;,&quot;女&quot;), (); 2.2.2 列(值)ADD COLUMN1ALTER TABLE my_contacts ADD COLUMN name VARCHAR(30); # 新增列 UPDATE…SET… 直接新增1UPDATE TABLE my_contacts SET interset1 = LEFT(interset,4); SELECT 多表返回1SELECT mc.*, projcet.color FROM mc CROSS JOIN projcet; # 返回原表格所有的值 + 其他表单中的列值 1SELECT mc.*, &apos;100&apos; AS c FROM mc; # 插入固定值为100的列，并命名为c； 2.3 删除2.3.1 删除行123DELETE FROM my_contacts; # 删除所有行DELETE FROM my_contacts WHERE age = 30 AND/OR sex=&quot;男&quot;; # 删除特定行 2.3.2 删除列1ALTER TABLE my_contacts DROP COLUMN name; 2.4 格式2.4.1 结构展示1DESC my_contacts; 2.4.2 改变表的名称1ALTER TABLE my_contacts RENAME TO new; 2.4.3 改变列的格式CHANGE 改变列的 名称、格式 1ALTER TALBE my_contacts CHANGE name new_name VARCHAR(30); # CHANGE 改变列的 名称、格式 MODIFY 改变列的 格式、位置12ALTER TALBE my_contacts MODIFY name VARCHAR(30) BEFORE id; # MODIFY 改变列的 格式、位置 位置属性可为 BEFOR/AFTER/FIRST/SECOND 2.5 替换UPDATE…SET12UPDATE my_contacts SET price = 3 WHERE projcet = &apos;ball&apos; AND/OR sex = &apos;男&apos;; UPDATE…SET…CASE WHEN…THEN…123456UPDATE my_contacts SET price = CASE WHEN projcet ='ball' THEN 3 WHEN project = 'sing' THEN 5 ELSE '0'END; 3. 查询3.1 单元格属性3.1.1 行数-count()1SELECT COUNT(name) FROM my_contacts; 3.1.2 字符串长度-length()1SELECT LENGTH(name) FROM my_contacts; 3.2 单元格的值3.2.1 左部分 -left()1SELECT LEFT(name,3) FROM my_contacts; 3.2.2 右部分-right()/substr()12SELECT SUBSTR(name,3) FROM my_contacts; # SBUSTR(strings,length_num) 返回移除前3个长度的值之后，余下右侧的值 3.2.3 指定位置的值-substring()12SELECT SUBSTRING(name,1,2) FROM my_contacts; # SUBSTRING(strings,start_num,length_num) 返回从指位置1开始，长度2的值 3.2.4 特定符号之前的值-substring_index()12SELECT SUBSTRING_INDEX(name,&apos;x&apos;,2) FROM my_contacts; # SUBSTRING_INDEX(string,&apos;x&apos;,num) 返回单元格中x第二次出现之前的值 3.2.5 去除空格的值-trim()1SELECT TRIM(name) FROM my_contacts; # TRIM 去除两边的空格； LTRIM/RTRIM 去除左侧/右侧的空格 示例1：提取 Kadet(102)AD, Cide(31)DF 两侧的值 123UPDATE my_contacts SET side = SUBSTRING_INDEX(name,&quot;(&quot;,1) # 返回第一个左括号（之前的值city = SUBSTR(name,LENGTH(SUBSTRING_INDEX(name,&quot;)&quot;,1)+1) #返回第一个右括号）之前的长度，加上右括号的长度 示例2：分列，提取同一列football, sing, reading 中的值 12345UPDATE my_contacts SET interest1 = SUBSTRING_INDEX(interset, &quot;,&quot;, 1) # 返回第一个逗号之前的值 interest = SUBSTR(interest, LENGTH(interest1)+1) # 移除第一个兴趣的字符串 + 逗号 长度的值 interset2 = SUBSTRING_INDEX(interest,&quot;,&quot;, 1) interest3 = SUBSTR(interest, LENGHT(interest2)+1); 3.3 特定条件的值3.3.1 特定范围(含日期)123456SELECT name FROM my_contacts WHERE name &gt;= &quot;L&quot; AND name &lt;&quot;N&quot; ; # 名字开头为L-M的人---SELECT name FROM my_contacts WHERE BETWEEN &quot;L&quot; AND &quot;M&quot;; # 大于等于L，小于等于M 3.3.2 通配符-like12SELECT name FROM my_contacts WHERE [NOT] name LIKE &quot;A%&quot; / &quot;_A%&quot;; # 返回名字以A为开头字母的人/ 第二个字母为A的人 3.3.3 相等&amp;不相等的值小范围 12SELECT name FROM my_contacts WHERE name [NOT] IN LIKE (&quot;A%&quot;,&quot;B%&quot;,&quot;C%&quot;) 两个表之间 查询选修了c02号课程的学生的姓名和所在系，学生表(student)，课程表(sc) 123# 子查询SELECT Sname, Sdept FROM student WHERE Sno IN (SELECT Sno FROM sc WHERE Cno = &apos;C02&apos;); # 可在IN之前加NOT；即 WHERE sno NOT IN ... 1234# 联接SELECT st.Sname, st.Sdept FROM student AS st INNER JOIN sc ON st.Sno = sc.Sno WHERE sc.Cno = &apos;C02&apos;; 两个表之间 - 不相等：not exists 查询所有未讲课的教师的Tname和Depart 12SELECT TNAME,DEPART FROM teacher # 一种常用于外层查询结果不存在于关联表里的方法 WHERE NOT EXISTS (SELECT * FROM course WHERE teacher.TNO = course.TNO); 4. 查询：表格相关4.1 分组、排序分组 GRUOP BY 排序 ORDER BY name, degree DESC, SUM(age) DESC # 默认为升序排序（ASC） 12GROUP BY nameORDER BY name where 用于分组之前 having 用于分组之后 4.2 显示数量-limit()LIMIT LIMIT n1 # 返回前n1行，并且MySQL是从0开始的 LIMIT n1,n2 # 返回从第n1+1行(MySQL从0开始)，之后的n2行 LIMIT n1,n1 # 返回特定行的值 Limit结合排序Order by 往往有不错的效果 5. 数字处理5.1常规统计函数 rand() [0,1]之间的随机值, round(x,[y]) 取整；y为小数位数，y可以为负数, floor(x) 向下取整，小于x的最大整数, ceiling(x) 向上取整 truncate(x,[y]),截断至y指定的小数位数后的值 mod(x,y) x/y的余数 sum(), avg(), sqrt()平方根, exp()指数, ln(x) / log(x,y) 对数, power(x,y) x的y次方, abs() 绝对值, pi() π 6. 数据清洗6.1 缺失值删除缺失值 12DELETE FROM my_contacts WHERE name IS NULL OR sex IS NULL; 6.2 重复值/唯一值返回唯一值：distinct() 1SELECT DISTINCT(name) FROM my_contacts; 7. 日期SELECT NOW(); 返回当前日期与时间 SELECT MONTH(NOW()); 返回当前月份 SELECT YEAR(NOW()); 返回当前年份 计算年龄 1SELECT YEAR(NOW())-YEAR(birthday) AS age FROM my_contacts; 8. 账户与安全]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[统计学_分析方法]]></title>
      <url>%2F2017%2F02%2F19%2F%E7%BB%9F%E8%AE%A1%E5%AD%A6_%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[1. 相关性 What：显示两个随机变量之间线性关系的强度和方向； Pearson相关系数 Spearman相关系数：衡量两个有序尺度变数的相关性； Kendall等级相关系数：衡量两个人为认定的有序尺度变数的相关性 Kappa一致性系数：衡量两个类别尺度变数的相关性； Why ：用来衡量两个变量相对于其相互独立的距离； 1.1 相关系数 R - cor() cor(data, use=&quot;everything&quot;, method=&quot;pearson&quot;) # use,表示对缺失值的处理方式， everything - 结果为missing all.obs - 报错 complete.obs - 行删除 pairwise.complete.obs - 成对删除 # method = “spearman” / “kendall” 组与组之间的相关系数 123x &lt;- data[, c("var1","var2")]y &lt;- data[, c("var3","var4","var5")]cor(x,y) 1.2 协方差 R - cov() cov(data) 1.3 偏相关 What：控制一个或多个变量时，另外两个定量变量之间的相互关系 Why ：控制其他变量，单独研究某两个变量之间的关系 R - ggm包 - pcor() pcor(data[,c(1,5,2,3,4)], cov(states)) # u，一个数值向，前两个数值表示要研究的两个变量，其余的数值表示要排除影响的条件变量 #S 对应的协方差矩阵，同时也表明了对应的数据 pcor(u, S) 2. 均值的假设检验2.1 t 检验 What： 一种用于小样本（样本容量&lt;30）的两个平均值差异程度的检验方法； Why ： 通过 t 理论来推断差异发生的概率，从而判断两个平均数的差异是否显著（μ~1~ - μ~2~= 0）； How ： 适用条件 正态分布（常用于标准差σ未知） 样本独立随机 2.1.1 单样本 t 检验 Why1 ： 用于比较 抽样样本所代表的未知的总体均值μ 与 已知的总体均值μ~0~ 或 指定值的差异程度； Why2 ： 用于计算 可能的总体均值的范围（估计置信区间）； R 语言 -t.test(y, [conf.levle=0.95]) Excel - 描述统计量 - 根据（ 均值 ± 置信度 ）来确定 2.1.2 双样本 t 检验 What ：针对两个独立的样本； Why1 ： 确定两个独立组的均值是否存在差异（μ~1~ - μ~2~= 0）； Why2 ： 计算两个总体均值之间的差值的范围； R - t.test(x1, x2, alternative=&quot;two.side&quot;, var.euqal=F) alternative 可选 less; greater; var.equal = F 默认两方差不相等； var.equal = T ，等方差 t 检验 2.1.3 双样本配对 t 检验 What：针对两个不独立的样本 Why1 ： 确定两个配对样本之差的均值不等于0（或目标值）（μ~1~ - μ~2~= 0）； Why2 ： 计算可能包含差异总体均值的范围； R - t.test(x1, x2, alternative=&quot;&quot;, paired=T , var.equal = F) # x1, x2 为已经分组的两个数值型向量 t.test(x~y, data= ) # x为一个数值型变量，y为一个二分变量(分组变量)；即此时数据框的格式为长格式，所有的数据y在一列中 paired = T ,表示配对； 默认为F Excel - t检验：平均值的成对二样本分析 2.2. z 检验 What： 一种用于大样本的两个平均值差异程度的检验方法； Why ： 通过 Z 理论来推断差异发生的概率，从而判断两个平均数的差异是否显著（μ~1~ - μ~2~= 0）； How ： 适用条件 - 正态分发（常用于标准差σ未知） 3. F 检验 What：方差齐性检验；通过比较两个数据的方差，来确定它们的精密度是否有差异性检验； Why ：检查两个样本的方差是否有显著差异；通过F检验来确定选择何种 t 检验（等方差双样本、异方差双样本）以及确定方差检验ANOVA条件中的等方差性 5. 方差分析 What：基于使用方差来确定均值是否存在误差的一种方式；ANOVA 通过将 组均值之间的方差（SST） 与 组内方差（SSE） 进行比较来确定这些组都是一个更大总体的一部分还是分属具有不同特征的单独总体； 组间因子：一个自变量，把每个观测值分配到对应的一个组别中，一个观测值只能属于一个组别；常称为单因素方差分析；例如：把治疗方案分为方案1，方案2，把每个观测值随机抽取放到方案中； 组内因子：一个自变量，不对观测值进行划分，而对所有观测值重复测量不同水平下的情况；常称为重复测量方差分析或组内方差分析；例如，把时间分为1个月，3个月，所有的观测值都要观察这两个时间维度下的情况； SST ：组间均值之间的差异性；对每个组的均值与所有样本观测值的总体均值之间距离的平方，乘以该组内观观测值的数量，最后把所在的结果加总；Sum of Squares for Treatments; SSE ：组内均值之间的差异性；对每个响应观测值和自身所处组的均值之间距离的平方进行加总，然后对所有观测值的奖惩的平方求和；Sum of Squares for error; Why ：检验两个或多个总体均值相等的这一假设；通过比较不同因子水平下的响应变量均值来评估一个或多个因子的重要性； 因子水平：指的是不同的自变量； 例如，球杆（一个因子水平），球（一个因子水平），击球人（一个因子水平） 因子水平可以有不同的取值；球杆（木球杆，铁球杆） How ：试验条件 样本独立随机 近似正态分布（稍有偏离也并不影响F检验的结果） 等方差性（敏感） 方差分析类型 模型和设计属性 单因子 一个固定因子（由调查员设置水平），每个处理可具有不等（不平衡）或相等（平衡）的观测值数。 平衡 模型可包含任意数量的固定和随机因子（水平是随机选择的），以及交叉和嵌套因子，但要求平衡设计。 一般线性模型 通过允许不平衡设计和协变量（连续变量）来扩展平衡方差分析。 5.1 单因素方差分析 What：针对只有一个因变量的方差分析，并且观测值被分到不同的组别中的设计实验；该变量因子也称为组间因子； R - aov() fit &lt;- aov(y~x) # y为数值型因变量，x为类别型组间因子，且必须为因子格式 data$var &lt;- factor(data$var) summary(fit) Excel - 方差分析-单因素方差分析 分组方式： 行/列； 即 组间因子 标志：指的是自变量 5.2 随机区组方差分析 What：引入区组均值 区组均值：区组中的平均值 SSB：每个区组均值 与 所有样本观测值的总体均值 之间的差异的平方求，再乘以每个区组内观测值的个数，最后加总； Sum of Squares for Blocks； Why ：减少每个区组内试验单元的抽样变异性，降低误差值； 5.3 双因素方差分析 What：有两个自变量，观测值被分配到两个变量的交叉类别组中的方差分析；例如自变量A有a个水平，自变量B个b个水平，存在一个ab个可能的处理； 主效应：判断各因素对因变量的影响； 交互效应：判断因素的组合对因变量的影响； How ： 分析 若拒绝原假设，得出两个均值不同的结论； 查看交互效应 2.1 若拒绝交互效应的原假设，得出两个变量之间有交互影响； ​ 2.2.1 比较组间均值的配对 2.2 若无法拒绝，说明两个变量之间没有交互影响； ​ 2.2.1 分别查看变量A 、变量B 单独对因变量的影响， ​ 2.2.2 使用多重比较来比较均值的配对，得出哪个变量对均值的影响大 R - aov() fit &lt;- aov(y ~ x1*x2, data= ) # y为因变量，x1,x2 均需为因子，故x1,x2 都被当做 组间因子来对待factor(x1)，而非协变量； summary(fit) Excel - 方差分析：无重复双因素方差分析 5.4 双因素重复测量方差分析 What：观测值不是被分配到不同的组中，而是针对同一个自变量的多个不同水平重复测量；常为一个 组间因子 + 一个组内因子 的设计试验； R - aov() fit &lt;- aov(y~x1*x2+ Error(对象列/x2), data= ) #Error(Subject/x2) 表示x2为组内因子; 对象列，表示用以代表重复的标记列 summary(fit) R处理重复测量时，需先将数据格式转为长格式； library(reshape) melt(data,id=”var1”, measure=”var2,var3”) # id用于确定基准列，measure用于确定哪些变量组合进id列，若缺失则代表所有变量 Excel - 方差分析：重复双因素方差分析 每一样本的行数：表示重复测量值所在的行数（若为3，表示第4行为其他区组的观测值） 5.5 稳健的方差分析 Why ：当方差分析的前提假设无法满足时，或者担心过多的离群点，可以用稳健或非参数的MANOVA检验 R - 5.x 均值的多重比较 Why ：在发现均值不等的前提下，得出各个均值的排序大小； R - rrcov包 - Wilks.test() 得出各组均值的大小 - 可视化（gplots包）- plotmeans() 123&gt; &gt;library(gplots)&gt; &gt;plotmeans(y~x)&gt; &gt; &gt; 得出各组均值的大小 + 两组均值差异的显著情况 Tukey HSD成对检验 TukeyHSD() 12345&gt; &gt;TukeyHSD(fit) # 观察p值，若p&lt;0.05，说明这两个组均值之间存在差异&gt; &gt;par(las=2) # 横纵坐标轴转换&gt; &gt;par(mar=c(5,8,4,2)) # 增加左侧的边界&gt; &gt;plot(TukeyHSD(fit)) # 可视化&gt; &gt; &gt;&gt; 可视化(multcomp包) 123456789&gt; &gt; library(multcomp)&gt; &gt; par(mar=c(5,4,6,2)) # 默认为(5,4,4,2) 增大顶部边界面具&gt; &gt; tuk &lt;- glht(fit, linfct = mcp(trt='Tukey')) # trt，组间因子&gt; &gt; plot(cld(tuk, level=0.05), col="lightgrey")&gt; &gt;&gt; &gt; # 图形解读：&gt; &gt; 2. 各均值大小的分布图&gt; &gt; 2. 有相同的字母，说明均值差异不显著&gt; &gt; &gt; 6. 确定统计量 7. 回归分析 Regression Analysis What：一个建立自变量与因变量之间的关系模型；一个或多个自变量来预测因变量的方法； Why ： 描述两者相关性，它们相关的强度与方向； 挑选与因变量相关的自变量 生成一个等式，用来预测因变量 How ：一般形式为 y = f(x,ε)，结果解释 Intercept：截距 Estimate/Cofficients：系数 St.Error标准误：抽样分布的标准误差，说明抽样的离散情况； p值：回归分析会进行统计检验以针对每个自变量的关联系数计算出一个称为 p 的概率值；零假设为：系数与零之间无显著差异（在所有情况下，该系数均为零，因此，关联的解释变量对于模型不起任何作用） 决定系数$R^2$或 Adj $R^2$：给出了模型对于原数据的解释程度；越接近1，说明模型拟合越好； Adj $R^2$，调整的多元判定系数，不会因为变量数目的增加而趋向于1；在多元分析中，若使用$R^2$必须确保样本变量数量 &gt; 模型参数个数；并且$R^2$会随着模型个数的增加而增加，也就是说即使模型对预测y不能提供任何作用，也能迫使$R^2$增加到1； Residual残差：表示模型无法解释的部分（指的是实际值与模型预测值的差），表示为随机误差项；可以用于确定模型的拟合程度；残差越小，说明拟合越好； 回归方程 自变量 因变量 简单线性回归 一个（定量） 一个（定量） 多项式回归 一个（定量），n阶 一个（定量） 多元线性回归 两个及以上（定量） 一个（定量） Logistic回归 一个或多个 一个（二值型类别） 7.1 简单线性回归 What：一个量化的自变量预测一个量化的因变量； Why ：判断两个变量之间相关的强度和方向； ​ R - lm() 1234567&gt; &gt; fit &lt;- lm(y~x, data=) # formula y ~ x1+x2+...x4&gt; &gt; summary(fit) &gt; &gt; fitted(fit) # fitted() 返回拟合模型的预测值&gt; &gt; residuals(fit) # 返回残差值（即 实际值 - 模型预测值）&gt; &gt; plot(data$x, data$y)&gt; &gt; abline(fit) # 模型可视化&gt; &gt; &gt; Excel - 回归 7.2 多项式回归 What：一个量化的自变量解释一个量化的因变量，模块的观察是n阶多项式 R - lm() 12345&gt; fit &lt;- lm(y ~ x + I(x^2), data= ) # I()，表示以算术的角度来解释括号中的元素&gt; summary(fit) # 查看是否有不显著的变量(p&gt;0.05)&gt; plot(data$x, data$y) &gt; lines(x, fitted(fit)) # fitted() 返回拟合模型的预测值&gt; 7.3 多元线性回归 What：两个或多个量化的自变量预测一个量化的因变量；当自变量个数大于等于2个； How ：结果解释 回归系数的含义为：当一个自变量增加一个单位，其他自变量保持不变时，因变量增加的数量； R - lm() 123&gt; &gt; fit &lt;- lm(y ~ x1 +x2 + x3 + ..., data= )&gt; &gt; summary(fit)&gt; &gt; 7.4 有交互项的多元线性回归7.5 Logistic回归 What：一个或多个自变量来预测一个二值型类别因变量； R - glm() 12345678&gt; &gt; data$var &lt;- with(data,&#123;ifelse(var &gt; n, 1,0)&#125;) # 赋值二分法&gt; &gt; data$var &lt;- factor(data$var) # 因子化&gt; &gt; fit &lt;- glm(y ~ ., family=binomial, data= ) # ~. 表示除因变量之外的所有变量； bionmial，表示逻辑回归&gt; &gt; summary(fit) # 查看是否有不显著的变量(p&gt;0.05)&gt; &gt; fit.reduced &lt;- setp(fit) # 采用逐步逻辑回归生成一个包含更少自变量的模型；目的是通过增加或移除变量来得到一个更新的AIC值&gt; &gt; coef(fit.reduced) # 查看回归系数，含义是当其他自变量不变时，一单位自变量的变化引起的因变量的对数优势比的变量&gt; &gt; exp(coef(fit.reduced)) # 将回归系数指数化，自变量增加n个单位，变为引起因变量的指数比的变化为 x^n ； 若n=1，则直接乘以x&gt; &gt; 9. 多种条件假设检验9.1 独立性检验 常规情况下可通过经验来判断各个变量是否独立；例如，我们没有理由去相信，一位女性的体重会影响我们选取的下一位女性的体重； Durbin-Watson检验 What：通过确定两个相邻误差项的相关性是否为零，来检验回归残差是否存在自相关； Why ：可以检测误差的序列相关性； How ：该检验适用于时间独立的数据 滞后项（lag=1），表示数据集中的每个数据都是与后一个数据进行比较的 p值，若p值&gt;0.05，说明不拒绝假设；即说明两者之间相关性为0，即独立； R - durbinWatsonTest - car包 12&gt; durbinWatsonTest(fit)&gt; 9.2 正态性检验 What：当自变量固定时，因变量呈正态分布；所以，残差值也应该是一个均值为0的正态分布； 正态Q-Q图：在正态分布对应的值下，显示标准化残差的概率图； 样本分位数(Sample Quantiles)-纵轴；理论分位数(Theoretical Quantiles)-横轴 How ：若满足正态性假设，标准化残差的概率点应该落在呈45度角的直线上； R - plot() 12&gt; &gt; plot(fit) # 观察正态Q-Q图&gt; &gt; &gt; R - qqPlot() - car包 1234&gt; &gt; qqPlot(fit, labels=row.names(states), id.method="identify", simulate=T, main="Q-Q plot")&gt; &gt; # id.method="identify"，表示能够交互式绘图&gt; &gt; # simulate=T, 表示95%的置信区间用参数自助法生成&gt; &gt; &gt; # 纵坐标为学生化残差值； rstudent(fit)[“Nevada”] # 特定行的学生化残差值 9.3 方差齐性检验 R - bartlett.test() 12&gt; &gt;bartlett.test(y ~ x , data= ) # 若p&lt;0.05，说明变量方差之间有差异，不满足方差齐性；&gt; &gt; R - plot() 12&gt; &gt; plot(fit) # 观察位置尺度图（预测值vs√标准化残差 图）&gt; &gt; &gt; 若水平线周围的点是随机分布的，则说明方差相等； R - nevTest() - car包 123&gt; &gt; nevTest(fit) &gt; &gt; spreadLevelPlot(fit)&gt; &gt; &gt; 观察p值，若p&gt;0.05，说明接受原假设，即方差是相等的； 观察图形，若点在水平的最佳拟合曲线周围呈水平随机分布，说明方差是相等的； 9.4 线性检验 R - plot() plot(fit) # 观察 预测值vs残差图； 若两者之间没有任何关联，则说明是自变量与因变量是线性的； 因当自变量与因变量线性相关，则残差值（实际值-模型预测值）与模型预测的值就没有任何关系； R - crPlots() - car包 crPlots(fit) # 得出成分残差图； 若两条线很接近，说明数据是线性的； 9.1-9.4 线性模型的综合检验 R - gvlma() - gvlma包 123&gt; &gt; gvlma(fit)&gt; &gt; summary(gvlma(fit))&gt; &gt; &gt; 观察p值，若p&gt;0.05，说明是满足假设的； Skewness偏度：对应正态性 Kurtosis峰态： Link Function线性； Heteroscedasticity异方差性； 9.5 异常值9.5.1 离群点 What：地域预测模型效果不佳的点，它们通常有很大的正或负的残差； Why ：正的残差（观测值-预测值）说明模型低估了因变量； How1：一种简单的判别方法是，标准化残差值大于2或小于-2的点可能是离群点。 How2：Q-Q图中落在置信区间带外部的点； R - outlierTest() - car包 123&gt; &gt;outlierTest(fit) # fit为拟合后的对象 &gt; &gt;# 若p&lt;0.05，说明有离群点；当p&gt;1时，将产生NA；&gt; &gt; 该函数只判断单个最大（正或负）残差值的显著性来判断是否有离群点； 若不显著，说明没有离群点； 若显著，必须要删除离群点，然后再检验是否有离群点； 9.5.2 高杠杆值点 What：与其他自变量有关的离群点；它们是有许多异常的预测变量值组合起来的，但是与因变量没有关系； How ：可以通过帽子统计量（hat statistic）来判断； 9.5.3 强影响点 What：对模型参数估计值影响比较大的的点；例如，若移除一个观测点，会对模型产生很大的影响； How1：Cook距离/D统计量； How2：变量添加图 9.6 相关性检验 Why ：得出相关系数后，对其进行显著性检验，H~0~ ：变量间不相关，相关系数=0 两变量 cor(x,y, alternative=&quot;two.side&quot;, method=&quot;pearson&quot;) # less/greater; pearson/spearman/kenall; 每一次只能检验一种相关系数 多变量两两检验 123library(psych) # 加载psych包corr.test(table, use="", method="") # use="complete","pairwise" 针对缺失值的处理，行删除/成对删除 偏相关检验 123library(ggm) #加载ggm包pcor.test(r, q_num, n_num)# r，pcor得到的相关系数； q_num，要控制的变量数（以数值表示位置）； n，样本大小； 10. 多种模型评判10.1 多重共线性 What：自变量之间存在一定的相关性； Why ：会导致模型参数的置信区间过大，使单个系数解释起来困难； How ：用方差膨胀因子VIF(Variance Inflation Factor)进行检测；$\sqrt {VIF}$ 表示变量回归参数的置信区间能膨胀为与模型无关的预测变量的程度。 ​ R - vif() - car包 123&gt; &gt; vif(fit)&gt; &gt; sqrt(vif(fit))&gt; &gt; &gt; 若$\sqrt {vif}$ &gt; 2，表明存在多重共线性问题； 12. 时间序列 What：数据随着时间的变化反复测量变量值； Why ：1.对数据的描述（这段时间发生了什么？）；2.对数据的预测（接下来会发生什么？） 生成时序对象 R - ts() 123456&gt; &gt; tsales &lt;- ts(scale, start=c(2003,1), frequency=12) # 生成时序对象&gt; &gt; tsales&gt; &gt; plot(tsales)&gt; &gt; start(tsales)/ end(tsales) / frequency(tsalse) # 可通过这三个函数查看性质&gt; &gt; tsales.subset &lt;- window(tsales, start=c(2003,5), end=c(2004,6)) # 取子集&gt; &gt; &gt; ts(data, start=, end=, frequency= ) # start/end=可以是一个数值a，或一个含两个整数的向量c(a,b) # frequency= 1-数据对应年度数据；4-数据对应季度数据；12-数据对应月度数据； 12.1 简单移动平均 Why ：对数据进行平滑处理，移除那些波动，从而探究总体趋势； 居中移动平均 What：每个数据用这一点和其前后两个点的平均值来表示；它的代价是会损失最后(k-1)/2个观测值； $$St = (Y{t-q}+…+Yt+Y{t+q})/(2q+1)$$ $S_t$是时间点t的平滑值； k=2q+1，每次用来平均的观测值的个数，一般设置一个奇数； R - ma() - forecast包 12345678&gt; &gt; opar &lt;- par(no.readonly=T)&gt; &gt; par(mfrow=c(2,2))&gt; &gt; ylim &lt;- c(min(Nile), max(Nile))&gt; &gt; plot(Nile)&gt; &gt; plot(ma(Nile, 3))&gt; &gt; plot(ma(Nile, 7))&gt; &gt; plot(ma(Nile, 15))&gt; &gt; &gt; ma(data, k) 随着k的增加，图像会越来越平滑；我们需要尝试多个k值，再决定一个最好的k值； 12.2 季节性分解 What：对于间隔大于1的时序数据（季度数据、月度数据），会存在季节性情况；可以被分解为趋势因子、季节性因子、随机因子； 趋势因子（Tread Component）：能捕捉到长期变化 季节性因子（Seasonal Component）：捕捉到一年内的周期性变化 随机误差因子（irregular/error Component）：捕捉那些不能被趋势和季节性效应解释的变化； Why ：观察数据的季节性波动 + 总体趋势； How ：通过相加 或 相乘 来分解数据 相加模型：$Y_t = Trend + Seasonal + Irregular$ 相乘模型：$Y_t = Trend $ $\times$ $Seasonal $ $\times$ $Irregular$ ;相乘模型以比例的形式来呈现，很多时候效果更好； R - stl() 12&gt; &gt; stl()&gt; &gt; &gt; 12.3 指数预测模型12.3.1 单指数平滑 What：根据现有的时序值的加权平均对未来值做短期预测；权数选择的标准是使得距离现在越远的观测值对现在的影响越小； 阻尼$\alpha$：控制权数下降的速度；$\alpha$越接近1，表明近期观测值的权重越大；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F13%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[优秀员工离职原因分析与预测_R]]></title>
      <url>%2F2017%2F01%2F30%2F%E4%BC%98%E7%A7%80%E5%91%98%E5%B7%A5%E7%A6%BB%E8%81%8C%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90%E4%B8%8E%E9%A2%84%E6%B5%8B%2F</url>
      <content type="text"><![CDATA[优秀员工离职原因分析与预测。 一、背景1.公司大量优秀且有经验的员工过早的离开 2.数据来源：kaggle 3.变量 satisfaction: Employee satisfaction levelevaluation: Last evaluationproject: Number of projectshours: Average monthly hoursyears: Time spent at the companyaccident: Whether they have had a work accidentpromotion: Whether they have had a promotion in the last 5 yearssales: Departmentsalary: Salaryleft: Whether the employee has left 4.分析目的与衡量标准： （1）分析并得出优秀员工离职的主要可能的原因（2）构建预测模型，预测下一位将会离开的优秀员工是谁 二、数据分析所需包导入 library(readr)library(dplyr)library(ggplot2)library(gmodels) （一）导入数据并查看## 1.1 数据导入 library(readr)hr &lt;- read_csv(“HR_comma_sep.csv”)hr &lt;- tbl_df(hr)View(hr)str(hr) Classes ‘tbl_df’, ‘tbl’ and ‘data.frame’: 14999 obs. of 10 variables: $ satisfaction_level : num 0.38 0.8 0.11 0.72 0.37 0.41 0.1 0.92 0.89 0.42 …$ last_evaluation : num 0.53 0.86 0.88 0.87 0.52 0.5 0.77 0.85 1 0.53 …$ number_project : int 2 5 7 5 2 2 6 5 5 2 …$ average_montly_hours : int 157 262 272 223 159 153 247 259 224 142 …$ time_spend_company : int 3 6 4 5 3 3 4 5 5 3 …$ Work_accident : int 0 0 0 0 0 0 0 0 0 0 …$ left : int 1 1 1 1 1 1 1 1 1 1 …$ promotion_last_5years: int 0 0 0 0 0 0 0 0 0 0 …$ sales : chr “sales” “sales” “sales” “sales” …$ salary : chr “low” “medium” “medium” “low” … ## 1.2 变量重命名 hr_good &lt;- filter(hr, evaluation&gt;=0.75 &amp; year&gt;=4 &amp; project&gt;= 4) colnames(hr) &lt;- c(“satisfaction”,”evaluation”,”project”,”hours”,”years”,”accident”,”left”,”promotion”,”sales”,”salary”) ## 1.3 因子化 hr$sales &lt;- factor(hr$sales)hr$salary &lt;- factor(hr$salary, levels=c(“low”,”medium”,”high”)) ## 1.4 查看数据 sum(is.na(hr)) # [1] 0 summary(hr) satisfaction_level last_evaluation number_project average_montly_hoursMin. :0.0900 Min. :0.3600 Min. :2.000 Min. : 96.01st Qu.:0.4400 1st Qu.:0.5600 1st Qu.:3.000 1st Qu.:156.0Median :0.6400 Median :0.7200 Median :4.000 Median :200.0Mean :0.6128 Mean :0.7161 Mean :3.803 Mean :201.13rd Qu.:0.8200 3rd Qu.:0.8700 3rd Qu.:5.000 3rd Qu.:245.0Max. :1.0000 Max. :1.0000 Max. :7.000 Max. :310.0 time_spend_company Work_accident left promotion_last_5yearsMin. : 2.000 Min. :0.0000 Min. :0.0000 Min. :0.000001st Qu.: 3.000 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:0.00000Median : 3.000 Median :0.0000 Median :0.0000 Median :0.00000Mean : 3.498 Mean :0.1446 Mean :0.2381 Mean :0.021273rd Qu.: 4.000 3rd Qu.:0.0000 3rd Qu.:0.0000 3rd Qu.:0.00000ax. :10.000 Max. :1.0000 Max. :1.0000 Max. :1.00000 sales salarysales :4140 low :7316technical :2720 medium:6446support :2229 high :1237IT :1227product_mng: 902marketing : 858(Other) :2923 （二）根据定义选取优秀员工的子集，并做初步分析优秀员工的定义：（1）评价(evaluation)&gt;=0.75（2）项目数量(project)&gt;=4（3）有经验的(year)&gt;=4 ## 2.1 根据定义选取子集 hr_good &lt;- filter(hr, evaluation&gt;=0.75 &amp; years&gt;=4 &amp; project&gt;= 4) ## 2.2 对比总体与选取子集中离职员工的占比情况 【结论】：优秀员工离职情况非常严重1.在总离职员工中，优秀员工的数量占了(1778/3571=) 50%；2.在优秀员工子集中，离职的数量高达(1778/2753=) 64%； CrossTable(hr$left) Total Observations in Table: 14999 CrossTable(hr_good$left) ## 2.3 了解优秀员工子集的统计量 summary(hr_good) ## 2.4 了解优秀员工子集中各变量之间的相关性 【结论】：离职与满意度呈负相关，且相关度最高 hr_good_corr &lt;- select(hr, -sales,-salary) %&gt;% cor()corrplot(hr_good_corr, method=”circle”, tl.col=”black”,title=”离职与满意度呈负相关，且相关度最高”,mar=c(1,1,3,1)) （三）逐个变量分析员工离职、满意度与其他变量之间的关系## 3.1 查看满意度的分布图 hr_good$left &lt;- factor(hr_good$left, levels=c(0,1), labels=c(“stay”, “left”)) ggplot(hr_good, aes(satisfaction, fill=left)) + geom_histogram(position=”dodge”) + scale_x_continuous(breaks=c(0.1,0.13,0.25,0.50,0.73,0.75,0.92,1.00)) + theme3 + theme(axis.text.x=element_text(angle=90)) + labs(title=”满意度在[0.1,0.13]与[0.73,0.92]两个区间离职人数非常多”) ## 3.2 收入、工作时间、满意度之间的关系 【结论】：工作超长时间的员工满意度低，且离职率高1.低&amp;中等薪资水平中较高工作时间的员工大量离职2.超长工作时间的员工满意度都很低且几乎都已离职 ggplot(hr_good, aes(salary, hours, alpha=satisfaction, color=left)) + geom_jitter() + theme3 + labs(title=paste(“低&amp;中等薪资水平中较高工作时间的员工大量离职”,”\n”,”超长工作时间的员工满意度都很低且几乎都已离职”)) ## 3.3 晋升、满意度与离职的关系 【结论】：高评价的员工几乎没有人晋升，离职人员也主要集中在未晋升中 ggplot(hr_good, aes(promotion, evaluation, color=left)) + geom_jitter() + theme3 + scale_x_discrete(limits=c(0,1)) + labs(title=paste(“高评价的员工几乎没有人晋升”,”\n”,”离职人员也主要集中在未晋升中”)) ## 3.4 工作年限、满意度与离职的关系 【结论】：1.低满意度(0.1)水平下，4年司龄的员工大量离职2.大量高满意度员工在第5年与第6年离职3.7年以上的员工没有人离职 ggplot(hr_good, aes(years,satisfaction, color=left)) + geom_jitter() + scale_x_discrete(limits=c(4,5,6,7,8,9,10)) + theme3 + labs(title=paste(“低满意度(“,”0.1)”,”水平下，4年司龄的员工大量离职”,”\n”,”大量高满意度员工在第5年与第6年离职”)) ## 3.5 部门、项目数与离职的关系 【结论】：对于6个以上的项目无论在哪个部门离职率都非常高 ggplot(hr_good, aes(sales,fill=left)) + geom_bar(position=”fill”) + facet_wrap(~factor(project),ncol=1) + theme3 + theme(axis.text.x=element_text(angle=270)) + labs(y=”number projcet”,title=”对于6个以上的项目无论在哪个部门离职率都非常高”) ## 3.6 部门与离职的关系 【结论】：各部门离职人员均高于在职人员，管理部门除外 ggplot(hr_good, aes(sales, fill=left)) + geom_bar(position=”dodge”) + coord_flip() + scale_x_discrete(limits=c(“management”,”RandD”,”hr”,”accounting”,”marketing”,”product_mng”,”IT”,”support”,”technical”,”sales”)) + labs(title=”各部门离职人员均高于在职人员，管理部门除外”) + theme3 三、构建预测模型1：分类## 数据分割 library(caret)set.seed(0001)train &lt;- createDataPartition(hr_good$left, p=0.75, list=FALSE)hr_good_train &lt;- hr_good[train, ]hr_good_test &lt;- hr_good[-train, ] （一）Logistic回归## 1. 构建逻辑回归并验证 ctrl &lt;- trainControl(method=”cv”,number=5)logit &lt;- train(left~., hr_good_train, method=”LogitBoost”, trControl=ctrl)logit.pred &lt;- predict(logit, hr_good_test, tyep=”response”)confusionMatrix( hr_good_test$left, logit.pred) ​ Confusion Matrix and Statistics Reference Prediction stay left stay 213 33 left 8 436 Accuracy : 0.940695% CI : (0.9203, 0.957)No Information Rate : 0.6797P-Value [Acc &gt; NIR] : &lt; 2.2e-16Kappa : 0.8675Mcnemar’s Test P-Value : 0.0001781Sensitivity : 0.9638Specificity : 0.9296Pos Pred Value : 0.8659Neg Pred Value : 0.9820Prevalence : 0.3203Detection Rate : 0.3087Detection Prevalence : 0.3565Balanced Accuracy : 0.9467‘Positive’ Class : stay ## 2. 评价模型，绘制ROC/AUC曲线 library(pROC)roc(as.numeric(hr_good_test$left), as.numeric(logit.pred), plot=TRUE, print.thres=TRUE, print.auc=TRUE, col=”black”) （二）决策树## 1. 构建决策树 library(rpart)dtree &lt;- rpart(left~., hr_good_train, method=”class”,parms=list(split=”information”))dtree$cptable CP nsplit rel error xerror xstd 1 0.55209743 0 1.00000000 1.00000000 0.029509112 0.12855210 1 0.44790257 0.44790257 0.022568053 0.08254398 3 0.19079838 0.19079838 0.015512044 0.02300406 4 0.10825440 0.10825440 0.011867375 0.01000000 5 0.08525034 0.08525034 0.01057607 plotcp(dtree) dtree.pruned &lt;- prune(dtree, cp=0.01)library(partykit)library(grid)plot(as.party(dtree.pruned),main=”Decision Tree”) dtree.pruned.pred &lt;- predict(dtree.pruned, hr_good_test, type=”class”)confusionMatrix(hr_good_test$left, dtree.pruned.pred) Confusion Matrix and Statistics Reference Prediction stay left stay 236 10 left 13 431 Accuracy : 0.966795% CI : (0.9504, 0.9788)No Information Rate : 0.6391P-Value [Acc &gt; NIR] : &lt;2e-16Kappa : 0.9275Mcnemar’s Test P-Value : 0.6767Sensitivity : 0.9478Specificity : 0.9773Pos Pred Value : 0.9593Neg Pred Value : 0.9707Prevalence : 0.3609Detection Rate : 0.3420Detection Prevalence : 0.3565Balanced Accuracy : 0.9626‘Positive’ Class : stay ## 2. 评价模型，绘制ROC/AUC曲线 roc(as.numeric(hr_good_test$left),as.numeric(dtree.pruned.pred), plot=TRUE, print.thres=TRUE, print.auc=TRUE,col=”blue”) （三）随机森林## 1. 构建随机森林 library(randomForest)set.seed(0002)forest &lt;- randomForest(left~., hr_good_train, importance=TRUE, na.action=na.roughfix)forest Call: randomForest(formula = left ~ ., data = hr_good_train, importance = TRUE, na.action = na.roughfix) Type of random forest: classificationNumber of trees: 500No. of variables tried at each split: 3OOB estimate of error rate: 1.35% Confusion matrix: stay left class.errorstay 731 8 0.01082544left 20 1314 0.01499250 importance(forest, type=2) **MeanDecreaseGini** satisfaction 315.455428evaluation 63.101527project 51.659717hours 307.201129years 168.530576accident 6.232136promotion 1.897123sales 20.666829salary 12.338717 forest.pred &lt;- predict(forest, hr_good_test)confusionMatrix(hr_good_test$left, forest.pred) ​ Confusion Matrix and Statistics Reference Prediction stay left stay 241 5 left 4 440 Accuracy : 0.98795% CI : (0.9754, 0.994)No Information Rate : 0.6449P-Value [Acc &gt; NIR] : &lt;2e-16Kappa : 0.9715Mcnemar’s Test P-Value : 1Sensitivity : 0.9837Specificity : 0.9888Pos Pred Value : 0.9797Neg Pred Value : 0.9910Prevalence : 0.3551Detection Rate : 0.3493Detection Prevalence : 0.3565Balanced Accuracy : 0.9862‘Positive’ Class : stay ## 2. 评价模型，绘制ROC/AUC曲线 roc(as.numeric(hr_good_test$left), as.numeric(forest.pred), plot=TRUE, print.thres=TRUE, print.auc=T, col=”green”) （四）支持向量机SVM## 1. 构建SVM library(e1071)set.seed(0003)svm &lt;- svm(left~., hr_good_train)svm.pred &lt;- predict(svm, na.omit(hr_good_test))confusionMatrix(na.omit(hr_good_test)$left, svm.pred) Confusion Matrix and Statistics Reference Prediction stay left stay 211 35 left 11 433 Accuracy : 0.933395% CI : (0.9121, 0.9508)No Information Rate : 0.6783P-Value [Acc &gt; NIR] : &lt; 2.2e-16Kappa : 0.8515Mcnemar’s Test P-Value : 0.000696Sensitivity : 0.9505Specificity : 0.9252Pos Pred Value : 0.8577Neg Pred Value : 0.9752Prevalence : 0.3217Detection Rate : 0.3058Detection Prevalence : 0.3565Balanced Accuracy : 0.9378‘Positive’ Class : stay ## 2. 评价模型，绘制ROC/AUC曲线 roc(as.numeric(na.omit(hr_good_test)$left), as.numeric(svm.pred), plot=T, print.thres=T, print.auc=T, col=”orange”) （五）对比模型，选择准确性最高的模型 【结论】：随机森林的拟合度最高，选择该模型为预测模型 roc(as.numeric(hr_good_test$left), as.numeric(logit.pred), plot=TRUE,col=”black”,main=paste(“ROC曲线:”,”Logitis(black)”,”dtree(blue)”,”randomForest(green)”,”SVM(orange)”,sep=” “))roc(as.numeric(hr_good_test$left),as.numeric(dtree.pruned.pred), plot=TRUE, col=”blue”, add=T)roc(as.numeric(hr_good_test$left), as.numeric(forest.pred), plot=TRUE, col=”green”, add=T)roc(as.numeric(na.omit(hr_good_test)$left), as.numeric(svm.pred), plot=T, col=”orange”, add=T) （六）模型应用 importance(forest,type=2) MeanDecreaseGini satisfaction 315.455428evaluation 63.101527project 51.659717hours 307.201129years 168.530576accident 6.232136promotion 1.897123sales 20.666829salary 12.338717 ## 1. 剔除明显不重要的因子，重新构建模型 forest2 &lt;- randomForest(left~.-promotion-accident-salary-sales, hr_good, na.action=na.roughfix, importance=TRUE)importance(forest2, type=2) MeanDecreaseGini satisfaction 462.97925evaluation 72.49430project 71.09463hours 417.63782years 231.64080 forest2.pred &lt;- predict(forest2, hr_good_test)confusionMatrix(hr_good_test$left, forest2.pred, positive=”left”) Confusion Matrix and Statistics Reference Prediction stay left stay 244 2 left 1 443 Accuracy : 0.995795% CI : (0.9873, 0.9991)No Information Rate : 0.6449P-Value [Acc &gt; NIR] : &lt;2e-16Kappa : 0.9905Mcnemar’s Test P-Value : 1Sensitivity : 0.9959Specificity : 0.9955Pos Pred Value : 0.9919Neg Pred Value : 0.9977Prevalence : 0.3551Detection Rate : 0.3536Detection Prevalence : 0.3565Balanced Accuracy : 0.9957‘Positive’ Class : stay ## 2. 评价模型，绘制ROC/AUC曲线 roc(as.numeric(hr_good_test$left), as.numeric(forest2.pred), plot=TRUE, print.thres=T, print.auc=T, main=”Random Forest”, col=”green”) （七）结论1.调整后的随机森林预测模型员工离职的准确性达99.5%；其中离职的员工被正确预测的概率为99.5%，被预测离职的员工中，实际离职的概率为99.8%； 2.剔除不重要的变量（promotion,accident,sales,salary）并不会对模型造成影响； 3.满意度（satisfaction）、月平均工作时间（hours）、工作年限（years）是影响优秀员工离职的主要三个变量 四、构建预测模型2：主成分分析（一）判断主成分个数【结论】：根据结果，选择主成分个数为2个 library(psych)hr_pc &lt;- select(hr,-left,-sales,-salary)fa.parallel(hr_pc, fa=”pc”, n.iter=100, show.legend=FALSE, main=”Scree plot with parallel analysis”) ## Parallel analysis suggests that the number of factors = NA and the number of components = 2 （二）提取主成分【结论】：1.选择后的主成分RC1解释了数据33%的方差，RC2解释了16%；2个主成分共解释了数据49%的方差；2.RC1与”satisfaction,years”正相关，与”project, hours”负相关，称为综合因子13.RC2与”accident, promoion”正相关，与”evaluation”负相关，可称为综合因子2 hr.good.rc &lt;- principal(hr_good_pc, nfactors=2, scores=T)hr.good.rc Principal Components Analysis Call: principal(r = hr_good_pc, nfactors = 2, scores = T) Standardized loadings (pattern matrix) based upon correlation matrix RC1 RC2 h2 u2 com satisfaction 0.84 -0.19 0.74 0.26 1.1evaluation 0.25 -0.66 0.49 0.51 1.3project -0.85 0.03 0.73 0.27 1.0hours -0.64 -0.30 0.50 0.50 1.4years 0.61 0.10 0.39 0.61 1.1accident 0.14 0.55 0.32 0.68 1.1promotion 0.08 0.50 0.26 0.74 1.1 RC1 RC2 SS loadings 2.30 1.12Proportion Var 0.33 0.16Cumulative Var 0.33 0.49Proportion Explained 0.67 0.33Cumulative Proportion 0.67 1.00Mean item complexity = 1.2Test of the hypothesis that 2 components are sufficient.The root mean square of the residuals (RMSR) is 0.14with the empirical chi square 2283.14 with prob &lt; 0Fit based upon off diagonal values = 0.66 （三）获取主成分得分【结论】：优秀员工离职人员在如下两个范围出现**1.范围1：RC1[-2,-1], RC2[-1,1]**2.范围2：RC1[0,1], RC2[-1.5,0] hr.good.rc.scores &lt;- as.data.frame(hr.good.rc$scores)hr.good.rc.scores$left &lt;- hr_good$leftggplot(hr.good.rc.scores, aes(RC1,RC2,color=factor(left))) + geom_point() 五、构建预测模型3：聚类 library(cluster)library(fpc) （一）选择合适的数据，并进行标准化 hr_good_cl &lt;- select(hr_good,-left,-sales,-salary)hr_good_cl_scale &lt;- as.data.frame(scale(hr_good_cl)) （二）选择合适的聚类数量【结论】：根据图形与pamk的值，选择聚类个数为6 source(“wssplot.r”)wssplot(hr_good_cl_scale) set.seed(0004)pamk.best &lt;- pamk(hr_good_cl_scale)pamk.best$nc # [1] 6 （三） 拟合聚类，并查看分类结构 fit.pam &lt;- pam(hr_good_cl_scale, k=6)cl.pam &lt;- table(hr_good$left, fit.pam$clustering)cl.pam 1 2 3 4 5 6 stay 228 72 150 138 364 33 left 326 83 8 502 87 21 4 hr_good$clustering &lt;- fit.pam$clusteringggplot(hr_good, aes(clustering, fill=factor(left))) + geom_bar(position=”dodge”) + scale_x_discrete(limits=c(1,2,3,4,5,6)) + theme3 + labs(title=”类别2和类别3中，离职人员比例远高于其他分类”) clusplot(fit.pam, main=”基于PAM算法得到的六组聚类图”) （四） 评价聚类:兰德指数【结论】：聚类结果与实际离职与否的结果吻合度不是很高；从之前的数据分析来看，优秀员工的离职与否在两种不同情境下都有较高的比例； library(flexclust)randIndex(cl.pam) ARI0.1742728 （五）根据聚类的分类进行子集细分，并描述统计情况1. 查看各个聚类的统计量 【结论】：从统计量（均值）上看，如下两个情况的员工离职意向很高1.离职比例最高的类别2(left=0.92)，satisfaciton非常低(0.11)，项目数量最高(6.17)，月均工作时间最长(274.6)2.离职比例次高的类别3(left=0.77)，评价极高(0.96)，满意度(0.78)、月均工作时间(238.9)，工作年限(5.0) hr_good &lt;- as.data.frame(hr_good)hr_good$left &lt;- as.integer(hr_good$left)hr_good$left &lt;- ifelse(hr_good$left==1,0,1)select(hr_good,-sales,-salary) %&gt;% group_by(., clustering) %&gt;% summarize_all(.,mean) # A tibble: 6 × 9 clustering satisfaction evaluation project hours years accident left promotion1 1 0.7574729 0.8453791 4.673285 246.5036 5.223827 0.0000000 0.588447 02 2 0.1114945 0.8714176 6.167033 274.6451 4.137363 0.0000000 0.920879 03 3 0.7809969 0.9649080 4.605828 238.9632 5.170245 0.0000000 0.769938 04 4 0.5258667 0.8865778 4.960000 219.9511 5.142222 1.0000000 0.386667 05 5 0.5542078 0.8585714 4.446753 161.2779 5.088312 0.0000000 0.054545 06 6 0.5908108 0.8648649 4.864865 225.5135 5.567568 0.1891892 0.108108 1 ## 2. 选择类别2和类别3的子集 hr_good_cl_select &lt;- filter(hr_good, clustering %in% c(2,3))summary(hr_good_cl_select) satisfaction evaluation project hours years accidentMin. :0.090 Min. :0.7600 Min. :4.000 Min. :137.0 Min. : 4.000 Min. :01st Qu.:0.100 1st Qu.:0.8525 1st Qu.:5.000 1st Qu.:243.0 1st Qu.: 4.000 1st Qu.:0Median :0.110 Median :0.9200 Median :6.000 Median :260.0 Median : 4.000 Median :0Mean :0.391 Mean :0.9104 Mean :5.515 Mean :259.8 Mean : 4.569 Mean :03rd Qu.:0.790 3rd Qu.:0.9700 3rd Qu.:6.000 3rd Qu.:282.0 3rd Qu.: 5.000 3rd Qu.:0Max. :1.000 Max. :1.0000 Max. :7.000 Max. :310.0 Max. :10.000 Max. :0left promotion sales salary clusteringMin. :0.000 Min. :0 sales :408 low :895 Min. :2.0001st Qu.:1.000 1st Qu.:0 technical :341 medium:628 1st Qu.:2.000Median :1.000 Median :0 support :213 high : 39 Median :2.000Mean :0.858 Mean :0 IT :129 Mean :2.4173rd Qu.:1.000 3rd Qu.:0 product_mng:104 3rd Qu.:3.000Max. :1.000 Max. :0 accounting : 94 Max. :3.000 (Other) :273 ## 3. 逐一分析子集的变量分布 ## 3.1 满意度分布 hr_good_cl_select$clustering &lt;- factor(hr_good_cl_select$clustering)ggplot(hr_good_cl_select , aes(satisfaction,fill=factor(left))) + geom_histogram() + facet_wrap(~clustering,ncol=1) + theme2 + scale_x_continuous(limits=c(0.1,0.25,0.50,0.75,0.9,1.0)) ## 3.2 评价分布 ggplot(hr_good_cl_select , aes(evaluation,fill=factor(left))) + geom_histogram() + facet_wrap(~clustering,ncol=1) + theme2 + scale_x_continuous(breaks=c(0.77,0.79,0.8,0.84,0.85,0.88,0.89,0.91,0.93,0.94,0.98,1.0)) + theme(axis.text.x=element_text(angle=90),panel.grid.minor=element_blank()) ## 3.3 项目数量分布 ggplot(hr_good_cl_select , aes(project,fill=factor(left))) + geom_bar() + facet_wrap(~clustering,ncol=1) + theme2 ## 3.4 月均工作时长分布 ggplot(hr_good_cl_select , aes(hours,fill=factor(left))) + geom_histogram() + facet_wrap(~clustering,ncol=1) + theme2 + scale_x_continuous(breaks=c(160,200,220,245,275,310)) + theme(panel.grid.minor=element_blank()) ## 3.5 工作年限分布 ggplot(hr_good_cl_select , aes(years,fill=factor(left))) + geom_histogram(binwidth=0.5) + facet_wrap(~clustering,ncol=1) + theme2 + scale_x_continuous(breaks=c(4,5,6,7,8,10)) ## 3.6 工作事故分布 ggplot(hr_good_cl_select , aes(accident,fill=factor(left))) + geom_bar(width=0.3) + facet_wrap(~clustering,ncol=1) + theme2 ## 3.7 晋升情况分布 ggplot(hr_good_cl_select , aes(promotion,fill=factor(left))) + geom_bar() + facet_wrap(~clustering,ncol=1) + theme2 + scale_x_discrete(limits=c(0,1)) ## 3.7 部门分布 ggplot(hr_good_cl_select , aes(sales,fill=factor(left))) + geom_bar() + facet_wrap(~clustering,ncol=1) + theme2 + theme(axis.text.x=element_text(angle=270,vjust=0.5)) ## 3.7 薪资水平分布 ggplot(hr_good_cl_select , aes(salary,fill=factor(left))) + geom_bar(width=0.5) + facet_wrap(~clustering,ncol=1) + theme2 + scale_y_continuous(breaks=c(0,20,100,200,300,400,500)) + theme(panel.grid.minor=element_blank())]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017年新年目标：做一个自律的人]]></title>
      <url>%2F2017%2F01%2F16%2F2017%E5%B9%B4%E6%89%93%E7%A0%81%E8%AE%B0%E5%BD%95-%E5%81%9A%E4%B8%80%E4%B8%AA%E8%87%AA%E5%BE%8B%E7%9A%84%E4%BA%BA%2F</url>
      <content type="text"><![CDATA[2017年新年目标：每一天都有规律的作息（23:30前入睡，07:30前起床），并同时做好每天的记录（个人日志、学习成长） 做一个自律的人； 强大的自制力，就是告诉自己当下要做什么，那就做什么； 对自己说，现在去跑步，那就现在去； 对自己说，现在去睡觉，那就放下电脑与手机，去睡觉。 对自己说，现在看书30分钟，那就看30分钟； #以下打码记录# a-表示晚睡晚起； b-表示未做记录；如果晚睡晚起，写出你的原因 1月 2月 3月 4月 5月 6月 7月 8月 9月 10月 11月 12月 1.7 2.1-a 5.1-b 6.1-a 8.1-a 1.8-a 2.2-a 5.2-b 6.2 7.2-a 8.2-a 1.9 2.3-a 5.3 7.3-a 8.3 1.10-a 2.4-a 5.4-a 7.4-a 8.4-a 1.11 2.5-a 3.5 4.5-a 5.5 7.5-a 1.12 2.6-a 4.6-a 5.6a 6.6 7.6-a 1.13 2.7 3.7 4.7-a 5.7a 7.7-a 1.14 2.8 3.8 6.8 1.15 2.9-a 3.9 6.9-a 7.9-a 8.9-a 1.16 2.10-a 3.10 5.10 6.10-a 7.10-a 8.10 1.17-b 2.11-a 4.11-a 5.11-a 6.11-a 7.11-a 2.12-a 4.12 6.12-a 7.12 1.19-a 2.13 3.13 4.13-a 6.13 7.13-a 1.20-a 3.14-a 4.14 6.14 7.14-a 1.21-a 3.15-a 6.15-a 7.15-a 1.22 3.16-a 5.16-a 6.16 1.23 3.17 4.17-a 5.17-a 6.17 1.24-a 4.18-a 5.18 6.18 7.18 1.25 2.19-b 4.19-a 5.19 6.19 7.19 1.26-a 2.20-b 3.20-a 4.20-a 6.20-a 7.20 1.27 2.21-b 3.21-a 4.21 5.21-a 6.21-a 7.21 1.28-a 2.22-b 3.22 5.22-a 6.22-a 1.29-a 2.23-b 3.23 523-a 6.23-a 7.23-a 1.30 2.24-b 3.24-a 4.24 5.24-a 7.24 2.25-b 4.25 5.25 6.5-b 7.25 2.26-b 4.26 5.26 6.26-a 7.26 2.27-b 3.27-a 4.27 6.27 7.27-a 2.28-b 3.28 4.28-a 5.28-a 6.28 3.29-a 4.29-b 5.29-a 6.29 3.30 4.30-b 6.30 3.31 7.31 不能因为是周末，就可以晚睡晚起，甚至熬夜； 5.8~5.13：期货考证 3.25-3.26：无锡群游 2.11-2.14：杭州随游 2.19-2.28：上海求职]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[旅行记录_杭州]]></title>
      <url>%2F2017%2F01%2F09%2F%E6%97%85%E8%A1%8C%E8%AE%B0%E5%BD%95_%E6%9D%AD%E5%B7%9E_2017.01.14-01.17%2F</url>
      <content type="text"><![CDATA[ pwd = window.prompt("please input password","");var txt = document.getElementById("enc_content").innerHTML;var bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);document.getElementById("enc_content").innerHTML = plaintext]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[阅读的方法]]></title>
      <url>%2F2016%2F12%2F21%2F%E9%98%85%E8%AF%BB%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[掌握正确的方法会使你更加高效。 阅读方法形成图像；形成图像；形成图像； [再怎么强调都不为过] 为了理解和记忆，每次阅读时必须在大脑中画图像。 对于一些抽象的观点，可以用骨架结构代替图像来说明。 骨架图。通常仅包括一种或几种几何图形（圆形、直线、矩形、椭圆形等），以程式化/草图的形式编排，加上箭头之类表明方向与相互关系。 把图像复制成文字； 对于一些非场景化的表述，可以找出名词以及它们之间的关系，同时把它们看做视觉图像。用图像表述名词之间的联系 形成图像 P256 瓦尔登湖 骨架图 把图像复制成文字 阅读一本书步骤 先宏观浏览一遍目录、标题、总结、章节思考题 快速翻阅，了解这一章大概在讲什么；同时翻阅章节后的总结、思考题与习题 原因：正在创建你的神经结，然后把思维挂上去 然后在开始阅读 可能会读上几遍，但只是不按顺序而已 阅读之后还是不理解可以去网上搜索或者看视频 因为有时对概念不同的表达解释，可以让你的思维换个角度看待问题 阅读技巧： 事实证明，用同样的时间，阅读2遍的方式比看1遍的方式，对内容的记忆与理解会更加深刻； 所以，对于在 [第一遍阅读的时候，遇到无法一时理解的内容，可以略过] ，原因如下 当你阅读到后面的内容时，能对之前的内容有更进一步的理解； 即使此刻你花费时间去理解，当你阅读完整本书之后，可能就忘记了这块内容，或者发现其实它也并没有那么重要； 你确定当前的内容是作者的核心观点，这部分内容一定要花足够多的时间去阅读与理解； ​ ——2017.04.20 意义读书，必须有目的，有思考地去读；带着问题去阅读的思考层级，肯定比不带任何问题要高深很多。阅读的目的是为了改变行为。 why ：我为什么要读这本书，想解决什么问题？ 把理由写在最前面 阅读之后要能够用自己的话来回答自己的问题 what ：这本书在讲什么？核心观点是什么？ 【用自己的语言表达出来】 how ：文章的结构与脉络是怎么样的？如何依次发展这个主题的？ what ：【这个对我的生活与行为有什么指导意义？我是不是要做些什么？】 （关键） How ：具体怎么做？【描述到可执行的行动】 回答自己提出的问题 作者背景 阅读完之后，用几句话来概括这本书；[非常必要]别人问你这本书讲了什么的时候，能够把它说清楚； 读书之后，一定要有所行动，一定要输出。输出。输出。分享也好，写作也好，演讲也罢，只要输出，对本人/自己有帮助就好。 分类 &amp; 多遍阅读法分类阅读法 理论类 科普书籍：感性成分比较多；了解背景，明确术语和概念，建立全局观 计算机专业教材：理性成分较多；学习基础理论知识 实践类 特定领域的技术专著 多遍阅读法 阅读与学习某个知识之前，先通过概览的方式构造一个知识之网（书面化），[目录，构造知识之网的依据] 正文部分的阅读，是一个多遍扫描的过程 预热阶段：初步构建知识之网，确定阅读顺序和具体学习路线 仔细读 [序和前言] 本书的特点 本书的面向对象 第一遍 仔细读第一章 仔细阅读其他章节的开头和结尾，跳读中间 仔细看每一章的开头，就会对应该细读、跳读那部分内容清楚 重点看 [特定的应用场景和要解决的问题] 以及 [有哪些结论和观点] ；不要去关心那些细节 第二遍 挑出那些你最感兴趣的部分细读； 看不懂的内容可以先打个标记，跳过去 第三遍：看那些你还没看懂的内容 第四遍及更多 重点攻克那些你没看到懂的内容 通读全书，回顾反思 应对”难书” /“厚书”最主要的障碍 作者往往假设读者具备相应的背景知识 – [先阅读浅显的科普书籍，或者熟悉特定领域的背景知识] 书中大量的数学公式_《机器学习》-周志华 – [满页的数学公式的书；需要你先了解作者用的是数学是那些；你需要先攻下数学，看懂那些数学公式，才能看懂这本书] 作者本身是大牛，但写作能力有限；他认为很简单的东西，他就简写，可能对你来说根本就不明白_《离散数学教程》 – [可能需要先了解其他背景知识] 解决办法 断点续传：书看不懂时先跳过，不要硬看 对照阅读法：多找几本书 不同的作者有不同的角度来理解 多看几本，利于建立知识架构 教学视频法 先看视频教学入门，再看书 通过MOOC学比自己看书难度更低 选择书籍 目的决定阅读方法 选择适合自己 [当前水平] 的书 选择那些你已经 [具备读懂前提] 的 看一看序&amp;前言，作者会表明阅读此书需要的基本条件 若没有阐明，可以先读个2章；若发现读不懂，你应该果断地放弃这本书 其他 阅读的三个阶段： 找出一本书在谈论什么？ 诠释一本书的内容 评论一本书 ​ ——2016.04.16]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[旅行记录_厦门]]></title>
      <url>%2F2016%2F04%2F06%2F%E6%97%85%E8%A1%8C%E8%AE%B0%E5%BD%95_%E5%8E%A6%E9%97%A8_2016.04.06-04.10%2F</url>
      <content type="text"><![CDATA[var pwd = window.prompt("please input password","");var txt = document.getElementById("enc_content").innerHTML;var bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);document.getElementById("enc_content").innerHTML = plaintext]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[你这辈子活着是为了什么？]]></title>
      <url>%2F2016%2F03%2F27%2F%E4%BD%A0%E8%BF%99%E8%BE%88%E5%AD%90%E6%B4%BB%E7%9D%80%E6%98%AF%E4%B8%BA%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[U2FsdGVkX18zI8GEWPBNC+dAETZdJrAVCROGn+qDhU2P6zaoCVZ5Q4WIzL8O7+eg02xKTZWK/sKcGMxUlzfuKxgVd6UJcsYCdi1VVdQzGTIC4B803RV1yPW2m8KPsf4qVaBzIYlPI8/cbrp/oB8R1xHHTIn+V89uJryIALFAga6ufDSjkT8o4xQQFoR1+u1cBV9fp2ADdk/awslYLLKPH58/e5T8DMgX8jxL9GkDNFXJFxVFm53GXx1aYmCy2BklUy8ZXXvFP9CMpw4Lrsh98oZSxcsp6y6jURdqTmzKIP1eN1C07V6Y+vPl4q5z1g8sFELKMM8+4A37wyyUjZMcK9Cz1x/hQQcufeoewp+n1VDBpptymPF5QdN8wij7mHoaobmoIR3Wbbyuuwn5NEaqlIwnsEqdA95ogqP1zlaj3thxPbn7wEgbG0Kq0AwrKOXWFmx+SG90Q2FhdsLrSq5D4shXKrRrj6XGRVEkpSpWmKcov+favV1Tiqh/MJzChbkg7Ry3OH4RUFGBczSeeELksLltEdh/lBm9ED8VuBRT9/o1Br54BB49z1huplGS9CNFpNx8knNJxEs+Y/vlNTGsYSLpFqwl+19x1xC+K5FADeyeKgbdF7rlr8FUNBEAHqXCvqwDgvBQXmWunJLDmnnPO8i0JQsXWtHIk6iVQmprQq5+7FJd7CYJr54cQraBbyPIYk9UpaUuZ1UOF6SCSxeCykzNm+X0KGHGgQ7w6/lAyvV6kj6kQ7E4h5es2ZFvGDjqGXM8X+J3mA/USrad4Qhix4FAYaSjcX2ID8GHeqLnabQbXJnVYUWBRoEcqPylA/HHRxljLmJY+joG9TRLA37sOH0b+SNiu058Y2sc7/yT0GKeqm5xjKRpBynlXFiF6Bo9fQyuzXQGrjw2jdYC4R1lBXLje4bNUM7qMOpXubFjYJpsclmt4eVdw4BDQktMU1ikZCUjeH6e63VHzeuplBdV4BogO7tirT2dw9i4r0y3L8WTNeutB3KdQ/Y/gmGDsasLThkzDmEjLo7rhQeutgVodOic1mIiAl1kM0cf071LJkjpV73QdTUcW6yx1UsOBj2YFBfOE6dTgbzG/6sG3GkmZS/GB46/33TpQyIGJ84c7wB3Lgnv6F7LR6iJvxEGaQaLVKyMEuBLeul2bZ6kj0PHQEPLQHEjRD0PB9jDV6hWOlcTbkJf9MzSrkXlSHfpjlam4a1AogqUAK4FNzSst7Dz59GutBVMyZAsNLh8DzDB/u26X7E7gKR6J9yOXmRINVeZXrIjQiPm5RFwhwTa1c4A2P5ZloguMvHEOYsTJim1Z3UPVwKdMjvrA0BqvYhS7ErWu8P/kjd/0xaMI+CAslix6RqHj9Wv/cIscQmj693ftLJ/10ruwrzS4ppstaSawjFjF5LfSFl93uJvd1tFvmYFoaLCiQMXnlbWTq3FYSd0MRF7nXhm8+rsHw7sGZa3CmokALWcC4VvQW/q1vM6AUzHrY7p6EC9KEsUwOjD3K3TgtOZgq0E7TqAf23Re4ceJ65QL76OnJW1FXSyzT9MO7YdVuDwQD18qpRLh9r9cWmkYMto5kl7ENxLX9G2PoedJW4hv6hfjs+M1Ae5vYEMQfL72e1i9cGuvZiTFM0V4Xjj7j4CAgA8e7dHHO7BeU0ufxlGi4YMZiaPXqo6gblphFUAQiO1w55Ecfh7w6pz2YRyGUcZjzcNXCFT+KtCGjeQhzbRt2OaoOu0hGNFw1G/pBoHyJ4TEZo2dg1spmy7lZAuUn7tN+WNKKShWKbHXr53qYGqMKVlwLhdcZOdeur4IzpUf7uSn14rdk3vWvi+zXz+sRcwZ6LMEnBE7n0P14DyAVXDTACRQMi/MIZYjIqvyZWtiB7/v0Xa+HmLfT4qvnqIaYYYGjyCym9QsjDEcDKk3miHhb8lFS8SshcdPP7rIbFZUk37UIRkoAvh/lIq+MTNKee0NJDcWt4eukqvzCu9AgmloFlPYeK0uiMqNa0Nn915eDevaPrHvzFU08udK/0UpVD8y/V72Z/Xo4piUY2Ip8gQICr2vessxOC8IdVUbqHsplVGk2EcGW1JpLCbgI1EPDpumYoahNDa7ZORLn+GhMMYg1vVLISXSQ5eE0kOocVCKnyo/hsmlcnwS+AX68/GRwhfFZu/xfg5N7h7JpNefbrNRtaafcrXvq5QT9F0wEyJ1auAGfCUGCy3FFcLBUTpdv+og0fu4UNqS+68X/TJZ3DSObaX9lILOHTsQ+lX989boryVCexkyRU+Me59F9Wv4NnDZJGfSK8CedoVRe9gP7PAU2DwIIeuXDGxdHjJoirDMolq3rCkzQBEdg3F6UfB30eMePxgKMULYRUTnn94OO5f/fj7rI/tnj35i+rkoY7OS1sYEuw0FEvBPEKFN6R09FcIY7jeK7ARWCnT6rajBsemTyXlBrLUgUMO+MSNp9dkAJ6uOreQGj0D2YX40Yy/6LFmrjV60JKWN7vc3Foq3uocnEiIrp5cGIckDy37GHg+dSu1/q9JqLXYvHcS/v3ZJbgCfB3JWJuqt0a9B+TIWsPOpdRoI7f8sAzCgGEV8YFn2lDJGXwEJDNoeCzhIuXMPvtMtOh6QMmxy9ZhLh9uABmasZ7Ue9W5IbXcCnt73OXCiN7guy3q8xP6sVo8m1Fbuft7aUHpk5KfwSObA3xZbSVJRsn1Do83MorSgRxb/eWb3uPURlCNyxxu8Tgyi0o46RtaawEH4SCFtkdFhfyXyuFsXeZ/Cl9TOI5HaWzZUr3zsPBodt0ewSSnBfew6Rofmh6XiZEGbsmzJPrv7OTkJb+r6C/DBKwUQR9zXGUPAl89LkBXKBUMGdu8UD/w9R8JW41osMbPVq28CMbLtvo9U7PQHs+6m0lRPG3rehRt6I2a+9Bf0l95TrRLvX4RJRUGwxqNDrYKhpsWmV+frAgxFmQYElZ74At5ZwzHzh9ThV+Z5A==var pwd = window.prompt("please input password","");var txt = document.getElementById("enc_content").innerHTML;var bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);document.getElementById("enc_content").innerHTML = plaintext]]></content>
    </entry>

    
  
  
</search>
